const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":431,\"nextId\":431,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2#模板\",\"3\":\"2#笔记\",\"4\":\"2#剑指-offer\",\"5\":\"2#leetcode\",\"6\":\"3\",\"7\":\"4\",\"8\":\"4#目录\",\"9\":\"4#编程语言\",\"10\":\"4#计算机网络\",\"11\":\"4#数据库\",\"12\":\"4#操作系统\",\"13\":\"4#设计模式\",\"14\":\"4#中间件\",\"15\":\"4#git\",\"16\":\"4#docker\",\"17\":\"5\",\"18\":\"6\",\"19\":\"7\",\"20\":\"8\",\"21\":\"8@0\",\"22\":\"8@1\",\"23\":\"9\",\"24\":\"9#题意\",\"25\":\"9#思路一\",\"26\":\"9#思路二-优化\",\"27\":\"9@0\",\"28\":\"9@1\",\"29\":\"10\",\"30\":\"10#_1-vector-维护一个动态数组\",\"31\":\"10#_2-字符串\",\"32\":\"10#_3-在一个数组中查找最长的相同连续子序列\",\"33\":\"10#_4-秦九韶算法\",\"34\":\"10#_5-开栈空间代码\",\"35\":\"10#_6-求-a-除以-b-的正余数\",\"36\":\"10#_7-裴蜀定理\",\"37\":\"10#_8-交互题\",\"38\":\"10#_9-mex函数\",\"39\":\"10#_10-string-与-int-之间的转化\",\"40\":\"10#_11-string-npos\",\"41\":\"10#_12-x-i-1\",\"42\":\"10#_13-assign\",\"43\":\"10#_14-lambda表达式\",\"44\":\"10#_15-max-element-与-min-element\",\"45\":\"10#_16-tuple\",\"46\":\"10@0\",\"47\":\"10@1\",\"48\":\"11\",\"49\":\"11#_1、1230-k倍区间\",\"50\":\"11#_2、3956-截断数组\",\"51\":\"11#_3、99-激光炸弹\",\"52\":\"11@0\",\"53\":\"11@1\",\"54\":\"12\",\"55\":\"12#简介\",\"56\":\"12#基本模板\",\"57\":\"12#_1-初始化\",\"58\":\"12#_2-查询-已路径压缩\",\"59\":\"12#_3-合并\",\"60\":\"12#典例分析\",\"61\":\"12#例一-亲戚关系\",\"62\":\"12#例二-洛谷-p3367-【模板】并查集\",\"63\":\"12@0\",\"64\":\"12@1\",\"65\":\"13\",\"66\":\"13#_1-844-走迷宫-bfs\",\"67\":\"13#_2-845-八数码-bfs\",\"68\":\"13#_3-1233-全球变暖\",\"69\":\"13#_4-842-排列数字-dfs\",\"70\":\"13#_4\",\"71\":\"13#_5\",\"72\":\"13@0\",\"73\":\"13@1\",\"74\":\"14\",\"75\":\"14#_1-92-递归实现指数型枚举\",\"76\":\"14#_2-94-递归实现排列型枚举\",\"77\":\"14#_3-93-递归实现组合型枚举\",\"78\":\"14#_4-165-小猫爬山\",\"79\":\"14#_5-1209-带分数\",\"80\":\"14@0\",\"81\":\"14@1\",\"82\":\"15\",\"83\":\"15#_1-背包问题\",\"84\":\"15#_1-1-01-背包\",\"85\":\"15#_1-2-完全背包\",\"86\":\"15#_1-3-多重背包\",\"87\":\"15#_1-4-分组背包\",\"88\":\"15#_2-线性dp\",\"89\":\"15#_2-1-数字三角形\",\"90\":\"15#_2-2-最长上升子序列\",\"91\":\"15#_2-3-最长公共子序列-不连续\",\"92\":\"15#_2-4-最长公共上升子序列\",\"93\":\"15#_2-5-编辑距离\",\"94\":\"15#_2-6-最短编辑距离\",\"95\":\"15#_3-区间dp\",\"96\":\"15#_4-计数类dp\",\"97\":\"15#_5-数位统计类dp\",\"98\":\"15#_6-状态压缩类dp\",\"99\":\"15#_6-1-蒙德里安的梦想\",\"100\":\"15#_6-2-最短hamilton路径\",\"101\":\"15#_7-树形dp\",\"102\":\"15#_7-1-没有上司的舞会\",\"103\":\"15@0\",\"104\":\"16\",\"105\":\"16#_1-快速排序\",\"106\":\"16#_2-归并排序\",\"107\":\"16#_3-二分算法\",\"108\":\"16#_3-1-二分查找算法模板\",\"109\":\"16#版本1\",\"110\":\"16#版本2\",\"111\":\"16#_3-2-二分答案模板\",\"112\":\"16#_3-3-整数二分\",\"113\":\"16#_3-4-浮点数二分\",\"114\":\"16#_4-高精度算法\",\"115\":\"16#_4-1-高精度加法\",\"116\":\"16#_4-2-高精度减法\",\"117\":\"16#_4-3-高精度整数乘法\",\"118\":\"16#_4-4-高精度整数除法\",\"119\":\"16#_5-前缀和与差分\",\"120\":\"16#_5-1-一维前缀和\",\"121\":\"16#_5-2-二维前缀和\",\"122\":\"16#_5-3-一维差分\",\"123\":\"16#_5-4-二维差分\",\"124\":\"16#_6-位运算\",\"125\":\"16#_6-1-位运算符\",\"126\":\"16#_6-2-用途\",\"127\":\"16#_6-3-例题\",\"128\":\"16#_7-双指针算法\",\"129\":\"16#_8-离散化\",\"130\":\"16#_9-区间合并\",\"131\":\"16@0\",\"132\":\"17\",\"133\":\"17#_1-树与图的存储\",\"134\":\"17#_2-树与图的遍历\",\"135\":\"17#深度优先遍历\",\"136\":\"17#宽度优先遍历\",\"137\":\"17#_3-拓扑排序\",\"138\":\"17#_4-最短路问题\",\"139\":\"17#_4-1-单源最短路\",\"140\":\"17#_4-1-1-朴素版-dijkstra算法\",\"141\":\"17#_4-1-2-堆优化版的dijkstra算法\",\"142\":\"17#_4-1-3-bellman-ford算法-存在负权边\",\"143\":\"17#_4-1-4-spfa算法-存在负权边\",\"144\":\"17#_4-1-5-spfa算法判断图中是否存在负环\",\"145\":\"17#_4-2-多源汇最短路\",\"146\":\"17#_4-2-1-floyd算法\",\"147\":\"17#_5-最小生成树问题\",\"148\":\"17#_5-1-朴素prim算法\",\"149\":\"17#_5-2-kruskal-算法\",\"150\":\"17#_6-染色法判别二分图\",\"151\":\"17#_7-匈牙利算法\",\"152\":\"17@0\",\"153\":\"18\",\"154\":\"18#_1-质数\",\"155\":\"18#_1-1-试除法判定质数\",\"156\":\"18#_1-2-试除法分解质因数\",\"157\":\"18#汇总\",\"158\":\"18#_1-3-筛法求素数\",\"159\":\"18#_1-3-1-朴素筛法-埃氏筛\",\"160\":\"18#_1-3-2-区间筛法\",\"161\":\"18#_1-3-3-线性筛-欧拉筛\",\"162\":\"18#_2-约数\",\"163\":\"18#_2-1-试除法求所有约数\",\"164\":\"18#_2-2-约数个数和约数之和\",\"165\":\"18#_2-3-最大公约数与最小公倍数\",\"166\":\"18#_3-欧拉函数\",\"167\":\"18#_3-1-求欧拉函数\",\"168\":\"18#_3-2-筛法求欧拉函数\",\"169\":\"18#_4-快速幂\",\"170\":\"18#_5-扩展欧几里得算法\",\"171\":\"18#裴蜀定理\",\"172\":\"18#_6-中国剩余定理\",\"173\":\"18#_7-高斯消元\",\"174\":\"18#_8-求组合数\",\"175\":\"18#_8-1-递推法求组合数\",\"176\":\"18#_8-2-通过预处理逆元的方式求组和数\",\"177\":\"18#_8-3-卢卡斯-lucas-定理求组合数\",\"178\":\"18#_8-4-分解质因数法求组合数\",\"179\":\"18#_8-5-卡特兰数\",\"180\":\"18#_9-容斥原理\",\"181\":\"18#_10-博弈论\",\"182\":\"18#_10-1-nim游戏\",\"183\":\"18#_10-2-公平组合游戏icg\",\"184\":\"18#_10-3-有向图游戏\",\"185\":\"18#_10-4-mex运算\",\"186\":\"18#_10-5-sg游戏\",\"187\":\"18#_10-6-有向图游戏的和\",\"188\":\"18@0\",\"189\":\"19\",\"190\":\"19#_1-数组模拟链表\",\"191\":\"19#_1-1-单链表\",\"192\":\"19#_1-2-双链表\",\"193\":\"19#_2-栈\",\"194\":\"19#_2-1-普通栈\",\"195\":\"19#_2-1-单调栈\",\"196\":\"19#_3-队列\",\"197\":\"19#_3-1-普通队列\",\"198\":\"19#_3-2-单调队列\",\"199\":\"19#_4-kmp\",\"200\":\"19#_5-trie树\",\"201\":\"19#_6-并查集\",\"202\":\"19#_6-1-朴素并查集\",\"203\":\"19#_6-2-维护size的并查集\",\"204\":\"19#_6-3-维护到祖宗节点距离的并查集\",\"205\":\"19#_7-堆\",\"206\":\"19#_8-哈希表\",\"207\":\"19#_8-1-拉链法\",\"208\":\"19#_8-2-开放寻址法\",\"209\":\"19#_8-3-字符串哈希\",\"210\":\"19#_9-c-stl简介\",\"211\":\"19#_10-常用库函数\",\"212\":\"19@0\",\"213\":\"20\",\"214\":\"20#_1-区间问题\",\"215\":\"20#_1-1-区间选点\",\"216\":\"20#_1-2-最大不相交区间数量\",\"217\":\"20#_1-3-区间分组\",\"218\":\"20#_1-4-区间覆盖\",\"219\":\"20#_1-5-区间合并\",\"220\":\"20@0\",\"221\":\"21\",\"222\":\"21#_01-背景\",\"223\":\"21#_02-基础功能模块\",\"224\":\"21#_03-架构设计\",\"225\":\"21#_3-1-架构设计-概览\",\"226\":\"21#_3-2-架构设计-reply-interface\",\"227\":\"21#_3-3-架构设计-reply-admin\",\"228\":\"21#_3-4-架构设计-reply-service\",\"229\":\"21#_3-5-架构设计-reply-job\",\"230\":\"21#_04-存储设计\",\"231\":\"21#_4-1-数据库设计\",\"232\":\"21#_4-2-缓存设计\",\"233\":\"21#_05-可用性设计\",\"234\":\"21#_5-1-写热点与读热点\",\"235\":\"21#_5-2-冗余与降级\",\"236\":\"21#_06-安全性设计\",\"237\":\"21#_6-1-数据安全\",\"238\":\"21#_6-2-舆论安全\",\"239\":\"21#_07-热评设计\",\"240\":\"21#_7-1-什么是热评\",\"241\":\"21#_7-2-挑战与应对\",\"242\":\"21#_7-3-愿景与规划\",\"243\":\"21@0\",\"244\":\"21@1\",\"245\":\"22\",\"246\":\"22#功能模块\",\"247\":\"22#架构设计\",\"248\":\"22#comment-service\",\"249\":\"22#读的核心逻辑\",\"250\":\"22#写的核心逻辑\",\"251\":\"22#comment-admin\",\"252\":\"22#bff-comment\",\"253\":\"22@0\",\"254\":\"22@1\",\"255\":\"23\",\"256\":\"23#存储设计\",\"257\":\"23#数据表设计\",\"258\":\"23#总结\",\"259\":\"23#缓存设计\",\"260\":\"23#可用性设计\",\"261\":\"23#缓存穿透\",\"262\":\"23#热点\",\"263\":\"23@0\",\"264\":\"23@1\",\"265\":\"24\",\"266\":\"24@0\",\"267\":\"24@1\",\"268\":\"25\",\"269\":\"25#题意\",\"270\":\"25#思路一-递归\",\"271\":\"25#思路二-迭代\",\"272\":\"25@0\",\"273\":\"25@1\",\"274\":\"26\",\"275\":\"26#题意\",\"276\":\"26#思路一-后序遍历-递归\",\"277\":\"26#思路二-层序遍历-迭代\",\"278\":\"26@0\",\"279\":\"26@1\",\"280\":\"27\",\"281\":\"27#题意\",\"282\":\"27#思路\",\"283\":\"27#代码\",\"284\":\"27@0\",\"285\":\"27@1\",\"286\":\"28\",\"287\":\"28#题意\",\"288\":\"28#思路\",\"289\":\"28#代码\",\"290\":\"28@0\",\"291\":\"28@1\",\"292\":\"29\",\"293\":\"29#题意\",\"294\":\"29#思路\",\"295\":\"29#代码\",\"296\":\"29@0\",\"297\":\"29@1\",\"298\":\"30\",\"299\":\"30#题意\",\"300\":\"30#思路\",\"301\":\"30#代码\",\"302\":\"30@0\",\"303\":\"30@1\",\"304\":\"31\",\"305\":\"31#题意\",\"306\":\"31#思路一-dfs\",\"307\":\"31#思路二-bfs\",\"308\":\"31#思路三-并查集\",\"309\":\"31@0\",\"310\":\"31@1\",\"311\":\"32\",\"312\":\"32#题意\",\"313\":\"32#思路\",\"314\":\"32#代码\",\"315\":\"32@0\",\"316\":\"32@1\",\"317\":\"33\",\"318\":\"33#题意\",\"319\":\"33#思路一-优先队列\",\"320\":\"33#思路二-单调队列\",\"321\":\"33@0\",\"322\":\"33@1\",\"323\":\"34\",\"324\":\"34#题意\",\"325\":\"34#思路\",\"326\":\"34#代码\",\"327\":\"34@0\",\"328\":\"34@1\",\"329\":\"35\",\"330\":\"35#题意\",\"331\":\"35#思路\",\"332\":\"35#代码\",\"333\":\"35@0\",\"334\":\"35@1\",\"335\":\"36\",\"336\":\"36#题意\",\"337\":\"36#思路\",\"338\":\"36#代码\",\"339\":\"36@0\",\"340\":\"36@1\",\"341\":\"37\",\"342\":\"37#数组\",\"343\":\"37#字符串\",\"344\":\"37#string\",\"345\":\"37#stringbuilder\",\"346\":\"37#集合\",\"347\":\"37#list-列表\",\"348\":\"37#set-集合\",\"349\":\"37#map-映射\",\"350\":\"37#栈\",\"351\":\"37#queue-队列\",\"352\":\"37#deque-双端队列\",\"353\":\"37#priorityqueue-优先队列\",\"354\":\"37#工具类\",\"355\":\"37#java-util-math\",\"356\":\"37#java-util-collections\",\"357\":\"37#javafx-util-pair-k-v\",\"358\":\"37#基本类型的最大值和最小值\",\"359\":\"37@0\",\"360\":\"37@1\",\"361\":\"38\",\"362\":\"38#linux-安装启动\",\"363\":\"38#docker-安装启动\",\"364\":\"38#windows-安装启动\",\"365\":\"38#windows-后台服务安装\",\"366\":\"38@0\",\"367\":\"38@1\",\"368\":\"39\",\"369\":\"39#什么是对象存储\",\"370\":\"39#特点\",\"371\":\"39@0\",\"372\":\"39@1\",\"373\":\"40\",\"374\":\"40#引入依赖\",\"375\":\"40#配置文件\",\"376\":\"40#minioclient-的常用-api\",\"377\":\"40#bucket-操作\",\"378\":\"40#object-操作\",\"379\":\"40@0\",\"380\":\"40@1\",\"381\":\"41\",\"382\":\"41#一、初始化环境\",\"383\":\"41#二、初始化上下文\",\"384\":\"41#_2-1-加载-eureka-server-配置文件\",\"385\":\"41#_2-1-1-创建默认的-eureka-server-配置\",\"386\":\"41#_2-2-2-加载配置文件\",\"387\":\"41#_2-1-3-真正的配置项在哪\",\"388\":\"41#_2-1-4-加载配置文件小结\",\"389\":\"41#_2-2-构造实例信息管理器\",\"390\":\"41#_2-2-1-初始化服务实例的配置-instanceconfig\",\"391\":\"41#_2-2-2-构造服务实例-instanceinfo\",\"392\":\"41#_2-2-3-小结\",\"393\":\"41#_2-3-初始化-eureka-client\",\"394\":\"41#_2-3-1-初始化-eureka-client-配置\",\"395\":\"41#_2-3-2-初始化-eurekaclient\",\"396\":\"41#_2-4-处理注册相关的流程\",\"397\":\"41#_2-4-1-注册对象\",\"398\":\"41#_2-5-初始化上下文\",\"399\":\"41#_2-5-1-集群节点帮助类\",\"400\":\"41#_2-5-2-默认上下文\",\"401\":\"41#_2-5-3-创建上下文的持有者\",\"402\":\"41#_2-5-4-初始化上下文\",\"403\":\"41#_2-6-其他\",\"404\":\"41#_2-6-1-从相邻节点拷贝注册信息\",\"405\":\"41#_2-6-2-eureka-监控\",\"406\":\"41#_2-7-编译报错的解决方案\",\"407\":\"41#_1、异常1\",\"408\":\"41#_2、异常2\",\"409\":\"41#三、总结\",\"410\":\"41@0\",\"411\":\"41@1\",\"412\":\"42\",\"413\":\"42@0\",\"414\":\"42@1\",\"415\":\"43\",\"416\":\"44\",\"417\":\"45\",\"418\":\"46\",\"419\":\"47\",\"420\":\"48\",\"421\":\"49\",\"422\":\"50\",\"423\":\"51\",\"424\":\"52\",\"425\":\"53\",\"426\":\"54\",\"427\":\"55\",\"428\":\"56\",\"429\":\"57\",\"430\":\"58\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,2],\"1\":[1,4],\"2\":[1,6],\"3\":[1,5],\"4\":[2],\"5\":[1,2],\"6\":[1,4],\"7\":[1,9],\"8\":[1],\"9\":[1],\"10\":[1],\"11\":[1],\"12\":[1],\"13\":[1],\"14\":[1,44],\"15\":[1],\"16\":[1],\"17\":[1,2],\"18\":[1,3],\"19\":[1,5],\"20\":[1],\"21\":[null,null,1],\"22\":[null,null,1],\"23\":[1,2],\"24\":[1,18],\"25\":[1,39],\"26\":[3,1],\"27\":[null,null,1],\"28\":[null,null,2],\"29\":[1],\"30\":[3,14],\"31\":[2,88],\"32\":[2,19],\"33\":[2,23],\"34\":[2,21],\"35\":[6,7],\"36\":[2,25],\"37\":[2,27],\"38\":[2,20],\"39\":[5,39],\"40\":[3,31],\"41\":[5,7],\"42\":[3,44],\"43\":[2,74],\"44\":[6,36],\"45\":[2,32],\"46\":[null,null,1],\"47\":[null,null,1],\"48\":[1],\"49\":[1,138],\"50\":[1,101],\"51\":[1,109],\"52\":[null,null,1],\"53\":[null,null,1],\"54\":[1],\"55\":[1,18],\"56\":[1],\"57\":[2,24],\"58\":[4,21],\"59\":[2,22],\"60\":[1],\"61\":[2,109],\"62\":[5,127],\"63\":[null,null,2],\"64\":[null,null,1],\"65\":[1],\"66\":[2,105],\"67\":[2,126],\"68\":[1,50],\"69\":[2,61],\"70\":[2],\"71\":[2],\"72\":[null,null,1],\"73\":[null,null,2],\"74\":[1],\"75\":[1,65],\"76\":[1,71],\"77\":[1,83],\"78\":[1,107],\"79\":[1,143],\"80\":[null,null,1],\"81\":[null,null,1],\"82\":[1],\"83\":[2,4],\"84\":[3,48],\"85\":[3,45],\"86\":[3,74],\"87\":[3,53],\"88\":[2],\"89\":[3,53],\"90\":[2,73],\"91\":[5,47],\"92\":[3,79],\"93\":[3,83],\"94\":[3,64],\"95\":[2,75],\"96\":[2,60],\"97\":[2,101],\"98\":[2],\"99\":[3,74],\"100\":[3,74],\"101\":[2],\"102\":[3,76],\"103\":[null,null,2],\"104\":[1],\"105\":[2,54],\"106\":[2,58],\"107\":[2],\"108\":[3,13],\"109\":[1,30],\"110\":[1,45],\"111\":[3,36],\"112\":[2,72],\"113\":[3,25],\"114\":[2],\"115\":[3,77],\"116\":[3,106],\"117\":[3,60],\"118\":[2,72],\"119\":[2],\"120\":[3,10],\"121\":[3,15],\"122\":[3,10],\"123\":[3,13],\"124\":[2],\"125\":[3,37],\"126\":[3,138],\"127\":[3,81],\"128\":[2,25],\"129\":[2,34],\"130\":[2,27],\"131\":[null,null,1],\"132\":[1],\"133\":[2,73],\"134\":[2,7],\"135\":[1,16],\"136\":[1,23],\"137\":[2,49],\"138\":[2],\"139\":[3,34],\"140\":[4,84],\"141\":[4,76],\"142\":[7,103],\"143\":[5,88],\"144\":[4,62],\"145\":[3],\"146\":[4,31],\"147\":[2,14],\"148\":[3,106],\"149\":[4,114],\"150\":[2,80],\"151\":[2,94],\"152\":[null,null,2],\"153\":[1],\"154\":[2],\"155\":[2,26],\"156\":[3,47],\"157\":[1,34],\"158\":[3],\"159\":[5,63],\"160\":[4,53],\"161\":[5,65],\"162\":[2],\"163\":[3,27],\"164\":[2,67],\"165\":[3,27],\"166\":[2],\"167\":[3,35],\"168\":[3,60],\"169\":[2,49],\"170\":[2],\"171\":[1,64],\"172\":[2,94],\"173\":[2,83],\"174\":[2],\"175\":[3,29],\"176\":[3,86],\"177\":[5,79],\"178\":[3,73],\"179\":[3,11],\"180\":[2,81],\"181\":[2],\"182\":[3,74],\"183\":[3,17],\"184\":[3,12],\"185\":[3,11],\"186\":[3,23],\"187\":[3,22],\"188\":[null,null,2],\"189\":[1],\"190\":[2],\"191\":[2,49],\"192\":[3,35],\"193\":[2,1],\"194\":[3,20],\"195\":[3,31],\"196\":[2,2],\"197\":[3,24],\"198\":[3,38],\"199\":[2,86],\"200\":[2,41],\"201\":[2],\"202\":[3,32],\"203\":[3,26],\"204\":[3,32],\"205\":[2,90],\"206\":[2],\"207\":[3,27],\"208\":[3,23],\"209\":[3,46],\"210\":[3,144],\"211\":[2,100],\"212\":[null,null,2],\"213\":[1],\"214\":[2],\"215\":[2,54],\"216\":[3,45],\"217\":[3,62],\"218\":[3,65],\"219\":[3,64],\"220\":[null,null,2],\"221\":[1,3],\"222\":[2,44],\"223\":[2,43],\"224\":[2,3],\"225\":[4,1],\"226\":[5,49],\"227\":[4,22],\"228\":[5,14],\"229\":[5,87],\"230\":[2],\"231\":[3,120],\"232\":[3,80],\"233\":[2],\"234\":[3,71],\"235\":[3,29],\"236\":[2,5],\"237\":[3,38],\"238\":[3,79],\"239\":[2],\"240\":[3,52],\"241\":[3,208],\"242\":[3,96],\"243\":[null,null,1],\"244\":[null,null,1],\"245\":[1,13],\"246\":[1,45],\"247\":[1,83],\"248\":[2,17],\"249\":[1,53],\"250\":[1,46],\"251\":[2,48],\"252\":[2,25],\"253\":[null,null,1],\"254\":[null,null,1],\"255\":[1,3],\"256\":[1],\"257\":[1,164],\"258\":[1,14],\"259\":[1,72],\"260\":[1],\"261\":[1,75],\"262\":[1,46],\"263\":[null,null,1],\"264\":[null,null,1],\"265\":[1,17],\"266\":[null,null,1],\"267\":[null,null,1],\"268\":[1,2],\"269\":[1,16],\"270\":[3,13],\"271\":[3,21],\"272\":[null,null,2],\"273\":[null,null,3],\"274\":[1,2],\"275\":[1,7],\"276\":[4,32],\"277\":[4,35],\"278\":[null,null,2],\"279\":[null,null,3],\"280\":[1,2],\"281\":[1,11],\"282\":[1,9],\"283\":[1,26],\"284\":[null,null,2],\"285\":[null,null,2],\"286\":[4,4],\"287\":[1,32],\"288\":[1,54],\"289\":[1,56],\"290\":[null,null,2],\"291\":[null,null,1],\"292\":[1,2],\"293\":[1,4],\"294\":[1,21],\"295\":[1,22],\"296\":[null,null,2],\"297\":[null,null,2],\"298\":[1,2],\"299\":[1,12],\"300\":[1,8],\"301\":[1,28],\"302\":[null,null,2],\"303\":[null,null,1],\"304\":[1,2],\"305\":[1,14],\"306\":[3,66],\"307\":[3,70],\"308\":[3,59],\"309\":[null,null,2],\"310\":[null,null,3],\"311\":[1,2],\"312\":[1,22],\"313\":[1,23],\"314\":[1,46],\"315\":[null,null,2],\"316\":[null,null,1],\"317\":[1,2],\"318\":[1,11],\"319\":[3,41],\"320\":[3],\"321\":[null,null,2],\"322\":[null,null,3],\"323\":[1,2],\"324\":[1,5],\"325\":[1,6],\"326\":[1,27],\"327\":[null,null,2],\"328\":[null,null,2],\"329\":[1,2],\"330\":[1,25],\"331\":[1,49],\"332\":[1,91],\"333\":[null,null,2],\"334\":[null,null,1],\"335\":[1,2],\"336\":[1,32],\"337\":[1,71],\"338\":[1,53],\"339\":[null,null,2],\"340\":[null,null,1],\"341\":[1,4],\"342\":[1,28],\"343\":[1,25],\"344\":[1,156],\"345\":[1,21],\"346\":[1],\"347\":[2,70],\"348\":[2,43],\"349\":[2,113],\"350\":[1,60],\"351\":[2,42],\"352\":[2,34],\"353\":[2,69],\"354\":[1],\"355\":[3,35],\"356\":[3,44],\"357\":[4,32],\"358\":[1,28],\"359\":[null,null,1],\"360\":[null,null,1],\"361\":[2,16],\"362\":[2,85],\"363\":[2,20],\"364\":[2,42],\"365\":[2,78],\"366\":[null,null,1],\"367\":[null,null,1],\"368\":[2,40],\"369\":[2,56],\"370\":[1,143],\"371\":[null,null,1],\"372\":[null,null,1],\"373\":[3],\"374\":[1,12],\"375\":[1,85],\"376\":[3],\"377\":[2,76],\"378\":[2,95],\"379\":[null,null,1],\"380\":[null,null,1],\"381\":[5,7],\"382\":[2,67],\"383\":[2,14],\"384\":[6,44],\"385\":[6,10],\"386\":[2,103],\"387\":[5,67],\"388\":[4,47],\"389\":[2,2],\"390\":[4,30],\"391\":[3,23],\"392\":[3,13],\"393\":[5],\"394\":[7,43],\"395\":[4,115],\"396\":[3],\"397\":[4,57],\"398\":[3],\"399\":[4,14],\"400\":[3,12],\"401\":[4,32],\"402\":[4,33],\"403\":[3],\"404\":[4,6],\"405\":[4,3],\"406\":[3],\"407\":[2,18],\"408\":[2,20],\"409\":[2,4],\"410\":[null,null,1],\"411\":[null,null,1],\"412\":[6],\"413\":[null,null,1],\"414\":[null,null,1],\"415\":[1,3],\"416\":[2],\"417\":[1],\"418\":[1],\"419\":[1],\"420\":[2],\"421\":[2],\"422\":[1],\"423\":[1],\"424\":[1],\"425\":[2],\"426\":[1],\"427\":[1],\"428\":[2],\"429\":[2],\"430\":[1]},\"averageFieldLength\":[2.1883872191421676,41.789177095322245,0.5416999337095776],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"个人介绍和档案放置在此。\"]},\"1\":{\"h\":\"算法笔记\",\"t\":[\"此处存放刷题时的思路和笔记，包括算法题、笔试题和面试题等。\"]},\"2\":{\"h\":\"模板\",\"t\":[\"基础算法\",\"数据结构\",\"搜索与图论\",\"数学知识\",\"动态规划\",\"贪心\"]},\"3\":{\"h\":\"笔记\",\"t\":[\"并查集\",\"递归相关题型\",\"前缀和相关题型\",\"搜索\",\"一些经验和技巧\"]},\"4\":{\"h\":\"剑指 offer\"},\"5\":{\"h\":\"LeetCode\",\"t\":[\"热题 100\"]},\"6\":{\"h\":\"架构设计\",\"t\":[\"此处存放一些关于 Java 架构以及系统架构方面的笔记知识点。\"]},\"7\":{\"h\":\"计算机\",\"t\":[\"此处存放一些计算机大类的笔记，包括编程语言、计算机网络、操作系统、数据库、Linux、Git、Docker等等。\"]},\"8\":{\"h\":\"目录\"},\"9\":{\"h\":\"编程语言\"},\"10\":{\"h\":\"计算机网络\"},\"11\":{\"h\":\"数据库\"},\"12\":{\"h\":\"操作系统\"},\"13\":{\"h\":\"设计模式\"},\"14\":{\"h\":\"中间件\",\"t\":[\"中间件（英语：Middleware）：是一种在系统软件和用户应用软件之间连接的软件，以便于软件各部件之间的沟通，特别是应用软件对于系统软件的集中的逻辑，是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源。中间件在客户服务器的操作系统、网络和数据库之上，管理计算资源和网络通信。总的作用是为处于自己上层的应用软件提供运行与开发的环境，帮助用户灵活、高效地开发和集成复杂的应用软件。\",\"也就是说，关于中间件，可以理解为：是一类能够为一种或多种应用程序合作互通、资源共享，同时还能够为该应用程序提供相关的服务的软件。中间件是一类软件统称，而非一种软件；中间件不仅仅实现互连，还要实现应用之间的互操作。\",\"中间件与操作系统和数据库共同构成基础软件三大支柱，是一种应用于分布式系统的基础软件，位于应用与操作系统、数据库之间，为上层应用软件提供开发、运行和集成的平台。中间件解决了异构网络环境下软件互联和互操作等共性问题，并提供标准接口、协议，为应用软件间共享资源提供了可复用的“标准件”。\",\"常见中间件主要分为：Web中间件、数据库中间件、消息中间件、安全中间件、事务中间件、应用程序服务器中间件、分布式计算中间件等。\"]},\"15\":{\"h\":\"Git\"},\"16\":{\"h\":\"Docker\"},\"17\":{\"h\":\"常用框架\",\"t\":[\"此处存放前后端常用框架的笔记。\"]},\"18\":{\"h\":\"开源项目\",\"t\":[\"此处存放自己写和一些优秀的开源项目，帮助学习。\"]},\"19\":{\"h\":\"程序人生\",\"t\":[\"此处存放一些程序员相关的资源文件，包括但不限于书籍、文章、资料等等。\"]},\"20\":{\"h\":\"剑指offer\"},\"21\":{\"c\":[\"algorithm\"]},\"22\":{\"c\":[\"offer\"]},\"23\":{\"h\":\"另一棵树的子树\",\"t\":[\"572.另一棵树的子树\"]},\"24\":{\"h\":\"题意\",\"t\":[\"给你两棵二叉树 root 和 subRoot 。检验 root 中是否包含和 subRoot 具有相同结构和节点值的子树。如果存在，返回 true ；否则，返回 false 。\",\"二叉树 tree 的一棵子树包括 tree 的某个节点和这个节点的所有后代节点。tree 也可以看做它自身的一棵子树。\"]},\"25\":{\"h\":\"思路一\",\"t\":[\"直接递归判断:\",\"如果 subRoot 为空，则和叶节点的空子节点匹配，返回 true\",\"如果当前节点是空节点，无法与 subRoot 匹配，返回 false。\",\"如果当前节点与 subRoot 根节点相同，则递归往下判断，如果是相同的树，返回 true。\",\"否则，递归左右子树，看是否能找到匹配的，如果找到则返回 true。\",\"代码:\",\"class Solution { boolean isSametree(TreeNode p, TreeNode q) { if (p == null || q == null) return p == q; return p.val == q.val && isSametree(p.left, q.left) && isSametree(p.right, q.right); } public boolean isSubtree(TreeNode root, TreeNode subRoot) { if (subRoot == null) return true; if (root == null) return false; return isSametree(root, subRoot) || isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot); } }\"]},\"26\":{\"h\":\"思路二（优化）\",\"t\":[\"只在高度相同时匹配\"]},\"27\":{\"c\":[\"数据结构\"]},\"28\":{\"c\":[\"二叉树\",\"递归\"]},\"29\":{\"h\":\"一些经验和技巧\"},\"30\":{\"h\":\"1. vector 维护一个动态数组\",\"t\":[\"定义时初始化(一般 +1 防止数组越界) vector<int> a(n + 1, 0); 定义一个二维动态数组 vector<vector<int>> g(n + 1, vector<int>(n + 1));\"]},\"31\":{\"h\":\"2. 字符串\",\"t\":[\"size() 和 length()：这两个函数会返回 string 类型对象中的字符个数，且它们的执行效果相同\",\"strlen() ：是C语言标准库中的函数\",\"// 返回 string 长度，单位字节 size_t length() const noexcept; // 返回 string 长度，单位字节。作用等同于 length() size_t size() const noexcept; // C 标准库函数，返回C风格字符串长度，单位字节 size_t strlen ( const char * str );\",\"（1）当 string 中含有空字符’\\\\0’，使用 strlen() 获取 string 的长度时会被截断，使用成员函数 length() 和 size() 可以返回 string 的真实长度。\",\"（2）cout 对 string 输出时，会过滤掉空字符，输出不会被截断。\",\"（3）在构造或者拼接 string 时，建议同时指定 string 的长度，比如：\",\"如果字符串长度很大（例如超过 1e9）的时候，要使用 s.length() 获取字符串长度，使用 s.size() 会爆掉\",\"max_size()：返回 string 类型对象最多包含的字符数。一旦程序使用长度超过 max_size() 的 string 操作，编译器会拋出 length_error 异常。\",\"resize() ： 修改字符串的长度\",\"str.resize(5); // 长度修改为5\",\"capacity() ：该函数返回在重新分配内存之前，string 类型对象所能包含的最大字符数。\",\"使用 printf() 输出 string 类型\",\"① printf 函数输出字符串是针对 char * 的，即 printf 只能输出c语言的内置数据类型，而 string 不是c语言的内置数据类型。\",\"② string 类型的对象不止包含字符串，还包含了许多用于操作的函数，所以 &str 并非字符串的首地址。\",\"③ 如需输出string对象中的字符串，可以使用 string 的成员函数c_str()，该函数返回字符串的首字符的地址。\",\"string s = \\\"hello\\\"; printf(\\\"%s\\\", s.c_str()); //输出：hello\"]},\"32\":{\"h\":\"3. 在一个数组中查找最长的相同连续子序列\",\"t\":[\"// 在由 0、1 组成的字符串中查找最长的‘1’ for (int i = 0; i < n; i++) { if (s[i] == '1') len++; if (s[i] == '0'){ res = max(res, len); len = 0; } }\"]},\"33\":{\"h\":\"4. 秦九韶算法\",\"t\":[\"int res = 0; for (int i = 1; i <= n; i++) res = res * b + a[i]; //b代表进制位数\",\"将一个 i 进制的数转化为十进制\",\"int get(string s, int i) { int res = 0; for (auto c : s) res = res * i + c - '0'; return res; }\"]},\"34\":{\"h\":\"5. 开栈空间代码\",\"t\":[\"备份，以防爆栈风险\",\"int main() { int size(512<<20); // 512M __asm__ ( \\\"movq %0, %%rsp\\\\n\\\"::\\\"r\\\"((char*)malloc(size)+size)); // YOUR CODE ... exit(0); return 0; }\"]},\"35\":{\"h\":\"6. 求 a 除以 b 的正余数\",\"t\":[\"int get_mod(int a, int mod) { return (a % mod + mod) % mod; }\"]},\"36\":{\"h\":\"7. 裴蜀定理\",\"t\":[\"若 a, b 是整数,且 gcd(a,b) = d ，那么对于任意的整数 x, y, ax+by 都一定是 d 的倍数。特别地，一定存在整数 x, y，使 ax + by = d 成立。\",\"它的一个重要推论是：\",\"a, b 互质的充分必要条件是存在整数 x, y 使 ax + by = 1 .\"]},\"37\":{\"h\":\"8. 交互题\",\"t\":[\"若要提问，请打印 “ ？+ 问题 ” ，然后从标准输入中输入响应\",\"如果你的程序问了一个无效的问题，或者问题用完了，交互器将立即终止，你的程序将得到一个判断错误的答案。\",\"要给出最终答案，请打印 “ ! + 答案 ”\",\"问完一个问题后，要输出行的末尾并刷新输出，否则将会得到超过限制限制的结果。\",\"C中的 fflush(stdout) 或者C++中的 cout.flush()； Java中的 System.out.flush()； Pascal中的 flush(output)； Python中的 stdout.flush().\"]},\"38\":{\"h\":\"9. mex函数\",\"t\":[\"auto mex = [](vector<int> w) { sort(w.begin(), w.end()); int mx = 0; for (int x : w) if (x == mx) ++mx; return mx; }; int z = mex(v);\"]},\"39\":{\"h\":\"10. string 与 int 之间的转化\",\"t\":[\"（1）int 转 string\",\"通过 to_string() 函数转换\",\"int num = 123; string s = to_string(num); cout << s << endl; // s = \\\"123\\\"\",\"通过 sprintf 转换\",\"int num = 123; char str[256]; sprintf(str, \\\"%d\\\", num); printf(\\\"%s\\\", str);\",\"这是一种C语言中的转换方式，sprintf 也可以换成更安全的 snprintf 函数\",\"（2）string 转 int\",\"通过 sscnaf 转换\",\"string str = \\\"123\\\"; int num = 0; sscanf(str.c_str(), \\\"%d\\\", &num); cout << num << endl; // num = 123\",\"sscanf 函数的第一个参数类型是 const char *，string类型的参数需要转换一下\",\"使用 atoi 转换\",\"string str = \\\"123\\\"; cout << atoi(str.c_str()); // 123\",\"atoi 函数的头文件是 stdlib.h\"]},\"40\":{\"h\":\"11. string::npos\",\"t\":[\"string::npos是一个静态成员常量，表示size_t的最大值（Maximum value for size_t）。该值表示“直到字符串结尾”**，**作为返回值它通常被用作表明没有匹配。\",\"string::npos是这样定义的：\",\"static const size_type npos = -1;\",\"常用于配合 find() 函数使用，该函数有唯一的返回类型，即 string::size_type , 即一个无符号整型类型，可能是整数，也可能是长整数。\",\"如果查找成功，返回按照查找规则找到的第一个字符或者子串的位置；\",\"如果查找失败，返回 string::npos , 即 -1\"]},\"41\":{\"h\":\"12. x >> i & 1\",\"t\":[\"x >> i & 1 用来判断 x 的二进制表示下的每一位是不是 1 .\"]},\"42\":{\"h\":\"13. assign()\",\"t\":[\"C++ 函数 std::vector::assign() 通过替换旧值为向量元素分配新值。 如有必要，它会修改矢量的大小。\",\"assign(n, val) 有两个参数，n — 容器大小，val — 重新赋给每个元素的值；\",\"assign(first, last) 区间，左闭右开\",\"功能：\",\"①将区间 [first,last) 的元素赋值到当前的 vector 容器中；\",\"②赋 n 个值为 x 的元素到 vector 容器中，会覆盖掉 vector 容器中以前的内容。\",\"1.第一种用法 vector<int> v1, v2; v2.assign(v1,begin(), v1.end()); 2.第二种用法 vector<int> a(n + 1); vector<vector<int>> g(n + 1); 一维：a.assign(n + 1, 0); 二维：g.assign(n + 1, vector<int>());\"]},\"43\":{\"h\":\"14. lambda表达式\",\"t\":[\"lambda 表达式定义了一个匿名函数，并且可以捕获一定范围内的变量。lambda 表达式的语法形式可简单归纳如下：\",\"[ capture ] ( params ) opt -> ret { body; };\",\"其中\",\"capture 是捕获列表，空表示不捕获任何变量；\",\"& 表示捕获外部作用域中所有变量，并作为引用在函数体中使用（按引用捕获）；\",\"= 表示捕获外部作用域中所有变量，并作为副本在函数体中使用（按值捕获）；\",\"=，&foo 表示按值捕获外部作用域中所有变量，并按引用捕获 foo 变量。\",\"bar 按值捕获 bar 变量，同时不捕获其他变量；\",\"this 表示捕获当前类中的 this 指针，让 lambda 表达式拥有和当前类成员函数同样的访问权限。如果已经使用了 & 或者 =，就默认添加此选项。捕获 this 的目的是可以在 lamda 中使用当前类的成员函数和成员变量。\",\"params 是参数表， opt 是函数选项， ret 是返回值类型， body是函数体\",\"写法示例：\",\"// 计算两个数的和 auto plus = [] (int v1, int v2) -> int { return v1 + v2; } int sum = plus(1, 2);\",\"递归 Lambda 表达式：\",\"//d vector<int> cnt(n); auto dfs = [&](auto self, int u, int p) -> void { for (auto v : adj[u]) { if (v != p) { self(self, v, u); cnt[u] += cnt[v]; } } if (cnt[u] == 0) { cnt[u] = 1; } }; dfs(dfs, 0, -1); //树的根节点从0开始，初始化为-1\"]},\"44\":{\"h\":\"15. max_element() 与 min_element()\",\"t\":[\"max_element() 与min_element() 分别用来求最大元素和最小元素的位置。\",\"接收参数：容器的首尾地址（迭代器）（可以是一个区间）\",\"返回：最值元素的地址（迭代器），需要减去序列头以转换为下标\",\"vector<int> v; int maxPos = max_element(v.begin(), v.end()) - v.begin(); //最大值下标 int minPos = min_element(v.begin(), v.end()) - v.begin();//最小值下标 2）普通数组 int a[] = {1,2,3,4}; int maxPos = max_element(a, a + 2) - a; //最大值下标 int minPos = min_element(a, a + 2) - a;//最小值下标\",\"max_element() 与 min_element() 分别用来求最大元素和最小元素的值。\",\"接收参数：容器的首尾地址（迭代器）（可以是一个区间）\",\"返回：最值元素的值\",\"int maxValue = *max_element(v.begin(), v.end()); //最大值 int minValue = *min_element(v.begin(), v.end()); //最小值 int maxValue = *max_element(a, a + 2); //最大值 int minValue = *min_element(a, a + 2); //最小值\"]},\"45\":{\"h\":\"16. tuple\",\"t\":[\"tuple 是泛化的 std::pair，我们通常是把它当作一个结构体使用，比如我们可以将多个参数整合为一个结构体传递到函数内部，实现一些简洁的操作。\",\"创建\",\"tuple<int,float,int,float> tu = make_tuple(1,2.f,3,4.f);//创建方式一 tuple<int,float,int,float> tu(1,2.f,3,4.f);//创建方式二 //相当于结构体： struct tu { int a; float b; int c; float d; }\",\"同 pair<first, second> 一样\"]},\"46\":{\"c\":[\"笔记\"]},\"47\":{\"c\":[\"经验\"]},\"48\":{\"h\":\"前缀和相关题型\"},\"49\":{\"h\":\"\",\"t\":[\"题目描述\",\"给定一个长度为 N 的数列，A1​,A2​,…AN​，如果其中一段连续的子序列 Ai​,Ai+1​,…Aj​ 之和是 K 的倍数，我们就称这个区间 [i,j] 是 K 倍区间。 你能求出数列中总共有多少个 K 倍区间吗？\",\"输入格式\",\"第一行包含两个整数 N 和 K。 以下 N 行每行包含一个整数 Ai​。\",\"输出格式\",\"输出一个整数，代表 K 倍区间的数目。\",\"数据范围\",\"1⩽N,K⩽1000001⩽Ai​⩽100000\",\"输入样例：\",\"5 2 1 2 3 4 5\",\"输出样例：\",\"6\",\"思路\",\"翻译：求区间 [l,r] 的和是 k 的倍数的个数。\",\"求区间和，我们可以通过 前缀和 来求出。 定义 sum[i] 表示第 1 个元素到第 i 个元素的和，那么 s[r] - s[l-1] 就是区间 [l,r] 的和。 若满足条件：区间 [l,r] 的和是k的倍数，即 (s[r] - s[l-1]) % k == 0 ，等价于 s[r] % k == s[l-1] % k 。\",\"说人话，这也就意味着：\",\"如果 s[r] mod k 和 s[l - 1] mod k 的余数相等，那么 s[r] - s[l - 1] 的差值必然是 k 的倍数。\",\"比如：13 % 7 == 20 % 7，则 (20 - 7) % 7 == 0\",\"那么题目就是要我们求 前缀和%k==0 的组合有多少种。\",\"用 cnt[i] 存储目前为止前缀和相同的个数，i 表示这个前缀和的值。 每次用 res 来递加 cnt[i] 相同的个数，前面有几个 前缀和的值 和 当前前缀和 相等，那么这个前缀和就能和前面每一个组成一个组合，所以要 res += cnt[s[i]] ，然后再加上现在的前缀和，即 cnt[s[i]]++ 。 初始化 cnt[0] = 1 ，因为当 s[i] == 0 时，这个前缀和本身就是 k 的倍数，不需要再跟别的前缀和组合，计算结果时就要加上这一个。\",\"代码\",\"#include <iostream> #include <cstring> #include <algorithm> #define ll long long using namespace std; const int N = 1e5 + 10; int n, k; ll s[N]; ll cnt[N]; int main() { cin >> n >> k; ll res = 0; cnt[0] = 1; for (int i = 1; i <= n; i++){ cin >> s[i]; s[i] = (s[i] + s[i - 1]) % k; // 每次前缀和都取模 res += cnt[s[i]]; // 和前面每一个都组合一下 cnt[s[i]]++; // 现在又多了一个 } cout << res << endl; return 0; }\"]},\"50\":{\"h\":\"\",\"t\":[\"题目描述\",\"给定一个长度为 n 的数组 a1​,a2​,…,an​ 。 现在，要将该数组从中间截断，得到三个非空子数组。 要求，三个子数组内各元素之和都相等。 请问，共有多少种不同的截断方法？\",\"输入格式\",\"第一行包含整数 n。 第二行包含 n 个整数 a1​,a2​,…,an​ 。\",\"输出格式\",\"输出一个整数，表示截断方法数量。\",\"数据范围\",\"前六个测试点满足 1⩽n⩽10。\",\"所有测试点满足 1⩽n⩽105,−10000⩽ai​⩽10000。\",\"输入样例1：\",\"4 1 2 3 3\",\"输出样例1：\",\"1\",\"输入样例2：\",\"5 1 2 3 4 5\",\"输出样例2：\",\"0\",\"输入样例3：\",\"2 0 0\",\"输出样例3：\",\"0\",\"思路\",\"先预处理前缀和，先判断如果 s[n] % 3 != 0，则不能被均分为三份，输出 0.\",\"然后从 i = 3 开始枚举前缀和数组，以 i 作为切割点，s[i - 2] 为第一段，s[n] - s[i - 1] 为第三段，如果 第一段 = 第三段 = 3s[n]​​，则第二段也一定相等，都符合条件。\",\"先判断第一段是否符合，记录个数，如果第三段不符合，则表示该切割点不行，继续后移，每次当第三段符合时，都加上第一段符合的个数即可。\",\"代码\",\"#include <iostream> #include <cstring> #include <algorithm> #define ll long long using namespace std; const int N = 1e5 + 10; int n; ll s[N]; int main() { cin >> n; for (int i = 1; i <= n; i++){ cin >> s[i]; s[i] += s[i - 1]; } if (s[n] % 3){ cout << 0 << endl; return 0; } ll cnt = 0, res = 0; for (int i = 3; i <= n; i++){ if (s[i - 2] == s[n] / 3) cnt++; if (s[n] - s[i - 1] == s[n] / 3) res += cnt; } cout << res << endl; return 0; }\"]},\"51\":{\"h\":\"\",\"t\":[\"题目描述\",\"地图上有 N 个目标，用整数 Xi​,Yi​ 表示目标在地图上的位置，每个目标都有一个价值 Wi​ 。\",\"注意：不同目标可能在同一位置。\",\"现在有一种新型的激光炸弹，可以摧毁一个包含 R×R 个位置的正方形内的所有目标。 激光炸弹的投放是通过卫星定位的，但其有一个缺点，就是其爆炸范围，即那个正方形的边必须和 x,y 轴平行。 求一颗炸弹最多能炸掉地图上总价值为多少的目标。\",\"输入格式\",\"第一行输入正整数 N 和 R，分别代表地图上的目标数目和正方形包含的横纵位置数量，数据用空格隔开。 接下来 N 行，每行输入一组数据，每组数据包括三个整数 Xi​,Yi​,Wi​ ，分别代表目标的 x 坐标，y 坐标和价值，数据用空格隔开。\",\"输出格式\",\"输出一个正整数，代表一颗炸弹最多能炸掉地图上目标的总价值数目。\",\"数据范围\",\"0⩽R⩽1090<N⩽100000⩽Xi​,Yi​⩽50000⩽Wi​⩽1000\",\"输入样例：\",\"2 1 0 0 1 1 1 1\",\"输出样例：\",\"1\",\"思路\",\"递推求出二维前缀和 。\",\"因为题目的内存限制，我们直接用二维数组读入数据，边读边加。 然后我们再求其前缀和，再从地图右下角枚举边长为 R​ 的正方形，通过下式\",\"s[i][j] - s[i - R][j] - s[i][j - R] + s[i - R][j - R]\",\"即可计算出该正方形内所有目标的价值之和。\",\"代码\",\"#include <iostream> #include <cstring> #include <algorithm> #define ll long long using namespace std; const int N = 5e3 + 10; // 不能开到 1e5 + 10，二维会爆栈 int n, r; int s[N][N]; int main() { cin >> n >> r; r = min(5001, r); // 因为r最大可取到10^9,但地图没有这么大 for (int i = 1; i <= n; i++){ int x, y, w; cin >> x >> y >> w; s[++x][++y] += w; // 因为数据范围是从0开始的 } //如果i从0开始那么i-1会导致数组越界 for (int i = 1; i <= 5001; i++){ for (int j = 1; j <= 5001; j++){ s[i][j] += s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1]; } } int res = 0; for (int i = r; i <= 5001; i++){ for (int j = r; j <= 5001; j++){ res = max(res, s[i][j] - s[i - r][j] - s[i][j - r] + s[i - r][j - r]); } } cout << res << endl; return 0; }\"]},\"52\":{\"c\":[\"笔记\"]},\"53\":{\"c\":[\"前缀和\"]},\"54\":{\"h\":\"并查集\"},\"55\":{\"h\":\"简介\",\"t\":[\"1.并查集是一种非常精巧实用的数据结构，它主要用于处理一些不相交集合的合并问题。一些常见的用途有求连通子图，求最小生成树的 Kruskal 算法和求最近公共祖先（LCA）等。\",\"2.基本操作主要有：\",\"（1）初始化 init\",\"（2）查询 find\",\"（3）合并 union\"]},\"56\":{\"h\":\"基本模板\"},\"57\":{\"h\":\"1.初始化\",\"t\":[\"int fa[N]; void init(int n){ for (int i = 1; i <= n; i++) fa[i] = i; // 一开始都是独立的，父节点设置为自己 }\",\"假如有编号为 1，2，3，...，n 的 n 个元素，我们用一个数组 fa[N] 来存储每个元素的父节点。一开始，我们先将它们的父节点设为自己。\"]},\"58\":{\"h\":\"2.查询（已路径压缩）\",\"t\":[\"查询一定要进行路径压缩，不然大概率会超时。\",\"int find(int x){ //递归出口，当达到了祖先位置，就返回祖先 if (fa[x] == x) return x; else { //不断往上查找祖先，并进行路径压缩，一直找到祖先的祖先 fa[x] = find(fa[x]); return fa[x]; //返回父亲节点 } }\",\"也可以简写成这样：\",\"int fond(int x){ return fa[x] == x ? x : find(fa[x]); }\"]},\"59\":{\"h\":\"3.合并\",\"t\":[\"最简单的合并就是像下面这样，粗暴的把 i 所在树的根节点接到 j 所在树的根节点下面，但是有可能出现 “头重脚轻” 的不平衡状况，后面例二中将会给出解决方法。\",\"void union(int i, int j){ int x = find(i); // 找到i的根节点 int y = find(j); // 找到j的根节点 fa[x] = y; // i的根节点指向j的根节点 }\"]},\"60\":{\"h\":\"典例分析\"},\"61\":{\"h\":\"例一：亲戚关系\",\"t\":[\"现在有若干家族图谱关系，给出了一些亲戚关系，如 A 和 B 是亲戚，B 和 C 是亲戚，那么 A和 B 也是亲戚。请写一个程序，对于我们的关于亲戚关系的提问，以最快的速度给出答案。\",\"【输入格式】\",\"第一部分是以 N，M 开始。N 为人数（1⩽N⩽20000），这些人的编号为 1，2，3，...，N。 下面有 M行（1⩽M⩽1000000），每行有两个数 a，b，表示 a 和 b 是亲戚。\",\"第二部分是以 Q 开始。以下 Q 行有 Q 行询问（1⩽Q⩽1000000），每行为 c, d, 表示询问 c 和 d 是否为亲戚。\",\"【输出格式】\",\"对于询问 c, d, 输出一行：若 c, d 为亲戚，则输出 “YES” ，否则输出 “NO”。\",\"【输入样例】\",\"10 7 2 4 5 7 1 3 8 9 1 2 5 6 2 3 3 3 4 7 10 8 9\",\"【输出样例】\",\"YES NO YES\",\"【示例代码】\",\"#include <iostream> #include <cstdio> #include <cstdlib> using namespace std; const int N = 20005; int fa[N]; // 父亲数组 // 初始化父亲为它自己 void init (int n){ for (int i = 1; i <= n; i++) fa[i] = i; } // 查找根节点 int find(int x){ if (fa[x] == x) return x; else { // 压缩路径，不断向上寻找最初的根节点 fa[x] = find(fa[x]); return fa[x]; } } // 合并，子节点依附在根节点上 void union(int i, int j){ int x= find(i); int y = find(j); fa[x] = y; } int main(){ int n, m, x, y, q; cin >> n >> m; init(n); for (int i = 1; i <= m; i++){ cin >> x >> y; union(x, y); // 构建依附关系 } scanf(\\\"%d\\\", &q); for (int i = 1; i <= q; i++){ cin >> x >> y; // 询问是否存在依附关系 if (find(x) == find(y)) put(\\\"YES\\\"); else put(\\\"NO\\\"); } return 0; }\"]},\"62\":{\"h\":\"例二：洛谷 P3367 【模板】并查集\",\"t\":[\"find 的主要功能就是从某个节点向上遍历到根节点，其时间复杂度就是树的高度，我们可能习惯性地认为树的高度就是 logN ， 但是不一定。logN 的高度只存在于平衡二叉树，对于一般的树可能出现极端不平衡的情况，使得 “树” 几乎退化成 “链表'，树的高度最坏情况下可能变成 N。\",\"问题的关键在于，该如何想办法避免树的不平衡呢？\",\"其实关键在于 union 过程。\",\"我们其实是希望，高度小一些的树接到大一些的树下面，这样就能避免头重脚轻，更平衡一些。\",\"解决方法是额外使用一个 size 数组，记录每棵树包含的节点数，不妨称为 高度。\",\"如下所示：\",\"void union(int i, int j){ int x = find(i), y = find(j); if (x == y) return; // 小树接在大树下面，较平衡 if (size[x] >= size[y]){ fa[y] = x; size[x] += size[y]; } else { fa[x] = y; size[y] += size[x]; } return; }\",\"下面看题中完整的写法（题是比较简单的一道模板题，用这种写法不过是略微优化了一下）:\",\"【题目描述】\",\"如题，现在有一个并查集，你需要完成合并和查询操作。\",\"【输入格式】\",\"第一行包含两个整数 N, M, 表示共有 N 个元素和 M 个操作。 接下来 M 行，每行包含三个整数 Zi​,Xi​,Yi​。 当 Zi​=1 时，将 Xi​ 与 Yi​ 所在的集合合并。 当 Zi​=2 时，输出 Xi​ 与 Yi​ 是否在同一集合内，是的输出 Y；否则输出 N。\",\"【输出格式】\",\"对于每一个 Zi​=2 的操作，都有一行输出，每行包含一个大写字母，为 Y 或者 N 。\",\"【输入样例】\",\"4 7 2 1 2 1 1 2 2 1 2 1 3 4 2 1 4 1 2 3 2 1 4\",\"【输出样例】\",\"N Y N Y\",\"【示例代码】\",\"#include <iostream> #include <cstdio> using namespace std; const int N = 2e5+5; // 父亲数组，高度数组 int fa[N], size[N]; // 初始化 int init(int n) { for (int i = 1; i <= n; i++){ fa[i] = i; // 初始根节点为它自己 size[i] = 1; // 初始高度为1 } } // 查找父节点 int find(int x) { if (fa[x] == x) return x; else fa[x] = find(fa[x]); // 扁平化处理，压缩路径 return fa[x]; } // 合并 void union(int i, int j) { int x = find(i), y = find(j); if (x == y) return; // 比较高度，高度小的接在高的下面，节省查找时间 if (size[x] >= size[y]){ fa[y] = x; size[x] += size[y]; } else { fa[x] = y; size[y] += size[x]; } } int main() { int n, m, z, x, y; cin >> n >> m; init(n);//初始化 for (int i = 1; i <= m; i++){ cin >> z >> x >> y; if (z == 1) union(x, y); if (z == 2){ if (find(x) == find(y)) cout << \\\"Y\\\" << endl; else cout << \\\"N\\\" << endl; } } return 0; }\"]},\"63\":{\"c\":[\"笔记\",\"数据结构\"]},\"64\":{\"c\":[\"并查集\"]},\"65\":{\"h\":\"搜索\"},\"66\":{\"h\":\"（BFS）\",\"t\":[\"题目描述\",\"给定一个 n×m 的二维整数数组，用来表示一个迷宫，数组中只包含 0 或 1 ，其中 0 表示可以走的路，1 表示不可通过的墙壁。 最初，有一个人位于左上角 (1,1) 处，已知该人每次可以向上、下、左、右任意一个方向移动一个位置。 请问，该人从左上角移动至右下角 (n,m) 处，至少需要移动多少次。 数据保证 (1,1) 处和 (n,m) 处的数字为 0，且一定至少存在一条通路。\",\"输入格式\",\"第一行包含两个整数 n 和 m。 接下来 n 行，每行包含 m 个整数（0 或 1），表示完整的二维数组迷宫。\",\"输出格式\",\"输出一个整数，表示从左上角移动至右下角的最少移动次数。\",\"数据范围\",\"1⩽n,m⩽100\",\"输入样例：\",\"5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0\",\"输出样例：\",\"8\",\"思路\",\"代码\",\"#include <iostream> #include <cstring> #include <algorithm> #include <queue> #define PII pair<int, int> using namespace std; const int N = 110; int n, m; int g[N][N]; int d[N][N]; int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1}; int bfs() { memset(d, -1, sizeof d); queue<PII> q; q.push({1, 1}); d[1][1] = 0; while (q.size()) { auto t = q.front(); q.pop(); for (int i = 0; i < 4; i++) { int x = t.first + dx[i], y = t.second + dy[i]; if (x >= 1 && x <= n && y >= 1 && y <= m && g[x][y] == 0 && d[x][y] == -1) { d[x][y] = d[t.first][t.second] + 1; q.push({x, y}); } } } return d[n][m]; } int main() { cin >> n >> m; for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) cin >> g[i][j]; cout << bfs() << endl; return 0; }\"]},\"67\":{\"h\":\"（BFS）\",\"t\":[\"题目描述\",\"在一个 3×3 的网格中，1∼8 这 8 个数字和一个 x 恰好不重不漏地分布在这 3×3 的网格中。\",\"例如：\",\"1 2 3 x 4 6 7 5 8\",\"在游戏过程中，可以把 x 与其上、下、左、右四个方向之一的数字交换（如果存在）。\",\"我们的目的是通过交换，使得网格变为如下排列（称为正确排列）：\",\"1 2 3 4 5 6 7 8 x\",\"例如，示例中图形就可以通过让 x 先后与右、下、右三个方向的数字交换成功得到正确排列。\",\"交换过程如下：\",\"1 2 3 1 2 3 1 2 3 1 2 3 x 4 6 4 x 6 4 5 6 4 5 6 7 5 8 7 5 8 7 x 8 7 8 x\",\"现在，给你一个初始网格，请你求出得到正确排列至少需要进行多少次交换。\",\"输入格式\",\"输入占一行，将 3×3 的初始网格描绘出来。\",\"例如，如果初始网格如下所示：\",\"1 2 3 x 4 6 7 5 8\",\"则输入为：1 2 3 x 4 6 7 5 8\",\"输出格式\",\"输出占一行，包含一个整数，表示最少交换次数。\",\"如果不存在解决方案，则输出 −1。\",\"输入样例：\",\"2 3 4 1 5 x 7 6 8\",\"输出样例\",\"19\",\"思路\",\"代码\",\"#include <iostream> #include <cstring> #include <algorithm> #include <queue> #include <unordered_map> using namespace std; int dx[4] = {1, 0, -1, 0}; int dy[4] = {0, 1, 0, -1}; int bfs(string a) { string b = \\\"12345678x\\\"; queue<string> q; // 存储变换后的字符串 unordered_map<string, int> d; // 表示变换到某个字符串时需要的交换次数 q.push(a); d[a] = 0; while (!q.empty()) { auto t = q.front(); q.pop(); int dist = d[t]; // 判断是否变成了目标串 if (t == b) return dist; // 状态转移，变换串 int k = t.find('x'); // 'x'在字符串中的位置 int x = k / 3, y = k % 3; // 'x'在网格中的位置 for (int i = 0; i < 4; i++) { int xx = x + dx[i], yy = y + dy[i]; if (xx >= 0 && xx < 3 && yy >= 0 && yy < 3) { swap(t[k], t[xx * 3 + yy]); // 交换位置 if (!d.count(t)) { d[t] = dist + 1; q.push(t); } swap(t[k], t[xx * 3 + yy]); // 还原，恢复现场 } } } // 找不到解决方案则输出-1 return -1; } int main() { string a; // 将a串变为b串 for (int i = 0; i < 9; i++) { char c; cin >> c; a += c; } cout << bfs(a) << endl; return 0; }\"]},\"68\":{\"h\":\"\",\"t\":[\"题目描述\",\"你有一张某海域 N×N 像素的照片，\\\".\\\" 表示海洋、\\\"#\\\" 表示陆地，如下所示：\",\"....... .##.... .##.... ....##. ..####. ...###. .......\",\"其中 “上下左右” 四个方向上连在一起的一片陆地组成一座岛屿，例如上图就有 2 座岛屿。 由于全球变暖导致了海面上升，科学家预测未来几十年，岛屿边缘一个像素的范围会被海水淹没。 具体来说如果一块陆地像素与海洋相邻(上下左右四个相邻像素中有海洋)，它就会被淹没。 例如上图中的海域未来会变成如下样子：\",\"....... ....... ....... ....... ....#.. ....... .......\",\"请你计算：依照科学家的预测，照片中有多少岛屿会被完全淹没。\",\"输入格式\",\"第一行包含一个整数 N。 以下 N 行 N 列，包含一个由字符 \\\"#\\\" 和 \\\".\\\" 构成的 N×N 字符矩阵，代表一张海域照片，\\\"#\\\" 表示陆地，\\\".\\\" 表示海洋。 照片保证第 1 行、第 1 列、第 N 行、第 N 列的像素都是海洋。\",\"输出格式\",\"一个整数表示答案。\",\"数据范围\",\"1⩽N⩽1000\",\"输入样例1：\",\"7 ....... .##.... .##.... ....##. ..####. ...###. .......\",\"输出样例1：\",\"1\",\"输入样例2：\",\"9 ......... .##.##... .#####... .##.##... ......... .##.#.... .#.###... .#..#.... .........\",\"输出样例2：\",\"1\",\"思路\",\"代码\"]},\"69\":{\"h\":\"（DFS）\",\"t\":[\"题目描述\",\"给定一个整数 n，将数字 1∼n 排成一排，将会有很多种排列方法。\",\"现在，请你按照字典序将所有的排列方法输出。\",\"输入格式\",\"共一行，包含一个整数 n。\",\"输出格式\",\"按字典序输出所有排列方案，每个方案占一行。\",\"数据范围\",\"1⩽n⩽7\",\"输入样例：\",\"3\",\"输出样例：\",\"1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1\",\"思路\",\"代码\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 10; int n; int path[N]; bool st[N]; void dfs(int u) { if (u == n){ for (int i = 0; i < n; i++){ printf(\\\"%d \\\", path[i]); } puts(\\\"\\\"); return; } for (int i = 1; i <= n; i++){ if (!st[i]) { path[u] = i; st[i] = true; dfs(u + 1); st[i] = false; } } } int main() { cin >> n; dfs(0); return 0; }\"]},\"70\":{\"h\":\"4.\"},\"71\":{\"h\":\"5.\"},\"72\":{\"c\":[\"笔记\"]},\"73\":{\"c\":[\"BFS\",\"DFS\"]},\"74\":{\"h\":\"递归相关题型\"},\"75\":{\"h\":\"\",\"t\":[\"题目描述\",\"从 1∼n 这 n 个整数中随机选取任意多个，输出所有可能的选择方案。\",\"输入格式\",\"输入一个整数 n。\",\"输出格式\",\"每行输出一种方案。 同一行内的数必须升序排列，相邻两个数用恰好 1 个空格隔开。 对于没有选任何数的方案，输出空行。 本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。\",\"数据范围\",\"1⩽n⩽15\",\"输入样例：\",\"3\",\"输出样例：\",\"3 2 2 3 1 1 3 1 2 1 2 3\",\"思路\",\"代码\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 20; int n; int st[N]; // 0表示还没考虑，1表示已选，2表示未选 void dfs(int u) { if (u == n) { for (int i = 0; i < n; i++) if (st[i] == 1) cout << i + 1 << ' '; cout << endl; return; } st[u] = 2; dfs(u + 1); st[u] = 0; st[u] = 1; dfs(u + 1); st[u] = 0; } int main() { cin >> n; dfs(0); return 0; }\"]},\"76\":{\"h\":\"\",\"t\":[\"题目描述\",\"把 1∼n 这 n 个整数排成一行后随机打乱顺序，输出所有可能的次序。\",\"输入格式\",\"一个整数 n。\",\"输出格式\",\"按照从小到大的顺序输出所有方案，每行 1 个。 首先，同一行相邻两个数用一个空格隔开。 其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面。\",\"数据范围\",\"1⩽n⩽9\",\"输入样例：\",\"3\",\"输出样例：\",\"1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1\",\"思路\",\"代码\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 10; int n; int st[N]; // 0表示还没放数，1~n表示放的哪些数 bool vis[N]; // 标记是否使用过 void dfs(int u) { if (u > n) { for (int i = 1; i <= n; i++) // 输出方案 cout << st[i] << ' '; puts(\\\"\\\"); return; } // 依次枚举每个分支，即当前位置能填哪些数 for (int i = 1; i <= n; i++){ if (!vis[i]){ st[u] = i; vis[i] = true; dfs(u + 1); // 恢复现场 st[u] = 0; vis[i] = false; } } } int main() { cin >> n; dfs(1); return 0; }\"]},\"77\":{\"h\":\"\",\"t\":[\"题目描述\",\"从 1∼n 这 n 个整数中随机选出 m 个，输出所有可能的选择方案。\",\"输入格式\",\"两个整数 n,m，在同一行用空格隔开。\",\"输出格式\",\"按照从小到大的顺序输出所有方案，每行 1 个。 首先，同一行内的数升序排列，相邻两个数用一个空格隔开。 其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面（例如 1 3 5 7 排在 1 3 6 8 前面）。\",\"数据范围\",\"n>0 , 0⩽m⩽n , n+(n−m)⩽25\",\"输入样例：\",\"5 3\",\"输出样例：\",\"1 2 3 1 2 4 1 2 5 1 3 4 1 3 5 1 4 5 2 3 4 2 3 5 2 4 5 3 4 5\",\"思路\",\"代码\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 30; int n, m; int way[N]; void dfs(int u, int start) // u表示第几位，i表示从哪个数开始 { if (u + n - start < m) return; // 剪枝，若剩下可选的数字不能填满剩下的空位则回退 if (u > m) { for (int i = 1; i <= m; i++) cout << way[i] << ' '; puts(\\\"\\\"); return; } for (int i = start; i <= n; i++) // 从start开始枚举剩下的可选数字 { way[u] = i; dfs(u + 1, i + 1); way[u] = 0; // 恢复现场 } } int main() { cin >> n >> m; dfs(1, 1); return 0; }\"]},\"78\":{\"h\":\"\",\"t\":[\"题目描述\",\"翰翰和达达饲养了 N 只小猫，这天，小猫们要去爬山。 经历了千辛万苦，小猫们终于爬上了山顶，但是疲倦的它们再也不想徒步走下山了（呜咕>_<）。 翰翰和达达只好花钱让它们坐索道下山。 索道上的缆车最大承重量为 W，而 N 只小猫的重量分别是 C1​、C2​……CN​。 当然，每辆缆车上的小猫的重量之和不能超过 W。 每租用一辆缆车，翰翰和达达就要付 1 美元，所以他们想知道，最少需要付多少美元才能把这 N 只小猫都运送下山？\",\"输入格式\",\"第 1 行：包含两个用空格隔开的整数，N 和 W。 第 2∼N+1 行：每行一个整数，其中第 i+1 行的整数表示第 i 只小猫的重量 Ci​。\",\"输出格式\",\"输出一个整数，表示最少需要多少美元，也就是最少需要多少辆缆车。\",\"数据范围\",\"1⩽N⩽18 , 1⩽Ci​⩽W⩽108\",\"输入样例：\",\"5 1996 1 2 1994 12 29\",\"输出样例：\",\"2\",\"思路\",\"代码\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 20; int n, m; int c[N]; // 每只猫的重量 int s[N]; // 每辆车所搭载的重量 int res = N; // 初始最坏情况下一只猫一辆车 void dfs(int u, int k) // u只猫，k辆车 { if (k >= res) return; if (u == n){ res = k; return; } for (int i = 0; i < k; i++) // 对每辆车进行枚举 { if (s[i] + c[u] <= m) // 若不超过最大载重 { s[i] += c[u]; dfs(u + 1, k); s[i] -= c[u]; } } // 否则需要再加一辆车 s[k] = c[u]; dfs(u + 1, k + 1); s[k] = 0; } int main() { cin >> n >> m; for (int i = 0; i < n; i++) cin >> c[i]; sort(c, c + n, greater()); dfs(0, 0); // 0只猫，0辆车 cout << res << endl; return 0; }\"]},\"79\":{\"h\":\"\",\"t\":[\"题目描述\",\"100 可以表示为带分数的形式：100=3+71469258​\",\"还可以表示为：100=82+1973546​\",\"注意特征：带分数中，数字 1∼9 分别出现且只出现一次（不包含 0）。\",\"类似这样的带分数，100 有 11 种表示法。\",\"输入格式\",\"一个正整数。\",\"输出格式\",\"输出输入数字用数码 1∼9 不重复不遗漏地组成带分数表示的全部种数。\",\"数据范围\",\"1⩽N<106\",\"输入样例1：\",\"100\",\"输出样例1：\",\"11\",\"输入样例2：\",\"105\",\"输出样例2：\",\"6\",\"思路\",\"题目意思是说，用 1∼9 的 9 个数，构造成一个整数和一个分数，每个数都要用到且只出现一次，分数不考虑约分的情况。可以理解为，构造成 n=a+cb​ 的形式，要求将 9 个数划分给 a,b,c 三个数，9​ 个数必须不重不漏。\",\"步骤：\",\"枚举全排列\",\"枚举位数，a,b,c 三个数的位数可能都不一样\",\"将 a,b,c 转化为数字，带入等式中看是否成立\",\"将 n=a+cb​ 转化为 cn=ca+b ，只需要枚举 a 和 c 即可，最后判断 b=cn−ca 是否成立。从 a 开递递归枚举，每次递归的同时也对 c 枚举，然后每次都 check(a,c) 是否满足条件，若满足则答案 +1 。\",\"代码\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 20; int n; bool st[N], backup[N]; int ans; bool check(int a, int c) { int b = c * n - c * a; if (!a || !b || !c) return false; memcpy(backup, st, sizeof st); // 备份 while (b) { int x = b % 10; // 取出b的每一位 b /= 10; if (!x || backup[x]) // 判断每一位上的数字是否用过 return false; // 用过则不合法 backup[x] = true; // 没用过则标记 } for (int i = 1; i <= 9; i++) if (!backup[i]) // 如果有一位没用上，则不合法 return false; return true; } void dfs_c(int u, int a, int c) { if (u >= n) return; // 判断当前a和c是否满足条件，若满足则答案+1 if (check(a, c)) ans++; // 继续枚举 for (int i = 1; i <= 9; i++){ if (!st[i]) { st[i] = true; dfs_c(u + 1, a, c * 10 + i); // a不变，更新c st[i] = false; } } } void dfs_a(int u, int a) { if (u >= n) return; // 对a提前判断一下，能更快一点点 if (a) dfs_c(u, a, 0); // 枚举c：用了几个数，a是几，当前加入的数字是几 for (int i = 1; i <= 9; i++){ if (!st[i]) { st[i] = true; dfs_a(u + 1, a * 10 + i); // 用的数字个数+1，加入i后更新当前a的值 st[i] = false; } } } int main() { cin >> n; dfs_a(0, 0); // 枚举a：用了几个数，当前的值 cout << ans << endl; return 0; }\"]},\"80\":{\"c\":[\"笔记\"]},\"81\":{\"c\":[\"递归\"]},\"82\":{\"h\":\"动态规划\"},\"83\":{\"h\":\"1. 背包问题\",\"t\":[\"背包问题常用枚举方法\",\"第一维枚举物品\",\"第二维枚举体积\",\"第三维枚举决策\"]},\"84\":{\"h\":\"1.1 01 背包\",\"t\":[\"有 n 件物品，背包容量为 m ，每件物品只能使用一次。\",\"求所选物品的总体积不超过背包容量的条件下，最大的总价值。\",\"#include <iostream> #include <cstdio> #include <algorithm> using namespace std; const int N = 1010; int n, m; int v[N], w[N]; int f[N]; int main() { cin >> n >> m; for (int i = 1; i <= n; i++) cin >> v[i] >> w[i]; /* 二维 for (int i = 1; i <= n; i++){ for (int j = 0; j <= m; j++){ f[i][j] = f[i - 1][j]; //左半边的子集 if (v[i] <= j) f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]); } } cout << f[n][m] << endl; */ //一维 //f[i] 表示总体积是i的情况下，最大价值是多少 for (int i = 1; i <= n; i++){ for (int j = m; j >= v[i]; j--){ f[j] = max(f[j], f[j - v[i]] + w[i]); } } cout << f[m] << endl; return 0; }\"]},\"85\":{\"h\":\"1.2 完全背包\",\"t\":[\"有 n 件物品，背包容量为 m ，每件物品只能使用无限次。\",\"#include <iostream> #include <cstdio> #include <algorithm> using namespace std; const int N = 1100; int n, m; int v[N], w[N]; int f[N]; //表示总体积是i的情况下，最大价值是多少 int main() { cin >> n >> m; for (int i = 1; i <= n; i++) cin >> v[i] >> w[i]; /* 二维 for (int i = 1; i <= n; i++) for (int j = 0; j <= m; j++) { f[i][j] = f[i - 1][j]; if (j >= v[i]) f[i][j] = max(f[i][j], f[i][j - v[i]] + w[i]); } cout << f[n][m] << endl; */ //一维 for (int i = 1; i <= n; i++) for (int j = v[i]; j <= m; j++) f[j] = max(f[j], f[j - v[i]] + w[i]); cout << f[m] << endl; return 0; }\"]},\"86\":{\"h\":\"1.3 多重背包\",\"t\":[\"有 n 件物品，背包容量为 m，每件物品有有限个。\",\"数据范围 ≤100 的写法：\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 110; int n, m; int v[N], w[N], s[N]; int f[N][N]; int main() { cin >> n >> m; for (int i = 1; i <= n; i++) cin >> v[i] >> w[i] >> s[i]; for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) for (int k = 0; k <= s[i] && k * v[i] <= j; k++) f[i][j] = max(f[i][j], f[i - 1][j - v[i] * k] + w[i] * k); cout << f[n][m] << endl; /* 一维优化写法 for (int i = 1; i <= n; i++){ for (int j = m; j >= v[i]; j--){ for (int k = 0; k <= s[i] && k * v[i] <= j; k++) f[j] = max(f[j], f[j - k * v[i]] + w[i] * k); } } cout << f[m] << endl; */ return 0; }\",\"数据范围较大时，需要用多重背包的二进制优化方法：\",\"第一种写法：\",\"#include <iostream> #include <cstdio> #include <algorithm> using namespace std; const int N = 12010, M = 2010; int n, m; int v[N], w[N]; int f[M]; int main() { cin >> n >> m; int cnt = 0; for (int i = 1; i <= n; i++){ int a, b, s; cin >> a >> b >> s; int k = 1; while (k < s){ cnt++; v[cnt] += a * k; w[cnt] += b * k; s -= k; k *= 2; } if (s){ cnt++; v[cnt] += a * s; w[cnt] += b * s; } } n = cnt; for (int i = 1; i <= n; i++){ for (int j = m; j >= v[i]; j--){ f[j] = max(f[j], f[j - v[i]] + w[i]); } } cout << f[m] << endl; return 0; }\",\"第二种写法：\",\"#include <iostream> #include <cstring> #include <algorithm> #include <vector> using namespace std; const int N = 2010; int n, m; int f[N]; struct Good { int v, w; }; int main() { vector<Good> goods; cin >> n >> m; for (int i = 0; i < n; i++){ int v, w, s; cin >> v >> w >> s; for (int k = 1; k <= s; k *= 2){ s -= k; goods.push_back({v * k, w * k}); } if (s > 0) goods.push_back({v * s, w * s}); } for (auto good : goods){ for (int j = m; j >= good.v; j--){ f[j] = max(f[j], f[j - good.v] + good.w); } } cout << f[m] << endl; return 0; }\"]},\"87\":{\"h\":\"1.4 分组背包\",\"t\":[\"有 n 组物品和一个容量是 m 的背包。\",\"每组物品有若干个，同一组内的物品最多只能选一个。\",\"求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。\",\"（一）第一种写法：\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 110; int n, m; int v[N][N], w[N][N], s[N]; int f[N]; int main() { cin >> n >> m; for (int i = 1; i <= n; i++){ cin >> s[i]; for (int j = 0; j < s[i]; j++){ cin >> v[i][j] >> w[i][j]; } } for (int i = 1; i <= n; i++){ for (int j = m; j >= 0; j--){ for (int k = 0; k < s[i]; k++){ if (v[i][k] <= j) f[j] = max(f[j], f[j - v[i][k]] + w[i][k]); } } } cout << f[m] << endl; return 0; }\",\"（二）第二种写法：\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 110; int n, m; int f[N], v[N], w[N]; int main() { cin >> n >> m; for (int i = 0; i < n; i++) { int s; cin >> s; for (int j = 0; j < s; j++) cin >> v[j] >> w[j]; for (int j = m; j >= 0; j--) for (int k = 0; k < s; k++) if (j >= v[k]) f[j] = max(f[j], f[j - v[k]] + w[k]); } cout << f[m] << endl; return 0; }\"]},\"88\":{\"h\":\"2. 线性DP\"},\"89\":{\"h\":\"2.1 数字三角形\",\"t\":[\"给定一个如下图所示的数字三角形，从顶部出发，在每一结点可以选择移动至其左下方的结点或移动至其右下方的结点，一直走到底层，要求找出一条路径，使路径上的数字的和最大。\",\" 7 3 8 8 1 0 2 7 4 4 4 5 2 6 5\",\"线性DP写法：\",\"#include <iostream> #include <algorithm> using namespace std; const int N = 510, INF = 1e9; int n; int a[N][N]; int f[N][N]; int main() { cin >> n; for (int i = 1; i <= n; i++) for (int j = 1; j <= i; j++) cin >> a[i][j]; for (int i = 0; i <= n; i++) for (int j = 0; j <= i + 1; j++) f[i][j] = -INF; //从上往下遍历 f[1][1] = a[1][1]; for (int i = 2; i <= n; i++) for (int j = 1; j <= i; j++) f[i][j] = max(f[i - 1][j - 1], f[i - 1][j]) + a[i][j]; // 状态转移方程 int ans = -INF; for (int i = 1; i <= n; i++) ans = max(ans, f[n][i]); cout << ans << endl; /*从下往上遍历 for (int i = n; i >= 1; i--) for (int j = n; j >= 1; j--) f[i][j] = max(f[i + 1][j], f[i + 1][j + 1]) + a[i][j]; cout << f[1][1] << endl; */ return 0; }\"]},\"90\":{\"h\":\"2.2 最长上升子序列\",\"t\":[\"求一个序列中严格递增的子序列的最大长度。\",\"（一）朴素DP写法：\",\"状态转移方程：if (a[j] < a[i]) f[i] = max(f[i], f[j] + 1);\",\"#include <iostream> #include <algorithm> using namespace std; const int N = 1010; int n; int a[N]; int f[N]; int main() { cin >> n; for (int i = 1; i <= n; i++) cin >> a[i]; for (int i = 1; i <= n; i++) { f[i] = 1; // 只有a[1]一个数 for (int j = 1; j <= i; j++) if (a[j] < a[i]) f[i] = max(f[i], f[j] + 1); } int ans = 0; for (int i = 1; i <= n; i++) ans = max(ans, f[i]); cout << ans << endl; return 0; }\",\"（二）二分写法：\",\"#include <iostream> #include <cstdio> #include <algorithm> using namespace std; const int N = 100010; int n; int q[N]; int a[N]; int main() { cin >> n; for (int i = 0; i < n; i++) cin >> a[i]; int len = 0; q[0] = -2e9; for (int i = 0; i < n; i++) { int l = 0, r = len; while (l < r) { int mid = l + r + 1 >> 1; if (q[mid] < a[i]) l = mid; else r = mid - 1; } len = max(len, r + 1); q[r + 1] = a[i]; } cout << len << endl; return 0; }\",\"（三）单调队列写法：\",\"#include <iostream> #include <cstdio> #include <vector> #include <algorithm> using namespace std; const int N = 100010; int n; int main() { cin >> n; vector<int> arr(n); for (int i = 0; i < n; i++) cin >> arr[i]; vector<int> stk; //模拟堆栈 stk.push_back(arr[0]); for (int i = 1; i < n; i++) //单调队列思维 { if (arr[i] > stk.back()) //如果该元素大于栈顶元素，则将该元素入栈 stk.push_back(arr[i]); else //否则，替换掉第一个大于或等于这个数字的那个数 *lower_bound(stk.begin(), stk.end(), arr[i]) = arr[i]; } cout << stk.size() << endl; return 0; }\"]},\"91\":{\"h\":\"2.3 最长公共子序列（不连续）\",\"t\":[\"给定两个长度分别为 n 和 m 的字符串 A 和 B，\",\"求既是 A 的子序列又是 B 的子序列的字符串长度最长是多少。\",\"状态转移方程：\",\"f[i][j] = max(f[i-1][j], f[i][j-1]); if(a[i] == b[j]) f[i][j] = max(f[i][j], f[i-1][j-1] + 1);\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 1010; int n, m; char a[N], b[N]; int f[N][N]; int main() { cin >> n >> m >> a + 1 >> b + 1; for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) { f[i][j] = max(f[i - 1][j], f[i][j - 1]); if (a[i] == b[j]) f[i][j] = max(f[i][j], f[i - 1][j - 1] + 1); } cout << f[n][m] << endl; return 0; }\"]},\"92\":{\"h\":\"2.4 最长公共上升子序列\",\"t\":[\"熊大妈的奶牛在小沐沐的熏陶下开始研究信息题目。\",\"小沐沐先让奶牛研究了最长上升子序列，再让他们研究了最长公共子序列，现在又让他们研究最长公共上升子序列了。\",\"小沐沐说，对于两个数列 A 和 B，如果它们都包含一段位置不一定连续的数，且数值是严格递增的，那么称这一段数是两个数列的公共上升子序列，而所有的公共上升子序列中最长的就是最长公共上升子序列了。\",\"奶牛半懂不懂，小沐沐要你来告诉奶牛什么是最长公共上升子序列。\",\"不过，只要告诉奶牛它的长度就可以了。\",\"数列 A 和 B 的长度均不超过 3000。\",\"输入格式\",\"第一行包含一个整数 N，表示数列 A,B 的长度。 第二行包含 N 个整数，表示数列 A。 第三行包含 N 个整数，表示数列 B。\",\"输出格式\",\"输出一个整数，表示最长公共上升子序列的长度。\",\"数据范围\",\"1≤N≤3000 , 序列中的数字均不超过 231−1 。\",\"输入样例：\",\"4 2 2 1 3 2 1 2 3\",\"输出样例：\",\"2\",\"代码：\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 3010; int n; int a[N], b[N]; int f[N][N]; int main() { cin >> n; for (int i = 1; i <= n; i++) cin >> a[i]; for (int i = 1; i <= n; i++) cin >> b[i]; for (int i = 1; i <= n; i++){ int mx = 1; for (int j = 1; j <= n; j++){ f[i][j] = f[i - 1][j]; if (a[i] == b[j]) f[i][j] = max(f[i][j], mx); if (a[i] > b[j]) mx = max(mx, f[i - 1][j] + 1); } } int res = 0; for (int i = 1; i <= n; i++) res = max(res, f[n][i]); cout << res << endl; return 0; }\"]},\"93\":{\"h\":\"2.5 编辑距离\",\"t\":[\"给定 n 个长度不超过 10 的字符串以及 m 次询问，每次询问给出一个字符串和一个操作次数上限。\",\"对于每次询问，请你求出给定的 n 个字符串中有多少个字符串可以在上限操作次数内经过操作变成询问给出的字符串。\",\"每个对字符串进行的单个字符的插入、删除或替换算作一次操作。\",\"输入格式\",\"第一行包含两个整数 n 和 m。 接下来 n 行，每行包含一个字符串，表示给定的字符串。 再接下来 m 行，每行包含一个字符串和一个整数，表示一次询问。 字符串中只包含小写字母，且长度均不超过 10。\",\"输出格式\",\"输出共 m​ 行，每行输出一个整数作为结果，表示一次询问中满足条件的字符串个数。\",\"模板代码：\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 15, M = 1010; int n, m; int f[N][N]; char str[M][N]; int edit_distance(char a[], char b[]) { int la = strlen(a + 1), lb = strlen(b + 1); for (int i = 0; i <= la; i++) f[i][0] = i; for (int j = 0; j <= lb; j++) f[0][j] = j; for (int i = 1; i <= la; i++) for (int j = 1; j <= lb; j++) { f[i][j] = min(f[i - 1][j] + 1, f[i][j - 1] + 1); if (a[i] == b[j]) f[i][j] = min(f[i][j], f[i - 1][j - 1]); else f[i][j] = min(f[i][j], f[i - 1][j - 1] + 1); } return f[la][lb]; } int main() { cin >> n >> m; for (int i = 0; i < n; i++) cin >> str[i] + 1; //下标从1开始存 while (m--){ char s[N]; int limit; cin >> s + 1 >> limit; int res = 0; for (int i = 0; i < n; i++) if (edit_distance(str[i], s) <= limit) res++; cout << res << endl; } return 0; }\"]},\"94\":{\"h\":\"2.6 最短编辑距离\",\"t\":[\"给定两个字符串 A 和 B，现在要将 A 经过若干操作变为 B，可进行的操作有：\",\"删除 – 将字符串 A 中的某个字符删除。\",\"插入 – 在字符串 A 的某个位置插入某个字符。\",\"替换 – 将字符串 A 中的某个字符替换为另一个字符。\",\"现在请你求出，将 A 变为 B​ 至少需要进行多少次操作。\",\"状态转移方程：\",\"f[i][j] = min(f[i-1][j] + 1, f[i][j-1] + 1); if (a[i] == b[j]) f[i][j] = min(f[i][j], f[i-1][j-1]); else f[i][j] = min(f[i][j], f[i-1][j-1] + 1); //状态转移方程\",\"代码：\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 1010; int n, m; char a[N], b[N]; int f[N][N]; //所有将a[i]变成b[j]的操作方式 int main() { cin >> n >> a + 1; cin >> m >> b + 1; for (int i = 0; i <= n; i++) f[i][0] = i; for (int j = 0; j <= m; j++) f[0][j] = j; for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) { f[i][j] = min(f[i - 1][j] + 1, f[i][j - 1] + 1); if (a[i] == b[j]) f[i][j] = min(f[i][j], f[i - 1][j - 1]); else f[i][j] = min(f[i][j], f[i - 1][j - 1] + 1); } cout << f[n][m] << endl; return 0; }\"]},\"95\":{\"h\":\"3. 区间DP\",\"t\":[\"区间 DP 常用模版\",\"所有的区间 dp 问题枚举时，\",\"第一维通常是枚举区间长度，并且一般 len = 1 时用来初始化，枚举从 len = 2 开始；\",\"第二维枚举起点 i （右端点 j 自动获得，j = i + len - 1）\",\"模板代码如下：\",\"for (int len = 1; len <= n; len++) { // 区间长度 for (int i = 1; i + len - 1 <= n; i++) { // 枚举起点 int j = i + len - 1; // 区间终点 if (len == 1) { dp[i][j] = 初始值 continue; } for (int k = i; k < j; k++) { // 枚举分割点，构造状态转移方程 dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + w[i][j]); } } }\",\"代码：\",\"#include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 310; int n; int a[N], s[N]; int f[N][N]; int main() { cin >> n; for (int i = 1; i <= n; i++){ cin >> a[i]; s[i] = s[i - 1] + a[i]; } //区间DP枚举套路：长度+左端点 for (int len = 2; len <= n; len++) //先枚举长度 { for (int i = 1; i + len - 1 <= n; i++) //再枚举左端点，且保证右端点不会超范围 { int j = i + len - 1; //自动得到右端点 f[i][j] = 1e9; //初始化大于1的区间为最大，长度为1的区间为0 for (int k = i; k <= j - 1; k++) f[i][j] = min(f[i][j], f[i][k] + f[k + 1][j] + s[j] - s[i - 1]); } } //得到总区间的最小代价 cout << f[1][n] << endl; return 0; }\"]},\"96\":{\"h\":\"4. 计数类DP\",\"t\":[\"一个正整数 n 可以表示成若干个正整数之和，我们将这样的一种表示称为正整数 n 的一种划分。 现在给定一个正整数 n，请你求出 n共有多少种不同的划分方法。\",\"表示前 i 个整数（1,2…,i）恰好拼成 j 的方案数 求方案数：把集合选 0 个 i，1 个 i，2 个 i，…全部加起来\",\"f[i][j] = f[i - 1][j] + f[i - 1][j - i] + f[i - 1][j - 2 * i] + ...;\",\"f[i][j - i] = f[i - 1][j - i] + f[i - 1][j - 2 * i] + ...;\",\"因此 f[i][j]=f[i−1][j]+f[i][j−i] （这一步类似完全背包的推导）\",\"朴素做法：\",\"// f[i][j] = f[i - 1][j] + f[i][j - i] #include <iostream> using namespace std; const int N = 1e3 + 7, mod = 1e9 + 7; int f[N][N]; int main() { int n; cin >> n; for (int i = 0; i <= n; i ++) { f[i][0] = 1; // 容量为0时，前 i 个物品全不选也是一种方案 } for (int i = 1; i <= n; i ++) { for (int j = 0; j <= n; j ++) { f[i][j] = f[i - 1][j] % mod; // 特殊 f[0][0] = 1 if (j >= i) f[i][j] = (f[i - 1][j] + f[i][j - i]) % mod; } } cout << f[n][n] << endl; }\",\"一维优化：\",\" f[0] = 1; // 容量为0时，前 i 个物品全不选也是一种方案 for (int i = 1; i <= n; i ++) { for (int j = i; j <= n; j ++) { f[j] = (f[j] + f[j - i]) % mod; } } cout << f[n] << endl;\"]},\"97\":{\"h\":\"5. 数位统计类DP\",\"t\":[\"给定两个整数 a 和 b，求 a 和 b 之间的所有数字中 0 ~ 9 的出现次数。\",\"#include <bits/stdc++.h> using namespace std; int base[10]; int f[10][10]; int g[10][10]; void init() { base[0] = 1; for(int i = 1 ; i <= 9 ; i++) base[i] = base[i-1]*10; //从00……0 - 99……9 的各位数字有多少个，其中i为数字个数（包含前导零） for(int i = 0 ; i <= 9 ; i++) f[1][i] = 1; for(int i = 2 ; i <= 9 ; i++) for(int j = 0 ; j <= 9 ; j++) f[i][j] = f[i-1][j]*10 + base[i-1]; //从1 - 99……9 的各位数字有多少个，其中i为数字个数（不包含前导零） for(int i = 1 ; i <= 9 ; i++) g[1][i] = 1;//循环从1开始 for(int i = 2 ; i <= 9 ; i++) { g[i][0] = g[i-1][0] + f[i-1][0]*9; for(int j = 1 ; j <= 9 ; j++) g[i][j] = g[i-1][j] + f[i-1][j]*9 + base[i-1]; } } vector<int> dp(int n) { vector<int> ans(10,0); //记录答案 if(n<=0) return ans; //边界条件 vector<int> nums; while(n) nums.push_back(n%10), n/=10; vector<int> last(10,0); //记录前缀中各个数字个数 //统计1 - 99……9(n-1个9)里面各个数字有多少个 for(int i = 0 ; i <= 9 ; i++) ans[i] = g[nums.size()-1][i]; //统计大于10……0(n-1个0) 的树里各个数字有多少个 for(int i = nums.size()-1 ; i >=0 ; i--) { //循环变量i可以表示剩下的数字有多少个 int x = nums[i]; for(int j = i==nums.size()-1 ; j < x ; j++) { //第一次循环不能有0 //前缀部分 for(int k = 0 ; k <= 9 ; k++) ans[k] += last[k] * base[i]; //当前位置部分 ans[j] += base[i]; //后缀部分 for(int k = 0 ; k <= 9 ; k++) ans[k] += f[i][k]; } //更新前缀计数器 last[x] ++; //统计叶子节点（这个数本身） if(!i) for(int k = 0 ; k <= 9 ; k++) ans[k] += last[k]; } return ans; } vector<int> ask(int a, int b) { auto x = dp(b); auto y = dp(a-1); vector<int> ans; for(int i = 0 ; i <= 9 ; i++) ans.push_back(x[i]-y[i]); return ans; } void print(vector<int> ans) { for(auto x:ans) printf(\\\"%d \\\",x); puts(\\\"\\\"); } bool check(int x) { auto t = ask(x,x); vector<int> cnt(10,0); while(x) cnt[x%10]++,x/=10; for(int i = 0 ; i <= 9 ; i++) if(cnt[i] != t[i]) return false; return true; } int main() { init(); int a,b; while(cin >> a >> b, a||b) { if(a>b) swap(a,b); auto t = ask(a,b); print(t); } return 0; }\"]},\"98\":{\"h\":\"6. 状态压缩类DP\"},\"99\":{\"h\":\"6.1 蒙德里安的梦想\",\"t\":[\"n×m 的棋盘可以摆放不同的 1×2 小方格的种类数。\",\"状态表示：f[i][j] 表示当前摆到第 i 列的状态是 j 的所有方案。\",\"(其中 j 是一个二进制数，用来表示哪一行的小方块是横着放的，其位数和棋盘的行数一致。)\",\"去除无效状态的优化写法：\",\"#include <cstring> #include <iostream> #include <algorithm> #include <vector> using namespace std; typedef long long LL; const int N = 12, M = 1 << N; int n, m; LL f[N][M]; vector<int> state[M]; bool st[M]; int main() { while (cin >> n >> m, n || m) { for (int i = 0; i < 1 << n; i ++ ) { int cnt = 0; bool is_valid = true; for (int j = 0; j < n; j ++ ) if (i >> j & 1) { if (cnt & 1) { is_valid = false; break; } cnt = 0; } else cnt++; if (cnt & 1) is_valid = false; st[i] = is_valid; } for (int i = 0; i < 1 << n; i ++ ) { state[i].clear(); for (int j = 0; j < 1 << n; j ++ ) if ((i & j) == 0 && st[i | j]) state[i].push_back(j); } memset(f, 0, sizeof f); f[0][0] = 1; for (int i = 1; i <= m; i ++ ) for (int j = 0; j < 1 << n; j ++ ) for (auto k : state[j]) f[i][j] += f[i - 1][k]; cout << f[m][0] << endl; } return 0; }\"]},\"100\":{\"h\":\"6.2 最短Hamilton路径\",\"t\":[\"给定一张 n 个点的带权无向图，点从 0 ~ n−1 标号，求起点 0 到终点 n−1 的最短Hamilton路径。\",\"Hamilton 路径的定义是从 0 到 n−1 不重不漏地经过每个点恰好一次。\",\"f[i][j] 表示从 0 走到 j ，走过的所有点的情况是 i 的所有路径。\",\"状态转移方程：f[i][j] = min(f[i][j], f[i-(1<<j)][k] + w[k][j]);\",\"#include<iostream> #include<cstring> #include<algorithm> using namespace std; const int N = 20, M = 1 << N; int n; int f[M][N], w[N][N];//w表示的是无权图 int main() { cin>>n; for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) cin >> w[i][j]; memset(f, 0x3f, sizeof(f)); // 因为要求最小值，所以初始化为无穷大 f[1][0] = 0; // 因为零是起点,所以f[1][0]=0; for (int i = 0; i < 1 << n; i++) // i表示所有的情况 for (int j = 0; j < n; j++) // j表示走到哪一个点 if (i >> j & 1) for (int k = 0; k < n; k++) // k表示走到j这个点之前,以k为终点的最短距离 if (i >> k & 1) // 更新最短距离 f[i][j] = min(f[i][j], f[i - (1<<j)][k] + w[k][j]); // 表示所有点都走过了,且终点是n-1的最短距离 cout << f[(1<<n) - 1][n - 1] << endl; return 0; }\"]},\"101\":{\"h\":\"7. 树形DP\"},\"102\":{\"h\":\"7.1 没有上司的舞会\",\"t\":[\"选了某个节点就不能选父节点和子节点。求最大权值和。\",\"每个人只有两种状态，则设 dp[0][i] 为第 i 个人不来，他的下属所能获得的最大快乐值；\",\"dp[1][i] 为第 i 个人来，他的下属所能获得的最大快乐值。\",\"状态转移方程：\",\"dp[0][i]=∑u=sons​max(dp[1][u],dp[0][u]) 当前节点不选，那么子节点随意\",\"dp[1][i]=∑u=sons​dp[0][u]+happy[i] 当前节点选，子节点不能选\",\"#include <bit/stdc++.h> using namespace std; int n; int dp[2][6010]; int f[2][6010]; // f[0]为父亲，f[1]为高兴值 int ind[6010]; // 入度 int vis[6010]; // 访问标记 int root; // 树的根 void dfs(int u) // 递归从后往前更新 { if (!u) return; vis[u] = 1; // 已访问 root = u; // 最后一个访问到的一定是根，所以一直更新根就行了 dp[0][f[0][u]] += max(dp[1][u] + f[1][u], dp[0][u]); // 给父亲更新 dp[1][f[0][u]] += dp[0][u]; ind[f[0][u]]--; // 更新完一个子节点 if(!ind[f[0][u]]) dfs(f[0][u]); // 在所有子节点更新后再更新（入度为0） } int main() { cin >> n; for (int i = 1; i <= n; i++) scanf(\\\"%d\\\", &f[1][i]); int a,b; for (int i = 1; i < n; i++){ scanf(\\\"%d%d\\\", &a, &b); f[0][a] = b; // 保存节点信息 ind[b]++; } for (int i = 1; i <= n; i++) if(!vis[i] && !ind[i]) // 没有被访问过，没有入度，说明是叶子节点 dfs(i); // 取根节点两种方案的最大值 printf(\\\"%d\\\\n\\\", max(dp[0][root], dp[1][root] + f[1][root])); return 0; }\"]},\"103\":{\"c\":[\"模板\",\"动态规划\"]},\"104\":{\"h\":\"基础算法\"},\"105\":{\"h\":\"1. 快速排序\",\"t\":[\"快排属于分治算法，分治算法都有三步：\",\"分成子问题\",\"递归处理子问题\",\"子问题合并\",\"主要步骤：\",\"确定分界点，可以任选 a[l]，a[r]，a[(l + r) / 2] 其中一个作为分界点。\",\"设置两个头尾指针 i, j，初始化 i = l - 1, j = r + 1 (避免发生边界问题导致死循环) ，向中间移动。每次循环都先将 i 右移和 j 左移，然后判断，如果 a[i] > a[j] 且 i < j，就交换 a[i] 和 a[j].\",\"最后根据分界点分别递归左右两部分。\",\"快排的一般写法如下：\",\"void quick_sort(int q[], int l, int r) { //递归的终止情况 if(l >= r) return; //第一步：分成子问题 int i = l - 1, j = r + 1, x = q[(l + r) / 2]; while(i < j) { do i++; while(q[i] < x); do j--; while(q[j] > x); if(i < j) swap(q[i], q[j]); } //第二步：递归处理子问题 quick_sort(q, l, j); quick_sort(q, j + 1, r); //第三步：子问题合并.快排这一步不需要操作，但归并排序的核心在这一步骤 }\"]},\"106\":{\"h\":\"2. 归并排序\",\"t\":[\"运用双指针的思想，先递归再合并。\",\"主要步骤：\",\"确定分界点。与快排不同，归并每次都将中点作为分界点，将整个序列均分为两部分。mid = (l + r) / 2\",\"递归排序。对两个子序列分别设置个指针 i, j，从头开始遍历，每次比较 a[i] 和 a[j]，将小的放入一个临时序列 temp[] 中。如果有一部分遍历完了，而另一部分还有剩余，则将剩余那一部分直接接在临时序列的后面，因为剩下的这部分一定是大于前面的。\",\"归并，合二为一。将临时序列放入原序列中。\",\"归并的一般写法如下：\",\"void merge_sort(int a[], int l, int r) { if (l >= r) return; //确定中间分界点 int mid = (l + r) >> 1; //两边递归 merge_sort(a, l, mid); merge_sort(a, mid + 1, r); int k = 0; int i = l, j = mid + 1; //比较左右两半边 while (i <= mid && j <= r) if (a[i] < a[j]) temp[k++] = a[i++]; else temp[k++] = a[j++]; while (i <= mid)//左半边剩下的 temp[k++] = a[i++]; while (j <= r)//右半边剩下的 temp[k++] = a[j++]; //合并区间 for (i = l, j = 0; i <= r; i++, j++) a[i] = temp[j]; }\"]},\"107\":{\"h\":\"3. 二分算法\"},\"108\":{\"h\":\"3.1 二分查找算法模板\",\"t\":[\"二分模板一共有两个，分别适用于不同情况。\",\"算法思路：假设目标值在闭区间 [l, r]中， 每次将区间长度缩小一半，当 l = r时，我们就找到了目标值。\"]},\"109\":{\"h\":\"版本1\",\"t\":[\"当我们将区间 [l, r]划分成 [l, mid] 和 [mid + 1, r] 时，其更新操作是 r = mid 或者 l = mid + 1; ，计算 mid 时不需要加 1。\",\"C++代码模板：\",\"int bsearch_1(int l, int r) { while (l < r) { int mid = l + r >> 1; if (a[mid] >= x) r = mid; //答案在左边界，要向下取整 else l = mid + 1; //找左端点 } return l; }\"]},\"110\":{\"h\":\"版本2\",\"t\":[\"当我们将区间 [l, r] 划分成 [l, mid - 1] 和 [mid, r] 时，其更新操作是 r = mid - 1 或者 l = mid; ，此时为了防止死循环，计算 mid 时需要加 1。\",\"C++代码模板：\",\"int bsearch_2(int l, int r) { while (l < r) { int mid = l + r + 1 >> 1; if (a[mid] <= k) l = mid; //答案在右边界，要上取整 else r = mid - 1; //找右端点 } return l; }\",\"简单来说就是：\",\"可以将模板 1 中的 check[mid] 换成a[mid] >= x ，用来查找大于等于 x 的第一个元素；\",\"将模板 2 中的 check[mid] 换成 a[mid] <= x ，用来查找小于等于 x 的最后一个元素。\"]},\"111\":{\"h\":\"3.2 二分答案模板\",\"t\":[\"一般来说，二分答案可以用来处理 “最大的最小” 或 “最小的最大” 的问题。\",\"定义区间为闭区间 [l, r] ，每次只需判断答案是否需要更新（是否记下ans）和（可能的）答案在哪一侧（改 L 还是 R ）即可。\",\"int ans; int find(int l, int r) { while (l <= r) { int mid = l + r >> 1; if (check(mid)){ ans = mid; //如果条件成立则记下答案 r = mid - 1; //判断可能的答案更新区间 } else l = mid + 1; } return ans; }\"]},\"112\":{\"h\":\"3.3 整数二分\",\"t\":[\"【例二】A-B 数对\",\"题目描述：给出一串数以及一个数字 C ，要求计算出所有 A - B = C 的数对的个数（不同位置的数字一样的数对算不同的数对）。\",\"这里使用库函数二分的写法：\",\"依次枚举 A ，将问题转变成统计数列中 B + C 出现了多少次。先对数列排序，那么 B + C 会对应这个数列的连续一段，只要找到这个连续段的左端点和右端点即可。(需使用头文件 algorithm )\",\"① lower_bound(begin, end, val) 可以在区间 [begin, end) 中找到 val 第一次出现的位置；\",\"② upper_bound(begin, end, val) 可以在区间 [begin, end) 中找到 val 最后一次出现的位置的__后面一位__ 。\",\"则这个数出现的次数就可以表示为 upper_bound() - lower_bound() ，时间复杂度为 O(nlogn).\",\"#include <iostream> #include <algorithm> #define ll long long using namespace std; const int N = 2e5 + 10; int n, c; ll a[N]; int main() { cin >> n >> c; for (int i = 0; i < n; i++) cin >> a[i]; sort(a, a + n); ll tot = 0; for (int i = 0; i < n; i++) tot += upper_bound(a, a + n, a[i] + c) - lower_bound(a, a + n, a[i] + c); cout << tot << endl; return 0; }\"]},\"113\":{\"h\":\"3.4 浮点数二分\",\"t\":[\"bool check(double x) {/* ... */} // 检查x是否满足某种性质 double bsearch_3(double l, double r) { const double eps = 1e-6; // eps 表示精度，取决于题目对精度的要求 while (r - l > eps) { double mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid; } return l; }\"]},\"114\":{\"h\":\"4. 高精度算法\"},\"115\":{\"h\":\"4.1 高精度加法\",\"t\":[\"给定两个正整数（不含前导0），计算它们的和。 （C = A + B，A >= 0， B >= 0）\",\"代码如下：\",\"#include <iostream> #include <vector> using namespace std; const int N = 1e6 + 10; // C = A + B vector<int> add(vector<int> &A, vector<int> &B) //加上&直接搜索数组A和B，不用全部遍历，节省时间 { vector<int> C; int t = 0; //进位，低位满10向高位进位，低位变为0 for (int i = 0; i < A.size() || i < B.size(); i++){ //两个if把两个数组相同位上的数相加 if (i < A.size()) t += A[i]; if (i < B.size()) t += B[i]; //把相加后的结果除以10求余，压入C数组中 C.push_back(t % 10); //t再除以10，放入高位 t /= 10; } //如果最高位有数，则压入C数组中 if (t) C.push_back(t); //最后返回C数组 return C; } int main(){ string a, b; vector<int> A, B; cin >> a >> b; //例如 a = \\\"123456\\\" for (int i = a.size() - 1; i >= 0; i--) A.push_back(a[i] - '0'); //倒序存放, 数组A = [6, 5, 4, 3, 2, 1] for (int i = b.size() - 1; i >= 0; i--) B.push_back(b[i] - '0'); //同理, 数组B也是从低位(个位)存储, 从小到大 //使用auto编译器会自动判断数据是什么类型 auto C = add(A, B); for (int i = C.size() - 1; i >= 0; i--) printf(\\\"%d\\\", C[i]); return 0; }\"]},\"116\":{\"h\":\"4.2 高精度减法\",\"t\":[\"给定两个正整数（不含前导0），计算它们的差，计算结果可能为负数。\",\"1、前提： C = A - B，满足 A >= B，A >= 0，B >= 0 （如果 B >= A，则将其转化为 -(B - A) ）\",\"2、代码段：(只考虑正数的情况)\",\"#include <iostream> #include <vector> using namespace std; //判断是否有 A >= B bool cmp(vector<int> &A, vector<int> &B) { //A长度不等于B，若A大于B，返回true，否则返回false if (A.size() != B.size()) return A.size() > B.size(); //因为是倒序数组，高位在后面，所以从后遍历 //如果A > B, 返回true，否则返回flase for (int i = A.size() - 1; i >= 0; i--){ if (A[i] != B[i]) return A[i] > B[i]; } return true; } // C = A - B vector<int> sub(vector<int> &A, vector<int> &B) //加上&直接搜索数组A和B，不用全部遍历，节省时间 { vector<int> C; //定义一个借位的情况 int t = 0; for (int i = 0; i < A.size(); i++){ //t = A的这一位数 t = A[i] - t; //判断B在这一位上有没有数，如果有，则减去B[i] if (i < B.size()) t -= B[i]; //这种写法包含了两种情况：如果t >= 0, 则直接减；若t < 0, 则向高位借位(即t + 10)后再减 //将这一位相减后的结果压入C中 C.push_back((t + 10) % 10); if (t < 0) //t < 0，需要借位，标记为1 t = 1; else //t >= 0，不需要借位，标记为0 t = 0; } //删除前导0 while (C.size() > 1 && C.back() == 0) C.pop_back(); //最后返回C数组 return C; } int main(){ string a, b; vector<int> A, B; cin >> a >> b; //例如 a = \\\"123456\\\" for (int i = a.size() - 1; i >= 0; i--) A.push_back(a[i] - '0'); //倒序存放, 数组A = [6, 5, 4, 3, 2, 1] for (int i = b.size() - 1; i >= 0; i--) B.push_back(b[i] - '0'); //同理, 数组B也是从低位(个位)存储, 从小到大 //如果A > B，返回A - B if (cmp(A, B)){ auto C = sub(A, B); for (int i = C.size(); i >= 0; i--) printf(\\\"%d\\\", C[i]); } //否则返回 -(B - A) else { auto C = sub(B, A); printf(\\\"-\\\"); for (int i = C.size(); i >= 0; i--) printf(\\\"%d\\\", c[i]); } return 0; }\"]},\"117\":{\"h\":\"4.3 高精度整数乘法\",\"t\":[\"给定两个非负整数（不含前导0）A 和 B，要求计算 A × B 的值\",\"一般是 高精 × 低精，用 A × b 表示 （C = A * b，A >= 0，b >= 0）\",\"代码如下：\",\"#include <iostream> #include <vector> using namespace std; //C = A * b vector<int> mul(vector<int> &A, int b) { vector<int> C; int t = 0; for (int i = 0; i < A.size() || t; i++) { if (i < A.size()) t += A[i] * b; //同加法一样处理进位，逐位压入数组中 C.push_back(t % 10); t /= 10; } //删除前导0 while (C.size() > 1 && C.back() == 0) C.pop_back(); return C; } int main() { string a; int b; cin >> a >> b; vector<int> A; for (int i = a.size() - 1; i >= 0; i--) //倒序插入 A.push_back(a[i] - '0'); auto C = mul(A, b); for (int i = C.size() - 1; i >= 0; i--) //倒序输出 printf(\\\"%d\\\", C[i]); return 0; }\"]},\"118\":{\"h\":\"4.4 高精度整数除法\",\"t\":[\"给定两个非负整数（不含前导0）A 和 B，要求计算 A / B 的商和余数 (第一行输出所求的商，第二行输出所求余数)\",\"一般是 高精 ÷ 低精，用 A ÷ b 表示 （A / b = C ··· r，A >= 0，b > 0）\",\"代码如下：\",\"#include <iostream> #include <vector> #include <algorithm> using namespace std; vector<int> div(vector<int> &A, int b, int &t) //传入t的地址，便于直接对余数进行处理 { vector<int> C; t = 0; for (int i = A.size() - 1; i >= 0; i--) { //将上次的余数×10再加上当前位的数字，得到该位的被除数 t = t * 10 + A[i]; //所得即为商在这一位的数字 C.push_back(t / b); t %= b; } //由于在除法运算中，从高位到低位运算，因此前导0在数组前面，所以需要将其翻转，将前导0置于尾部，从而便于删除前导0 reverse(C.begin(), C.end()); //删除前导0 while (C.size() > 1 && C.back() == 0) C.pop_back(); return C; } int main() { string a; int B; cin >> a >> B; vector<int> A; for (int i = a.size() - 1; i >= 0; i--) A.push_back(a[i] - '0'); int t; //t为余数 auto C = div(A, B, t); for (int i = C.size() - 1; i >= 0; i--) cout << C[i]; cout << endl << t << endl; return 0; }\"]},\"119\":{\"h\":\"5. 前缀和与差分\"},\"120\":{\"h\":\"5.1 一维前缀和\",\"t\":[\"S[i] = a[1] + a[2] + ... a[i] a[l] + ... + a[r] = S[r] - S[l - 1]\"]},\"121\":{\"h\":\"5.2 二维前缀和\",\"t\":[\"S[i, j] = 第i行j列格子左上部分所有元素的和 以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为： S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]\"]},\"122\":{\"h\":\"5.3 一维差分\",\"t\":[\"给区间[l, r]中的每个数加上c：B[l] += c, B[r + 1] -= c\"]},\"123\":{\"h\":\"5.4 二维差分\",\"t\":[\"给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c： S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c\"]},\"124\":{\"h\":\"6. 位运算\"},\"125\":{\"h\":\"6.1 位运算符\",\"t\":[\"位运算符作用于位，并逐位执行操作。\",\"符号\",\"描述\",\"运算规则\",\"&\",\"与\",\"两个位都为1时，结果才为1\",\"|\",\"或\",\"两个位都为0时，结果才为0\",\"^\",\"异或\",\"两个位相同为0，不同为1\",\"~\",\"取反\",\"0变1，1变0\",\"<<\",\"左移\",\"各二进位全部左移若干位，高位丢弃，低位补0\",\">>\",\"右移\",\"各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）\"]},\"126\":{\"h\":\"6.2 用途\",\"t\":[\"1、按位与 (&)\",\"运算规则（全为 1，才为1）\",\"0 & 0 = 0\",\"0 & 1 = 0\",\"1 & 0 = 0\",\"1 & 1 = 1\",\"注意：负数按补码形式参加按位与运算。\",\"（1）清零\",\"如果想将一个单元清零，使其全部二进制位为 0，只要__与一个各位都为零的数值相与__，结果为零。\",\"（2）取一个数的指定位\",\"比如取数 X = 1010 1110 的低 4 位，只需要另找一个数 Y，令 Y 的低 4 位为 1，其余位为 0，即 Y = 0000 1111，然后将 X 与 Y 进行按位与运算（X & Y = 0000 1110）即可得到 X 的指定位。\",\"（3）判断奇偶\",\"只要根据最未位是 0 还是 1 来决定，为 0 就是偶数，为 1 就是奇数。因此可以用 if ((a & 1) == 0) 代替 if (a % 2 == 0) 来判断 a 是不是偶数。\",\"2、按位或 (|)\",\"运算规则（全为 0，才为 0）\",\"0 | 0 = 0\",\"0 | 1 = 1\",\"1 | 0 = 1\",\"1 | 1 = 1\",\"（1）常用来对一个数据的某些位设置为1\",\"比如将数 X = 1010 1110 的低 4 位设置为 1，只需要另找一个数 Y，令 Y 的低 4 位为 1，其余位为 0，即 Y = 0000 1111，然后将 X 与 Y 进行按位或运算（X | Y = 1010 1111）即可得到。\",\"3、按位异或 (^)\",\"运算规则（相同为 0，不同为 1）\",\"0 ^ 0 = 0\",\"0 ^ 1 = 1\",\"1 ^ 0 = 1\",\"1 ^ 1 = 0\",\"（1）翻转指定位\",\"比如将数 X = 1010 1110 的低 4 位进行翻转，只需要另找一个数 Y，令 Y 的低 4 位为 1，其余位为 0，即 Y = 0000 1111，然后将 X 与 Y 进行异或运算（X ^ Y = 1010 0001）即可得到。\",\"（2）与 0 相异或值不变\",\"例如：1010 1110 ^ 0000 0000 = 1010 1110\",\"（3）交换两个数\",\"当 x == y 时，直接异或运算进行整数交换后，会导致 x = 0, y = x.\",\"为避免这种情况，必须首先判断两个数是否相等。\",\"void swap(int &a, int &b){ if (a != b){ a ^= b; b ^= a; a ^= b; } }\",\"4、按位取反 (~)\",\"运算规则（0 变 1，1 变 0）\",\"~1 = 0\",\"~0 = 1\",\"（1）使一个数的最低位为 0\",\"使 x 的最低位为 0，可以表示为：a & ~1 。~1 的值为 1111 1111 1111 1110 ，再按 与 运算，最低位一定为 0。因为 ~ 运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。\",\"5、左移 (<<)\",\"定义：将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。\",\"设 a = 1010 1110，a = a << 2 将 a 的二进制位 左移2位、右补0，即得 a = 1011 1000。\",\"若左移时舍弃的高位不包含 1，则每左移一位，相当于该数乘以 2 。比如 左移 k 位，即乘上 2k .\",\"6、右移 (>>)\",\"定义：将一个数的各二进制位全部右移若干位，正数左补 0 ，负数左补 1 ，右边丢弃。\",\"例如：a = a >> 2 将 a 的二进制位右移 2 位，左补 0 或者 左补 1 得看被移数是正还是负。\",\"操作数每右移一位，相当于该数除以 2。比如 右移 k 位，即除以 2k .\",\"bit_operation\"]},\"127\":{\"h\":\"6.3 例题\",\"t\":[\"【例题一】n 的二进制表示中第 k 位数\",\"思路：先把第 k 位数字移动到最后一位，n 右移 k 位，即 n >> k ，再看个位是几，用 n & 1 ，合并两步后，即 n >> k & 1 .\",\"例如求 10 的二进制表示，代码如下：\",\"#include <iostream> using namespace std; int main() { int n = 10; //10的二进制表示为4位数 for (int k = 3; k >= 0; k--) cout << (n >> k & 1); return 0; }\",\"输出如下：\",\"1010\",\"【例题二】二进制中1的个数\",\"给定一个长度为 1 的数列，请你求出数列中每个数的二进制表示中 1 的个数。\",\"输入格式\",\"第一行包含整数 n .\",\"第二行包含 n 个整数，表示整个数列\",\"输出格式\",\"共一行，包含 n 个整数，其中的第 i 个数表示数列中的第 i 个数的二进制表示中 1 的个数。\",\"思路：使用 lowbit(x) 来解决，其表达式为 x & -x ，其中 -x 表示补码，即源码取反加 1 ，-x = (~x + 1)。 作用：返回 x 的最后一位 1，比如 x = 1010, 则 lowbit(x) = 10 ，x = 101000, 则 lowbit(x) = 1000 .\",\"代码如下：\",\"#include <iostream> using namespace std; const int N = 100010; int lowbit(int x) { return x & -x; } int main() { int n; cin >> n; while (n--){ int x; cin >> x; int res = 0; while (x){ x -= lowbit(x); res++; } cout << res << \\\" \\\"; } return 0; }\"]},\"128\":{\"h\":\"7. 双指针算法\",\"t\":[\"for (int i = 0, j = 0; i < n; i++) { while (j < i && check(i, j)) j++; // 具体问题的逻辑 // 例如求长度 res = max(res, i - j + 1); } 常见问题分类： (1) 对于一个序列，用两个指针维护一段区间 (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作\"]},\"129\":{\"h\":\"8. 离散化\",\"t\":[\"vector<int> alls; // 存储所有待离散化的值 sort(alls.begin(), alls.end()); // 将所有值排序 alls.erase(unique(alls.begin(), alls.end()), alls.end()); // 去掉重复元素 // 二分求出x对应的离散化的值 int find(int x) // 找到第一个大于等于x的位置 { int l = 0, r = alls.size() - 1; while (l < r) { int mid = l + r >> 1; if (alls[mid] >= x) r = mid; else l = mid + 1; } return r + 1; // 映射到1, 2, ...n }\"]},\"130\":{\"h\":\"9. 区间合并\",\"t\":[\"// 将所有存在交集的区间合并 void merge(vector<PII> &segs) { vector<PII> res; sort(segs.begin(), segs.end()); int L = -2e9, R = -2e9; for (auto seg : segs) if (R < seg.first) { if (st != -2e9) res.push_back({L, R}); L = seg.first, R = seg.second; } else R = max(R, seg.second); if (L != -2e9) res.push_back({L, R}); segs = res; }\"]},\"131\":{\"c\":[\"模板\"]},\"132\":{\"h\":\"搜索与图论\"},\"133\":{\"h\":\"1. 树与图的存储\",\"t\":[\"(1) 邻接矩阵：g [a] [b] 存储边 a -> b\",\"(2) 动态邻接矩阵：\",\"int n; struct Edge { int id, w; }; vector<Edge> h[N]; int dist[N]; void dfs(int u, int father, int distance) { dist[u] = distance; for (auto node : h[u]) if (node.id != father) dfs(node.id, u, distance + node.w); } int main() { scanf(\\\"%d\\\", &n); for (int i = 0; i < n - 1; i ++ ) { int a, b, c; scanf(\\\"%d%d%d\\\", &a, &b, &c); h[a].push_back({b, c}); h[b].push_back({a, c}); } dfs(1, -1, 0); // 寻找两点之间的最大距离 int u = 1; for (int i = 1; i <= n; i ++ ) if (dist[i] > dist[u]) u = i; dfs(u, -1, 0); for (int i = 1; i <= n; i ++ ) if (dist[i] > dist[u]) u = i; int s = dist[u]; printf(\\\"%lld\\\\n\\\", s * 10 + s * (s + 1ll) / 2); return 0; }\",\"(3) 邻接表：\",\"int n, m; //n代表点数，m代表边数 // 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点 int h[N], e[N], ne[N], idx; // 添加一条边a->b void add(int a, int b) { e[idx] = b; ne[idx] = h[a]; h[a] = idx ++; } // 初始化 idx = 0; memset(h, -1, sizeof h); //存边 for (int i = 0; i < n; i++){ int a, b; cin >> a >> b; add(a, b); //无向图就再写一遍 add(b, a) }\"]},\"134\":{\"h\":\"2. 树与图的遍历\",\"t\":[\"时间复杂度 O(n + m), n 表示点数， m 表示边数\"]},\"135\":{\"h\":\"深度优先遍历\",\"t\":[\"int dfs(int u) { st[u] = true; // st[u] 表示点u已经被遍历过 for (int i = h[u]; i != -1; i = ne[i]) { int j = e[i]; if (!st[j]) dfs(j); } }\"]},\"136\":{\"h\":\"宽度优先遍历\",\"t\":[\"queue<int> q; st[1] = true; // 表示1号点已经被遍历过 q.push(1); while (q.size()) { int t = q.front(); q.pop(); for (int i = h[t]; i != -1; i = ne[i]) { int j = e[i]; if (!st[j]) { st[j] = true; // 表示点j已经被遍历过 q.push(j); } } }\"]},\"137\":{\"h\":\"3. 拓扑排序\",\"t\":[\"时间复杂度 O(n+m), n 表示点数，m 表示边数\",\"1、图的拓扑序列是针对于有向图而言的，无向图是没有拓扑序列的。有向无环图被称为拓扑图。\",\"2、结论：一个有向无环图，一定至少存在一个入度为 0 的点。\",\"bool topsort() { //采用数组模拟队列的写法，头尾指针 int hh = 0, tt = -1; // d[i] 存储点i的入度，起点的入度为0 for (int i = 1; i <= n; i++) if (!d[i]) //如果不是起点 q[++tt] = i; while (hh <= tt) { int t = q[hh++]; for (int i = h[t]; i != -1; i = ne[i]) { int j = e[i]; if (--d[j] == 0) q[++tt] = j; } } // 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。 return tt == n - 1; }\"]},\"138\":{\"h\":\"4. 最短路问题\"},\"139\":{\"h\":\"4.1 单源最短路\",\"t\":[\"求从一个点到其他所有点的最短距离。\",\"分为两大类：\",\"1、所有边权都是正数（n 个点，m 条边）\",\"朴素版的Dijkstra算法，时间复杂度为 O(n2 + m) ，适合稠密图（边多，点少边比较多）\",\"堆优化版的Dijkstra算法，时间复杂度为 O(mlogn)，适合稀疏图（点多，指边相对于点不多，m 和 n 是同一个级别的类型）\",\"2、存在负权边\",\"Bellman-Ford 算法，时间复杂度为 O(nm)\",\"SPFA 算法，时间复杂度一般为 O(m)，最坏情况为 O(nm)，是Bellman-Ford算法的优化\"]},\"140\":{\"h\":\"4.1.1 朴素版 Dijkstra算法\",\"t\":[\"稠密图用邻接矩阵，稀疏图用邻接表\",\"1.逐个遍历，找到与起点最近的且未确定最短路径的点，访问加入集合并标记。\",\"2.更新第一个点到起点的最短距离，直到第n个点。\",\"__时间复杂度是 O(n2 + m)， n 表示点数，m 表示边数 __\",\"#include <iostream> #include <cstring> #include <algortihm> using namespace std; const int N = 510; int n, m; //点数和边数 int g[N][N]; // 存储每条边 int dist[N]; // 存储1号点到每个点的最短距离 bool st[N]; // 存储每个点的最短路是否已经确定 // 求1号点到n号点的最短路，如果不存在则返回-1 int dijkstra() { //距离都初始化为无穷大 memset(dist, 0x3f, sizeof dist); dist[1] = 0; for (int i = 0; i < n - 1; i ++ ) { int t = -1; // 在还未确定最短路的点中，寻找距离最小的点 //遍历n个点，找到一个未加入集合且距离最近的点 for (int j = 1; j <= n; j ++ ) if (!st[j] && (t == -1 || dist[t] > dist[j])) t = j; st[t] = true; //标记为已加入到集合中 // 用t更新其他点的距离 for (int j = 1; j <= n; j ++ ) dist[j] = min(dist[j], dist[t] + g[t][j]); } //如果为无穷大，说明不连通，无法形成最短路 if (dist[n] == 0x3f3f3f3f) return -1; return dist[n]; } int main() { cin >> n >> m; //邻接矩阵初始化为无穷大 memset(g, 0x3f, sizeof(g)); while (m--){ int a, b, c; cin >> a >> b >> c; //存入a和b两点之间的距离（有向图） g[a][b] = min(g[a][b], c); //无向图 //g[a][b] = min(g[a][b], c); //g[b][a] = min(a[a][b], c); } cout << dijkstra() << endl; return 0; }\"]},\"141\":{\"h\":\"4.1.2 堆优化版的Dijkstra算法\",\"t\":[\"稀疏图改用__邻接表__的形式存储，可以不需要考虑重边\",\"时间复杂度是 O(mlogn)， n 表示点数，m 表示边数\",\"#define PII pair<int, int> int n; //点的数量 int h[N], w[N], e[N], ne[N], idx; //邻接表存储所有边 int dist[N]; //存储所有点到1号点的距离 bool st[N]; //存储每个点的最短距离是否已确定 void add(int a, int b, int c) { e[idx] = b; w[idx] = c; ne[idx] = h[a]; h[a] = idx++; } // 求1号点到n号点的最短距离，如果不存在，则返回-1 int dijkstra() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; //定义一个小根堆 priority_queue<PII, vector<PII>, greater<PII>> heap; heap.push({0, 1}); // first存储距离，second存储节点编号 while (heap.size()) { auto t = heap.top(); heap.pop(); int ver = t.second, distance = t.first; if (st[ver]) continue; st[ver] = true; for (int i = h[ver]; i != -1; i = ne[i]) { int j = e[i]; if (dist[j] > distance + w[i]) { dist[j] = distance + w[i]; heap.push({dist[j], j}); } } } if (dist[n] == 0x3f3f3f3f) return -1; return dist[n]; }\"]},\"142\":{\"h\":\"4.1.3 Bellman-ford算法（存在负权边）\",\"t\":[\"1.可以用结构体存储点和边，包括负权边。\",\"2.具体步骤：两重 for 循环，迭代 n-1 次，每次备份一下，每次循环遍历所有边，更新两点之间的最短距离，如点 a->b 的更新方式为（松弛操作）\",\"for n 次 for 所有边 a, b, w (松弛操作) dist[b] = min(dist[b], backup[a] + w);\",\"backup[ ] 数组是上一次迭代后 dist[ ] 数组的备份，由于是每个点同时向外出发，因此需要对 dist[ ] 数组进行备份，若不进行备份会因此发生串联效应，影响到下一个点。\",\"3.循环 n-1 次之后，对于所有的点都 一定满足 dist[b] <= dist[a] + w，该式被称为三角不等式。\",\"4.如果图中存在负权回路，那么最短路可能为负无穷。（不是一定）\",\"5.是否能到达 n 号点的判断中需要进行 if(dist[n] > INF/2) 判断，而并非是 if(dist[n] == INF) 判断，原因是 INF 是一个确定的值，并非真正的无穷大，会随着其他数值而受到影响，``dist[n]大于某个与INF` 相同数量级的数即可。\",\"6.bellman-ford算法擅长解决有边数限制的最短路问题。\",\"时间复杂度 O(nm)， n 表示点数，m 表示边数\",\"int n, m; // n表示点数，m表示边数 int dist[N]; // dist[x]存储1到x的最短路距离 struct Edge // 边，a表示出点，b表示入点，w表示边的权重 { int a, b, w; }edges[M]; // 求1到n的最短路距离，如果无法从1走到n，则返回-1。 int bellman_ford() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; // 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。 for (int i = 0; i < n; i ++ ) { for (int j = 0; j < m; j ++ ) { int a = edges[j].a, b = edges[j].b, w = edges[j].w; if (dist[b] > dist[a] + w) dist[b] = dist[a] + w; } } if (dist[n] > 0x3f3f3f3f / 2) return -1; return dist[n]; }\"]},\"143\":{\"h\":\"4.1.4 SPFA算法 （存在负权边）\",\"t\":[\"1.用队列来存储\",\"2.while queue 不为空，\",\"取出作为 t ，t = q.front; q.pop();\",\"更新 t 的所有出边，如：t -> b, 把b加入 queue\",\"3.基本步骤\",\"建立一个队列，初始时队列里只有起始点\",\"再建立一个数组记录起始点到所有点的最短路径（该表格的初始值要赋为极大值，该点到它本身的路径赋为0）\",\"再建立一个数组，标记点是否在队列中\",\"队头不断出队，计算起始点经过队头到其他点的距离是否变短，如果变短且该点不在队列中，则把该点加入到队尾\",\"重复执行直到队列为空\",\"在保存最短路径的数组中，就得到了最短路径\",\"4.SPFA求最短路\",\"时间复杂度 平均情况下 O(m)， 最坏情况下 O(nm)， n 表示点数， m 表示边数\",\"int n, m; // 总点数和总边数 int h[N], e[M], w[M], ne[M], idx; // 邻接表存储所有边 int dist[N]; // 存储每个点到1号点的最短距离 bool st[N]; // 存储每个点是否在队列中 int add(int a, int b, int c) { e[idx] = b; w[idx] = c; ne[idx] = h[a]; h[a] = idx++; } // 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1 int spfa() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; queue<int> q; q.push(1); st[1] = true; while (q.size()) { auto t = q.front(); q.pop(); st[t] = false; for (int i = h[t]; i != -1; i = ne[i]) { int j = e[i]; if (dist[j] > dist[t] + w[i]) { dist[j] = dist[t] + w[i]; if (!st[j]) // 如果队列中已存在j，则不需要将j重复插入 { q.push(j); st[j] = true; } } } } if (dist[n] == 0x3f3f3f3f) return -1; return dist[n]; }\"]},\"144\":{\"h\":\"4.1.5 SPFA算法判断图中是否存在负环\",\"t\":[\"时间复杂度 O(nm)， n 表示点数， m 表示边数\",\"int n; //总点数 int h[N], w[N], e[N], ne[N], idx; //邻接表存储所有边 int dist[N]; //dist[x]存储1号点到x的最短距离， int cnt[N]; //cnt[x]存储1到x的最短路中经过的点数 bool st[N]; //存储每个点是否在队列中 // 如果存在负环，则返回true，否则返回false。 bool spfa() { // 不需要初始化dist数组 // 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。 queue<int> q; for (int i = 1; i <= n; i ++ ) { q.push(i); st[i] = true; } while (q.size()) { auto t = q.front(); q.pop(); st[t] = false; for (int i = h[t]; i != -1; i = ne[i]) { int j = e[i]; if (dist[j] > dist[t] + w[i]) { dist[j] = dist[t] + w[i]; cnt[j] = cnt[t] + 1; // 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环 if (cnt[j] >= n) return true; if (!st[j]) { q.push(j); st[j] = true; } } } } return false; }\"]},\"145\":{\"h\":\"4.2 多源汇最短路\"},\"146\":{\"h\":\"4.2.1 Floyd算法\",\"t\":[\"1.使用邻接矩阵存图\",\"2.三重循环，时间复杂度O(n^3)\",\"初始化： for (int i = 1; i <= n; i++) for (int j = 1; j <= n; j++) if (i == j) d[i][j] = 0; else d[i][j] = INF; //算法结束后，d[a][b]表示a到b的距离 for (int k = 1; k <= n; k++) for (int i = 1; i <= n; i++) for (int j = 1; j <= n; j++) d[i][j] = min(d[i][j], d[i][k] + d[k][j]);\"]},\"147\":{\"h\":\"5. 最小生成树问题\",\"t\":[\"最小生成树就是将 n 个顶点， n - 1 条边，通过一个连接起来，且使权值最小的一种结构。\",\"换句话来说，就是给定一个无向图，在图中选择若干条边把图中的所有节点连接起来，要求边长之和最小。在图论中，叫做求最小生成树。\"]},\"148\":{\"h\":\"5.1 朴素Prim算法\",\"t\":[\"可理解为 “加点法”， 每次迭代找到不在连通块中的距离最近的点，加入到连通块中，将连通块逐渐扩大，最后将整个图连通起来，并且边长之和最小。\",\"1、先把所有距离初始化为正无穷\",\"dist[i] = +INF;\",\"2、n次迭代，找到不在集合当中的最小的点，这个集合指当前已经在连通块中的所有点，找到该点赋给 t ，用 t 更新其他点到集合的距离，再把 t 加到集合当中去\",\"先累加，再更新\",\"for (int i = 0; i < n; i++) t <- 距离最近的点; t = ture;更新t\",\"时间复杂度为 O(n2 + m)， n 表示点数， m 表示边数\",\"#include <bits/stdc++.h> #define ll long long using namespace std; const int N = 1e5 + 10, M = N * 2; int n, m; // n表示点数，m表示边数 int g[N][N]; // 邻接矩阵，存储所有边 int dist[N]; // 存储其他点到当前最小生成树的距离 bool st[N]; // 存储每个点是否已经在生成树中 // 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和 int prim() { memset(dist, 0x3f, sizeof dist); int res = 0; //最小生成树所有边的长度之和 for (int i = 0; i < n; i++) { int t = -1; for (int j = 1; j <= n; j++) //如果没有在树中，且到树的距离最短，则选择该点 if (!st[j] && (t == -1 || dist[t] > dist[j])) t = j; //一定要先累加，再进行更新生成树 if (i && dist[t] == INF) return INF; if (i) //(不是起点)把找到的符合条件的点的长度加上 res += dist[t]; st[t] = true; for (int j = 1; j <= n; j++) dist[j] = min(dist[j], g[t][j]); } return res; } int main() { cin >> n >> m; memset(g, 0x3f, sizeof g); for (int i = 1; i <= m; i++){ int a, b, c; cin >> a >> b >> c; g[a][b] = g[b][a] = min(g[a][b], c); } int t = prim(); if (t == INF) puts(\\\"impossible\\\"); else printf(\\\"%d\\\\n\\\", t); }\"]},\"149\":{\"h\":\"5.2 Kruskal 算法\",\"t\":[\"可理解为 “加边法”，最初最小生成树的边数为 0，每次迭代选择一条不在集合内的权值最短的边，加入到集合中，组成最小生成树。\",\"1、使用快排将所有边按权值从小到大排序。时间复杂度为 O(log n).\",\"2、从小到大依次枚举每组边 a 、b，权重 c ，如果 a、b不连通，就将这条边加入集合中，直到具有 n 个顶点的连通块筛选出来 n-1 条边为止。时间复杂度为 O(n) .\",\"3、判断 a、b是否连通的方法为：使用并查集。\",\"初始化各个顶点在不同的集合中，父节点为它自己。\",\"按快排的从小到大的顺序遍历每条边，判断这条边的两个顶点是否有相同的父节点，如果有那就使在同一个集合中。\",\"如果该条边上的两个顶点在一个集合中，说明两个顶点已经连通，这条边不要。如果不在一个集合中，则加入这条边到集合中，连通这两个顶点。\",\"时间复杂度是 O(mlogm)， n 表示点数， m 表示边数\",\"#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 10; int n, m; // n是点数，m是边数 int p[N]; // 并查集的父节点数组 int rank[N]; // 树的高度 //结构体存储 两点及其权值 struct Edge { int a, b, w; //重载小于号，因为再给边排序的时候是按照边的权重进行排序的，这样当两个边进行比较的时候就会使用他们的权重进行比较了 bool operator< (const Edge &W)const { return w < W.w; } }edges[M]; void init(int n) { for (int i = 1; i <= n; i++){ p[i] = i; rank[i] = 0; } } int find(int x) // 并查集核心操作 { if (p[x] != x) p[x] = find(p[x]); return p[x]; } void union(int x, int y) { int px = find(x), py = find(y); if (px == py) return; if (rank[px] < rank[py]){ p[px] = py; } else { p[py] = px; if (rank[px] == rank[py]) rank[px]++; } } int kruskal() { sort(edges, edges + m); init(n); int res = 0; //存的是最小生成树的所有边的权值 int cnt = 0; //存的是当前加入的边数 for (int i = 0; i < m; i++) { int a = edges[i].a, b = edges[i].b, w = edges[i].w; pa = find(a), pb = find(b); if (pa != pb) // 如果两个连通块不连通，则将这两个连通块合并 { union(a, b); res += w; cnt++; } } //只有当 cnt == n - 1 时才能表示已经将所有点加入到集合中，可以生成最小生成树 if (cnt < n - 1) return INF; return res; }\"]},\"150\":{\"h\":\"6. 染色法判别二分图\",\"t\":[\"二分图： 将所有点分成__两个集合__，使得__所有边__只出现在集合之间，就是 二分图\",\"性质： 一定不含有奇数环，可能包含长度为偶数的环，不一定是__连通图__。\",\"DFS思路：\",\"染色可以使用 1 和 2 区分__不同颜色__，用 0 表示 未染色\",\"遍历所有点，每次将__未染色的点__进行 dfs，默认染成 1 或 2\",\"由于某个点染色成功并不代表整个图就是二分图，因此只有某个点染色失败才能立刻 break/return，__染色失败__相当于存在两个相邻的点染成了相同的颜色\",\"时间复杂度 O(n + m)， n 表示点数，m 表示边数\",\"int n, m; //n表示点数，m表示边数 int h[N], e[M], ne[M], idx; //邻接表存储图 int color[N]; //表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色 //参数：u表示当前节点，c表示当前点的颜色 bool dfs(int u, int c) { color[u] = c; for (int i = h[u]; i != -1; i = ne[i]) { int j = e[i]; if (color[j] == -1) { if (!dfs(j, !c)) return false; } else if (color[j] == c) return false; } return true; } bool check() { memset(color, -1, sizeof color); bool flag = true; for (int i = 1; i <= n; i ++ ) if (color[i] == -1) if (!dfs(i, 0)) { flag = false; break; } return flag; }\"]},\"151\":{\"h\":\"7. 匈牙利算法\",\"t\":[\"相关概念：\",\"匹配：在图论中，一个 [匹配] 是一个边的集合，其中任意两条边都不依附于同一个顶点。\",\"最大匹配：一个图所有匹配中，所含匹配边数最多的匹配，称为这个图的最大匹配。\",\"完美匹配：如果一个图的某个匹配中，所有的顶点都是匹配点，那么它就是一个完美匹配。\",\"交替路：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边...形成的路径叫交替路。\",\"增广路：从一个未匹配路出发，走交替路，如果途径另一个未匹配点（出发的点不算），则这条交替路称为增广路。\",\"算法描述：\",\"如果你想找的妹子已经有了男朋友，\",\"你就去问问她男朋友，\",\"你有没有备胎，\",\"把这个让给我好吧\",\"多么真实而实用的算法\",\"tips：因为你要去问的都是男孩子，所以存边的时候，都是由男孩子指向女孩子\",\"时间复杂度是 O(nm)， n 表示点数，m 表示边数\",\"int n1, n2; //n1表示第一个集合中的点数，n2表示第二个集合中的点数 // 邻接表存储所有边，匈牙利算法中只会用到从第一个集合指向第二个集合的边，所以这里只用存一个方向的边 int h[N], e[M], ne[M], idx; int match[N]; //存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个 bool st[N]; //表示第二个集合中的每个点是否已经被遍历过 bool find(int x) { //遍历所有点 for (int i = h[x]; i != -1; i = ne[i]) { int j = e[i]; if (!st[j]) //如果在这一轮的匹配中，这个点还未被匹配 { st[j] = true; //那就匹配并标记 //如果这个点未被匹配，且原来匹配的点能找到另一个点(下家)匹配，则匹配成功 if (match[j] == 0 || find(match[j])) { match[j] = x; return true; } } } return false; } // 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点 int res = 0; for (int i = 1; i <= n1; i ++ ) { //因为每次模拟匹配的预定情况都是不一样的所以每轮模拟都要初始化 memset(st, false, sizeof st); if (find(i)) res++; }\"]},\"152\":{\"c\":[\"模板\",\"图论\"]},\"153\":{\"h\":\"数学知识\"},\"154\":{\"h\":\"1. 质数\"},\"155\":{\"h\":\"1.1 试除法判定质数\",\"t\":[\"从小到大遍历，只判断能否被小于 sqrt(x) 的数整除。\",\"时间复杂度为 O(sqrt(n)).\",\"bool is_prime(int x) { if (x < 2) return false; for (int i = 2; i <= x / i; i++) if (x % i == 0) return false; return true; }\"]},\"156\":{\"h\":\"1.2 试除法分解质因数\",\"t\":[\"从小到大尝试 n 的所有因数，每个正整数都能够以唯一的方式表示成它的质因数的乘积。\",\"结论：n 中最多只包含一个大于 sqrt(n) 的因子。\",\"反证法证明：如果有两个大于 sqrt(n) 的因子，那么相乘会大于 n。于是我们发现只有一个大于 sqrt(n) 的因子，可以对其进行优化。如果最后 n 还是 >1，说明这就是大于 sqrt(n) 的唯一质因子，输出即可。\",\"时间复杂度为 O(log n) ~ O(sqrt(n)).\",\"void divide(int x) { for (int i = 2; i <= x / i; i++) if (x % i == 0) { int s = 0; //s表示次幂 while (x % i == 0) { x /= i; s++; } cout << i << ' ' << s << endl; //输出i的s次幂 } if (x > 1) cout << x << ' ' << 1 << endl; cout << endl; }\"]},\"157\":{\"h\":\"汇总\",\"t\":[\"// 假设输入都是正数 // 素数测试 O(√n) bool is_prime(int n) { for (int i = 2; i <= n / i; i++){ if (n % i == 0) return false; } return n != 1; } // 约数枚举 O(√n) vector<int> divisor(int n) { vector<int> res; for (int i = 1; i <= n / i; i++){ if (n % i == 0){ res.push_back(i); if (i != n / i) res.push_back(n / i); } } return res; } // 整数分解 O(√n) map<int, int> prime_factor(int n) { map<int, int> res; for (int i = 2; i <= n / i; i++){ while (n % i == 0){ ++res[i]; n /= i; } } if (n != 1) res[n] = 1; return res; }\"]},\"158\":{\"h\":\"1.3 筛法求素数\"},\"159\":{\"h\":\"1.3.1 朴素筛法（埃氏筛）\",\"t\":[\"从 2 到 n 枚举，（一个数的倍数一定是合数）筛掉它的倍数，如果该数没有被筛掉，那它就是一个质数。\",\"（1）调和级数：当 n 趋于无穷大时，1 + 1/2 + 1/3 + … + 1/n = ln n + C.\",\"（2）对朴素筛法的优化：任何一个合数都能写成几个质数相乘的形式。只需要判断 2 ~ n-1 中的所有质数，只要它不是 n 的约数，那么 n 就是一个质因数。\",\"（3）质数定理：1~n 当中有 n/ln n 个质数。\",\"（4）思路：从小到大枚举所有的质数，然后删去它们的所有的倍数，就删去了所有的合数，剩下的就是质数。\",\"时间复杂度为 O(n ln ln n).\",\"int primes[N], cnt; // primes[]存储所有素数，cnt记录素数个数 bool st[N]; // st[x]存储x是否被筛掉 void get_primes(int n) { for (int i = 2; i <= n; i++) { if (st[i]) continue; primes[cnt++] = i; for (int j = i; j <= n; j += i) //用质数把其所有的倍数都筛掉 st[j] = true; } }\"]},\"160\":{\"h\":\"1.3.2 区间筛法\",\"t\":[\"给定整数 a 和 b ，问区间 [a,b) 内有多少个素数。\",\"解法：\",\"因为 b 以内的合数的最小质因数一定不超过 b​ ，如果有 b​ 以内的素数表的话，就可以把埃氏筛法运用在 [a,b) 上了。\",\"所以先预处理好 [a,b​) 和 [a,b) 的素数表，然后从 [a,b​) 的表中筛得素数的同时，也将其倍数从 [a,b) 的表中划去，最后剩下的就是区间 [a,b) 内的素数了。\",\"#define ll long long bool is_primes[N]; bool is_primes2[N]; void get_prime(ll a, ll b) { for (int i = 0; (ll)i * i < b; i++) is_primes2[i] = true; for (int i = 0; i < b - a; i++) is_prime[i] = true; // is_primes[i - a] = true => i是素数 for (int i = 2; (ll)i * i < b; i++){ if (is_primes2[i]){ for (int j = 2 * i; (ll)j * j < b; j += i) is_primes2[j] = true; for (ll j = max(2LL, (a + i - 1) / i; j < b; j += i) is_primes[j - a] = false; } } }\"]},\"161\":{\"h\":\"1.3.3 线性筛（欧拉筛）\",\"t\":[\"核心思路：用最小质因子去筛合数。\",\"当 i % primes[j] != 0 时， 说明此时遍历到的 primes[j] 不是 i 的质因子，只可能是此时 primes[j] 的最小质因子， 所以 primes[j] * i 的最小质因子就是 primes[j].\",\"当有 i % primes[j] == 0 时， 因为我们是从小到大遍历的，说明此时的 prime[j] 是满足条件的第一个数，即找到了 primes[j] 就是 i 的最小质因子， 因此 primes[j] * i 的最小质因子也就是 primes[j]， 之后用 st[primes[j + 1] * i] = true 去筛合数时，就不是用最小质因子去更新了， 所以此时应该退出循环，避免重复筛选。\",\"时间复杂度为 O(k)\",\"int primes[N]; // primes[]存储所有素数 int cnt; //记录素数个数 bool st[N]; // st[x]存储x是否被筛掉 void get_primes(int n) { for (int i = 2; i <= n; i++) { if (!st[i]) primes[cnt++] = i; for (int j = 0; primes[j] <= n / i; j++) { //标记，pj一定是pj*i的最小质因子 st[primes[j] * i] = true; //从小到大遍历，如果 i%pj=0，则pj一定是i的最小公因子 if (i % primes[j] == 0) break; } } }\"]},\"162\":{\"h\":\"2. 约数\"},\"163\":{\"h\":\"2.1 试除法求所有约数\",\"t\":[\"从小到大判断，如果当前数能整除目标数，说明这个数是它的一个约数。\",\"vector<int> get_divisors(int x) { vector<int> res; //从小到大枚举n的所有约数对里面比较小的那一个 for (int i = 1; i <= x / i; i++) if (x % i == 0) { res.push_back(i); //特判最中间的数 if (i != x / i) res.push_back(x / i); } sort(res.begin(), res.end()); return res; }\"]},\"164\":{\"h\":\"2.2 约数个数和约数之和\",\"t\":[\"如果 N = p1^c1 * p2^c2 * ... *pk^ck 约数个数： (c1 + 1) * (c2 + 1) * ... * (ck + 1) 约数之和： (p1^0 + p1^1 + ... + p1^c1) * ... * (pk^0 + pk^1 + ... + pk^ck)\",\"约数之和\",\"#include <iostream> #include <algorithm> #include <unordered_map> #include <vector> using namespace std; typedef long long LL; const int N = 110, mod = 1e9 + 7; int main() { int n; cin >> n; unordered_map<int, int> primes; while (n -- ) { int x; cin >> x; for (int i = 2; i <= x / i; i ++ ) while (x % i == 0) { x /= i; primes[i] ++ ; } if (x > 1) primes[x] ++ ; } LL res = 1; for (auto p : primes) { LL a = p.first, b = p.second; LL t = 1; while (b -- ) t = (t * a + 1) % mod; res = res * t % mod; } cout << res << endl; return 0; }\"]},\"165\":{\"h\":\"2.3 最大公约数与最小公倍数\",\"t\":[\"欧几里得算法（辗转相除法)：\",\"每次都让较大的数对较小数取模，可以缩小问题规模而保持最大公约数不变，然后重复(递归)这个步骤。递归边界使某数变成了0，而此时另一个数即为所求答案.\",\"最坏情况下的时间复杂度为 O(log max(x, y))。\",\"对于大多数情况，辗转相除法时间可以忽略不计。\",\"int gcd(int a, int b) { return b ? gcd(b, a % b) : a; }\",\"用两数之积除以他们的最大公约数可得最小公倍数：\",\"int lcm(int a, int b) { return a * gcd(a, b) / b; //注意乘除的先后顺序，防止溢出 }\"]},\"166\":{\"h\":\"3. 欧拉函数\"},\"167\":{\"h\":\"3.1 求欧拉函数\",\"t\":[\"欧拉函数的定义\",\"1∼N 中与 N 互质的数的个数被称为欧拉函数，记为 ϕ(N)。 若在算数基本定理中，N=p1a1​​p2a2​​...pmam​​ ，则： ϕ(N)=N×p1​p1​−1​×p2​p2​−1​×…×pm​pm​−1​\",\"//求x的欧拉函数 int phi(int x) { int res = x; for (int i = 2; i <= x / i; i++) //分解质因数 if (x % i == 0) { res = res / i * (i - 1); //用上面的公式定义求，先整除再乘 while (x % i == 0) x /= i; } if (x > 1) res = res / x * (x - 1); return res; }\"]},\"168\":{\"h\":\"3.2 筛法求欧拉函数\",\"t\":[\"思路：质数 i 的欧拉函数即为 phi[i] = i - 1：1 ~ i−1均与 i 互质，共 i−1个。 phi[primes[j] * i] 分为两种情况： ① i % primes[j] == 0 时：primes[j] 是 i 的最小质因子，也是 primes[j] * i 的最小质因子，因此 1 - 1 / primes[j] 这一项在 phi[i] 中计算过了，只需将基数 N 修正为 primes[j] 倍，最终结果为 phi[i] * primes[j] 。 ② i % primes[j] != 0：primes[j] 不是 i 的质因子，只是 primes[j] * i 的最小质因子，因此不仅需要将基数 N 修正为 primes[j] 倍，还需要补上 1 - 1 / primes[j] 这一项，因此最终结果 phi[i] * (primes[j] - 1) 。\",\"int primes[N], cnt; // primes[]存储所有素数 int euler[N]; // 存储每个数的欧拉函数 bool st[N]; // st[x]存储x是否被筛掉 void get_eulers(int n) { euler[1] = 1; for (int i = 2; i <= n; i ++ ) { if (!st[i]) { primes[cnt ++ ] = i; euler[i] = i - 1; } for (int j = 0; primes[j] <= n / i; j ++ ) { int t = primes[j] * i; st[t] = true; if (i % primes[j] == 0) { euler[t] = euler[i] * primes[j]; break; } euler[t] = euler[i] * (primes[j] - 1); } } }\"]},\"169\":{\"h\":\"4. 快速幂\",\"t\":[\"基本思路：\",\"预处理出 a20,a21,a22,...,a2logk 这 k 个数\",\"将 ab 用 a20,a21,a22,...,a2logk 这 k 个数来组合，即组合成 ab=a2x1​×a2x2​×...×a2xt​=a2x1​+2x2​+...+2xt​​\",\"即用二进制来表示\",\"k&1 就是判断 k 的二进制表示中第 0 位上的数是否为 1，若为 1，则为 true，反之为 false.\",\"k&1 也可以用来判断奇数和偶数，b&1 = true 时为奇数，b&1 = false 时为偶数。\",\"求 ak mod p， 时间复杂度为 O(logk)\",\"int qmi(int a, int k, int p) { int res = 1 % p; while (k) { if (k&1) res = res * a % p; k >>= 1; a = a * a % p; } return res; }\"]},\"170\":{\"h\":\"5. 扩展欧几里得算法\"},\"171\":{\"h\":\"裴蜀定理\",\"t\":[\"若 a, b 是整数,且 gcd(a,b) = d ，那么对于任意的整数 x, y, ax+by 都一定是 d 的倍数。特别地，一定存在整数 x, y，使 ax + by = d 成立。\",\"它的一个重要推论是：\",\"a, b 互质的充分必要条件是存在整数 x, y 使 ax + by = 1 .\",\"用于求解方程 ax+by=gcd(a,b)​ 的解\",\"当 b=0 时，ax+by=a 所以有 x=1,y=0\",\"当 b=0 时 ，因为 $gcd(a, b) = gcd(b, a % b) $\",\"​ 所以 x=y′,y=x′−[a/b]∗y′\",\"求整数 x 和 y 使得 ax+by=1\",\"如果 gcd(a,b)=1，显然无解。反之，若 gcd(a,b)=1 ，则可以通过扩展欧几里得来求解。\",\"事实上，一定存在整数对 (x,y) 使得 ax+by=gcd(a,b) .\",\"// 求x, y，使得ax + by = gcd(a, b) int exgcd(int a, int b, int &x, int &y) { if (!b) { x = 1; y = 0; return a; } int d = exgcd(b, a % b, y, x); y -= (a/b) * x; return d; }\"]},\"172\":{\"h\":\"6. 中国剩余定理\",\"t\":[\"给定 2n 个整数 a1​,a2​,...,an​ 和 m1​,m2​,...,mn​ ，求一个最小的非负整数 x ，满足 ∀i∈[1,n],x≡mi​(modai​) .\",\"输入格式\",\"第 1 行包含整数 n。\",\"第 2...n+1 行：每 i+1 行包含两个整数 ai​ 和 mi​ ，数之间用空格隔开。\",\"输出格式\",\"输出最小非负整数 x ，如果 x 不存在，则输出 -1.\",\"如果存在 x ，则数据保证 x 一定在 64 位整数范围内。\",\"思路\",\"对于每两个式子，将其等价转换\",\"用扩展欧几里得算法找出一组解\",\"并且判断是否有解\",\"找到最小整数解\",\"等效替代\",\"相当于是每次考虑合并两个式子，将这 n 个式子合并 n - 1 次后变为一个式子。最后剩下的式子就满足我们的答案。\",\"#include <iostream> #include <algorithm> #define ll long long using namespace std; //扩展欧几里得 ll exgcd(ll a, ll b, ll &x, ll &y) { if (!b) { x = 1, y = 0; return a; } ll d = exgcd(b, a % b, y, x); y -= a / b * x; return d; } //可能为负数，取模加模再取模 ll inline mod(ll a, ll b) { return ((a % b) + b) % b; } int main() { ll n; scanf(\\\"%lld\\\", &n); ll a1, m1; scanf(\\\"%lld%lld\\\", &a1, &m1); for (ll i = 1; i < n; i++) { ll a2, m2, k1, k2; scanf(\\\"%lld%lld\\\", &a2, &m2); ll d = exgcd(a1, -a2, k1, k2); if ((m2 - m1) % d) { puts(\\\"-1\\\"); return 0; } k1 = k1 * (m2 - m1) / d; k1 = mod(k1, abs(a2 / d)); m1 = m1 + k1 * a1; a1 = abs(a1 / d * a2); } printf(\\\"%lld\\\\n\\\", m1); return 0; }\"]},\"173\":{\"h\":\"7. 高斯消元\",\"t\":[\"给定一个包含 n 个方程 n 个未知数的线性方程组。方程组中的系数为实数。\",\"要求求解这个方程组。\",\"（线性代数方法解非齐次线性方程组）\",\"前置知识：初等行（列）变换\",\"把某一行乘一个非00的数 (方程的两边同时乘上一个非00数不改变方程的解)\",\"交换某两行 (交换两个方程的位置)\",\"把某行的若干倍加到另一行上去 （把一个方程的若干倍加到另一个方程上去）\",\"高斯消元适用解法\",\"通过初等行变换把 增广矩阵 化为 阶梯型矩阵 并回代得到方程的解\",\"适用于求解包含 n 个方程，n 个未知数的多元线性方程组\",\"算法步骤\",\"枚举每一列c,\",\"找到当前列绝对值最大的一行\",\"用初等行变换(2) 把这一行换到最上面（未确定阶梯型的行，并不是第一行）\",\"用初等行变换(1) 将该行的第一个数变成 11 （其余所有的数字依次跟着变化）\",\"用初等行变换(3) 将下面所有行的当且列的值变成 0\",\"时间复杂度为 O(n^3)\",\"const int eps = 1e-6; //控制精度，小于eps视为0 int a[N][N]; // a[N][N]是增广矩阵 int gauss() { int r, c; //行row,列col for (r = 0, c = 0; c < n; c ++ ) { int t = r; // 找到绝对值最大的行 for (int i = r; i < n; i ++ ) if (abs(a[i][c]) > abs(a[t][c])) t = i; if (abs(a[t][c]) < eps) continue; // 将绝对值最大的行换到最顶端 for (int i = c; i <= n; i ++ ) swap(a[t][i], a[r][i]); // 将当前行的首位变成1 for (int i = n; i >= c; i -- ) a[r][i] /= a[r][c]; // 用当前行将下面所有的列消成0 for (int i = r + 1; i < n; i ++ ) if (fabs(a[i][c]) > eps) for (int j = n; j >= c; j -- ) a[i][j] -= a[r][j] * a[i][c]; r ++ ; } if (r < n) { for (int i = r; i < n; i ++ ) if (fabs(a[i][n]) > eps) return 2; // 无解 return 1; // 有无穷多组解 } for (int i = n - 1; i >= 0; i -- ) for (int j = i + 1; j < n; j ++ ) a[i][n] -= a[i][j] * a[j][n]; return 0; // 有唯一解 }\"]},\"174\":{\"h\":\"8. 求组合数\"},\"175\":{\"h\":\"8.1 递推法求组合数\",\"t\":[\"适用题型：\",\"给定两个正整数 a 与 b ，求 Cab​mod(1e9+7)\",\"递推式：\",\"Cab​=Ca−1b−1​+Ca−1b​\",\"// c[a][b] 表示从a个苹果中选b个的方案数 for (int i = 0; i < N; i++) for (int j = 0; j <= i; j++) if (!j) c[i][j] = 1; else c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % mod;\"]},\"176\":{\"h\":\"8.2 通过预处理逆元的方式求组和数\",\"t\":[\"用 infact(a!) 表示 a! 的逆元\",\"Cab​=b!∗(a−b)!a!​=a!∗infact(b!)∗infact((a−b)!)\",\"快速幂求逆元\",\"费马小定理：如果 p 是一个质数，而整数 a 不是 p 的倍数，则有 ap−1≡1(modp) .\",\"乘法逆元的定义\",\"若整数 b, m 互质，并且对于任意的整数 a，如果满足 b | a，则存在一个整数 x，使得 a / b ≡ a * x (mod m) ，则称 x 为 b 的模 m 乘法逆元，记为 b−1(modm) .\",\"b 存在乘法逆元的充要条件是 b 与模数 m 互质。当模数 m 为质数时，bm−2 即为 b 的乘法逆元。\",\"结论：当 b 与 m 互质时，b 的乘法逆元为 bm−2.\",\"​ 当 b 为 m 的倍数时，b 的逆元不存在。b∗x%m==0 ，b 乘任意一个 x % m 一定等于 0.\",\"首先预处理出所有阶乘取模的余数fact[N]，以及所有阶乘取模的逆元infact[N] 如果取模的数是质数，可以用费马小定理求逆元 int qmi(int a, int k, int p) // 快速幂模板 { int res = 1; while (k) { if (k & 1) res = (LL)res * a % p; a = (LL)a * a % p; k >>= 1; } return res; } // 预处理阶乘的余数和阶乘逆元的余数 fact[0] = infact[0] = 1; for (int i = 1; i < N; i ++ ) { fact[i] = (LL)fact[i - 1] * i % mod; infact[i] = (LL)infact[i - 1] * qmi(i, mod - 2, mod) % mod; }\"]},\"177\":{\"h\":\"8.3 卢卡斯(Lucas)定理求组合数\",\"t\":[\"给定 n 组询问，每组询问给定三个整数 a,b,p，其中 p 是质数，请你输出 Cab​modp 的值。\",\"Lucas 定理：Cab​≡Ca%pb%p​∗Cpa​pb​​(modp)\",\"Cba​=(a−b!)∗b!a!​=(a−b)∗(a−b−1)∗…∗1∗b!a∗(a−1)∗(a−2)∗…∗(a−b+1)∗(a−b)∗…∗1​=b!a∗(a−1)∗(a−2)∗…(a−b+1)​\",\"因此可以递推的每次乘 a 然后 除以 b ，因为从 a 到 a - b + 1，所以是乘 b 次。\",\"若p是质数，则对于任意整数 1 <= m <= n，有： C(n, m) = C(n % p, m % p) * C(n / p, m / p) (mod p) int qmi(int a, int k, int p) // 快速幂模板 { int res = 1 % p; while (k) { if (k & 1) res = (LL)res * a % p; a = (LL)a * a % p; k >>= 1; } return res; } int C(int a, int b, int p) // 通过定理求组合数C(a, b) { if (a < b) return 0; LL x = 1, y = 1; // x是分子，y是分母 for (int i = a, j = 1; j <= b; i --, j ++ ) { x = (LL)x * i % p; y = (LL)y * j % p; } return x * (LL)qmi(y, p - 2, p) % p; } int lucas(LL a, LL b, int p) { if (a < p && b < p) return C(a, b, p); return (LL)C(a % p, b % p, p) * lucas(a / p, b / p, p) % p; } int main() { int n; cin >> n; while (n--) { ll a, b, p; cin >> a >> b >> p; cout << lucas(a, b, p) << endl; } return 0; }\"]},\"178\":{\"h\":\"8.4 分解质因数法求组合数\",\"t\":[\"输入 a, b，求 Cab​ 的值。\",\"方法：对阶乘分解质因数之后，用高精度相乘即可。\",\"步骤：\",\"筛素数\",\"求每个质数的次数\",\"用高精度乘法把所有质因子乘上\",\"当我们需要求出组合数的真实值，而非对某个数的余数时，分解质因数的方式比较好用： 1. 筛法求出范围内的所有质数 2. 通过 C(a, b) = a! / b! / (a - b)! 这个公式求出每个质因子的次数。 n! 中p的次数是 n / p + n / p^2 + n / p^3 + ... 3. 用高精度乘法将所有质因子相乘 int primes[N], cnt; // 存储所有质数 int sum[N]; // 存储每个质数的次数 bool st[N]; // 存储每个数是否已被筛掉 void get_primes(int n) // 线性筛法求素数 { for (int i = 2; i <= n; i ++ ) { if (!st[i]) primes[cnt ++ ] = i; for (int j = 0; primes[j] <= n / i; j ++ ) { st[primes[j] * i] = true; if (i % primes[j] == 0) break; } } } int get(int n, int p) // 求n!中的次数 { int res = 0; while (n) { res += n / p; n /= p; } return res; } vector<int> mul(vector<int> a, int b) // 高精度乘低精度模板 { vector<int> c; int t = 0; for (int i = 0; i < a.size(); i ++ ) { t += a[i] * b; c.push_back(t % 10); t /= 10; } while (t) { c.push_back(t % 10); t /= 10; } return c; } get_primes(a); // 预处理范围内的所有质数 for (int i = 0; i < cnt; i ++ ) // 求每个质因数的次数 { int p = primes[i]; sum[i] = get(a, p) - get(b, p) - get(a - b, p); } vector<int> res; res.push_back(1); for (int i = 0; i < cnt; i ++ ) // 用高精度乘法将所有质因子相乘 for (int j = 0; j < sum[i]; j ++ ) res = mul(res, primes[i]);\"]},\"179\":{\"h\":\"8.5 卡特兰数\",\"t\":[\"给定n个0和n个1，它们按照某种顺序排成长度为2n的序列，满足任意前缀中0的个数都不少于1的个数的序列的数量为： Cat(n) = C(2n, n) / (n + 1)\"]},\"180\":{\"h\":\"9. 容斥原理\",\"t\":[\"给定一个整数 n 和 m 个不同的质数 p1​,p2​,...,pm​ .\",\"请你求出 1 ~ n 中能被 p1​,p2​,...,pm​​ 中至少一个数整除的整数有多少个。\",\"记 Si​ 为 1 ~ n 中能整除 pi​​ 的集合，根据容斥原理，所有数的个数为各个集合的并集，计算公式如下\",\"#include<iostream> using namespace std; #define ll long long const int N = 20; int p[N], n, m; int main() { cin >> n >> m; for(int i = 0; i < m; i++) cin >> p[i]; int res = 0; //枚举从1 到 1111...(m个1)的每一个集合状态, (至少选中一个集合) for(int i = 1; i < 1 << m; i++) { int t = 1; //选中集合对应质数的乘积 int s = 0; //选中的集合数量 //枚举当前状态的每一位 for(int j = 0; j < m; j++){ //选中一个集合 if(i >> j & 1){ //乘积大于n, 则n/t = 0, 跳出这轮循环 if((LL)t * p[j] > n){ t = -1; break; } s++; //有一个1，集合数量+1 t *= p[j]; } } if(t != -1) { if (s % 2) //选中奇数个集合, 则系数应该是1, n/t为当前这种状态的集合数量 res += n / t; else //反之则为 -1 res -= n / t; } } cout << res << endl; return 0; }\"]},\"181\":{\"h\":\"10. 博弈论\"},\"182\":{\"h\":\"10.1 NIM游戏\",\"t\":[\"必胜状态和必败状态\",\"必胜状态，先手进行__某一个操作__，留给后手是一个必败状态时，对于先手来说是一个必胜状态。即__先手可以走到某一个必败状态__。\",\"必败状态，先手__无论如何操作__，留给后手都是一个必胜状态时，对于先手来说是一个必败状态。即__先手走不到任何一个必败状态__。\",\"给定N堆物品，第i堆物品有Ai个。两名玩家轮流行动，每次可以任选一堆，取走任意多个物品，可把一堆取光，但不能不取。取走最后一件物品者获胜。两人都采取最优策略，问先手是否必胜。\",\"我们把这种游戏称为NIM博弈。把游戏过程中面临的状态称为局面。整局游戏第一个行动的称为先手，第二个行动的称为后手。若在某一局面下无论采取何种行动，都会输掉游戏，则称该局面必败。 所谓采取最优策略是指，若在某一局面下存在某种行动，使得行动后对面面临必败局面，则优先采取该行动。同时，这样的局面被称为必胜。我们讨论的博弈问题一般都只考虑理想情况，即两人均无失误，都采取最优策略行动时游戏的结果。 NIM博弈不存在平局，只有先手必胜和先手必败两种情况。\",\"定理： NIM博弈先手必胜，当且仅当 a1 ^ a2 ^ … ^ an != 0\",\"#include <iostream> #include <algorithm> using namespace std; int main() { int n; cin >> n; int res = 0; while (n--) { int x; cin >> x; res ^= x; //每次异或操作 } if (res) puts(\\\"Yes\\\"); else puts(\\\"No\\\"); return 0; }\"]},\"183\":{\"h\":\"10.2 公平组合游戏ICG\",\"t\":[\"若一个游戏满足：\",\"由两名玩家交替行动；\",\"在游戏进程的任意时刻，可以执行的合法行动与轮到哪名玩家无关；\",\"不能行动的玩家判负；\",\"则称该游戏为一个公平组合游戏。\",\"NIM博弈属于公平组合游戏，但城建的棋类游戏，比如围棋，就不是公平组合游戏。因为围棋交战双方分别只能落黑子和白子，胜负判定也比较复杂，不满足条件 2 和条件 3 。\"]},\"184\":{\"h\":\"10.3 有向图游戏\",\"t\":[\"给定一个有向无环图，图中有一个唯一的起点，在起点上放有一枚棋子。两名玩家交替地把这枚棋子沿有向边进行移动，每次可以移动一步，无法移动者判负。该游戏被称为有向图游戏。 任何一个公平组合游戏都可以转化为有向图游戏。具体方法是，把每个局面看成图中的一个节点，并且从每个局面向沿着合法行动能够到达的下一个局面连有向边。\"]},\"185\":{\"h\":\"10.4 Mex运算\",\"t\":[\"设S表示一个非负整数集合。定义mex(S)为求出不属于集合S的最小非负整数的运算，即： mex(S) = min{x}, x属于自然数，且x不属于S\"]},\"186\":{\"h\":\"10.5 SG游戏\",\"t\":[\"在有向图游戏中，对于每个节点x，设从x出发共有k条有向边，分别到达节点y1, y2, …, yk，定义SG(x)为x的后继节点y1, y2, …, yk 的SG函数值构成的集合再执行mex(S)运算的结果，即： SG(x) = mex({SG(y1), SG(y2), …, SG(yk)}) 特别地，整个有向图游戏G的SG函数值被定义为有向图游戏起点s的SG函数值，即SG(G) = SG(s)。\"]},\"187\":{\"h\":\"10.6 有向图游戏的和\",\"t\":[\"设G1, G2, …, Gm 是m个有向图游戏。定义有向图游戏G，它的行动规则是任选某个有向图游戏Gi，并在Gi上行动一步。G被称为有向图游戏G1, G2, …, Gm的和。 有向图游戏的和的SG函数值等于它包含的各个子游戏SG函数值的异或和，即： SG(G) = SG(G1) ^ SG(G2) ^ … ^ SG(Gm)\",\"定理\",\"有向图游戏的某个局面必胜，当且仅当该局面对应节点的SG函数值大于0。 有向图游戏的某个局面必败，当且仅当该局面对应节点的SG函数值等于0。\"]},\"188\":{\"c\":[\"模板\",\"数学\"]},\"189\":{\"h\":\"数据结构\"},\"190\":{\"h\":\"1. 数组模拟链表\"},\"191\":{\"h\":\"1.1 单链表\",\"t\":[\"也称静态链表（邻接表：n 个链表，主要应用：存储图和树）单链表只能存储当前节点的值和指向下一节点的指针，无法存储上一节点\",\"// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点 int head, e[N], ne[N], idx; // 初始化 void init() { head = -1; //-1表示不存在， idx = 0; } // 在链表头插入一个数a void insert(int a) { e[idx] = a,; ne[idx] = head,; head = idx ++ ; } // 将一个新的节点x插入下标是k的后面 void add(int k, int x){ e[idx] = x; // 1.先存值 ne[idx] = ne[k]; // 2.新节点的下一节点指向 k 指向的下一节点 ne[k] = idx; // 3.k指向的下一节点指向新节点 idx++; // 4.index指向下一个指针 } // 将头结点删除，需要保证头结点存在 void remove() { head = ne[head]; } // 将下标是k的点后面的点删掉 void remove(int x){ // 直接将其指向下下个节点，在算法竞赛中一般不需要考虑删除的那个节点该如何处理 ne[k] = ne[ne[k]]; }\"]},\"192\":{\"h\":\"1.2 双链表\",\"t\":[\"（主要用来优化某些问题）有两个指针，一个指向前，一个指向后。\",\"// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点 int e[N], l[N], r[N], idx; // 初始化 void init() { // 0是左端点，1是右端点 r[0] = 1; l[1] = 0; idx = 2; // 0和1都被占用了，所以idx从2开始 } // 在节点k的右边插入一个数x // 如果要插在k的左边，就把k改为l[k] void insert(int k, int x) { e[idx] = x; r[idx] = r[k]; l[idx] = k; l[r[k]] = idx; r[k] = idx++; } // 删除第k个点 void remove(int k) { l[r[k]] = l[k]; r[l[k]] = r[k]; }\"]},\"193\":{\"h\":\"2. 栈\",\"t\":[\"先进后出\"]},\"194\":{\"h\":\"2.1 普通栈\",\"t\":[\"// tt表示栈顶 int stk[N]; //栈数组从0开始 int tt = 0; // 向栈顶插入一个数 stk[++tt] = x; // 从栈顶弹出一个数 tt--; // 栈顶的值 stk[tt]; // 判断栈是否为空 if (tt > 0) not empty { } else empty\"]},\"195\":{\"h\":\"2.1 单调栈\",\"t\":[\"给定一个序列，找到每一个数左边离他最近的比它小的数。\",\"性质：如果 ax​≥ay​,x<y，那么 ax​ 永远不会被输出，可以删掉。比如 a3​≥a5​，那么 a3​ 永远不会被输出。\",\"常见模型：找出每个数左边离它最近的比它大/小的数 int tt = 0; for (int i = 1; i <= n; i++) { while (tt && check(stk[tt], i)) tt--; stk[++tt] = i; }\"]},\"196\":{\"h\":\"3. 队列\",\"t\":[\"先进先出，后进后出\"]},\"197\":{\"h\":\"3.1 普通队列\",\"t\":[\"// hh 表示队头，tt表示队尾 int q[N], hh = 0, tt = -1; // 向队尾插入一个数 q[++tt] = x; // 从队头弹出一个数 hh++; // 队头的值 q[hh]; //同理队尾 q[tt] // 判断队列是否为空 if (hh <= tt) not empty { } else empty\"]},\"198\":{\"h\":\"3.2 单调队列\",\"t\":[\"求滑动窗口里的最大值和最小值。用单调队列来优化。\",\"步骤：\",\"判断队头是否已经滑出窗口\",\"判断当前元素与队尾元素是否满足单调性问题\",\"若满足条件，弹出队尾元素，将当前元素加入队尾\",\"如果窗口满足条件，则输出结果\",\"【注意】队列里面存的是下标\",\"常见模型：找出滑动窗口中的最大值/最小值 int hh = 0, tt = -1; for (int i = 0; i < n; i++) { //判断队头是否滑出窗口 if (hh <= tt && check_out(q[hh])) hh++; //判断当前元素与队尾元素是否满足单调性问题 while (hh <= tt && check(q[tt], i)) tt--; q[++tt] = i; //将当前元素加入到队尾 //如果满足条件再输出结果 if() }\"]},\"199\":{\"h\":\"4. KMP\",\"t\":[\"关于为什么求 next 数组和匹配的操作类似： 因为本质是一样的：对于 S 串每一个特定的下标 i，在满足 s[i-j+1，i]=p[0，j] 的前提下，我们需要找出 j 的最大值。 唯一不同的在于，求 next 数组时，我们关心对于每个不同的下标 i,j 能走多远；匹配时，我们只关心 j 是否走到末尾.\",\"非常有意思的说法是： 求 next 数组时，对于每个 i：\\\"j走到哪了呀？我用数组记录一下你的位置\\\" 匹配时，对于每个 i：\\\"到终点和我说声，匹配完我输出一下，没事别叫我。\\\"\",\"#include <iostream> using namespace std; const int N = 100010, M = 10010; // N为模式串长度，M匹配串长度 int n, m; int ne[M]; // next[]数组，避免和头文件next冲突 char s[N], p[M]; // s为模式串， p为匹配串 int main() { cin >> n >> s+1; cin >> m >> p+1; //下标从1开始 // 求next[]数组 for (int i = 2, j = 0; i <= m; i++) { while (j && p[i] != p[j + 1]) j = ne[j]; if (p[i] == p[j + 1]) j++; ne[i] = j; } // 匹配操作 for (int i = 1, j = 0; i <= n; i++) { while (j && s[i] != p[j + 1]) j = ne[j]; if (s[i] == p[j + 1]) j++; if (j == m) // 满足匹配条件，打印开头下标, 从0开始 { // 匹配完成后的具体操作 // 如：输出以0开始的匹配子串的首字母下标 // printf(\\\"%d \\\", i - m); (若从1开始，加1) j = ne[j]; // 再次继续匹配 } } return 0; }\"]},\"200\":{\"h\":\"5. Trie树\",\"t\":[\"Trie 树又称字典树、单词查找树。是一种能够高效存储和查找字符串集合的数据结构。\",\"存储形式如下：\",\"Trie树存储形式\",\"// son[][]存储树中每个节点的子节点，因为存的都是英文字母，最多有26个 int son[N][26]; int cnt[N]; // cnt[]存储以每个节点结尾的单词数量 int idx; // 存储当前用到的下标，0号点既是根节点，又是空节点 // 插入一个字符串 void insert(char *str) { int p = 0; // 字符串以'0'结尾，所以可以用str[i]结束 for (int i = 0; str[i]; i ++ ) { int u = str[i] - 'a'; if (!son[p][u]) son[p][u] = ++ idx; p = son[p][u]; } cnt[p] ++ ; } // 查询字符串出现的次数 int query(char *str) { int p = 0; for (int i = 0; str[i]; i ++ ) { int u = str[i] - 'a'; if (!son[p][u]) return 0; p = son[p][u]; } return cnt[p]; }\"]},\"201\":{\"h\":\"6. 并查集\"},\"202\":{\"h\":\"6.1 朴素并查集\",\"t\":[\" int p[N]; // 存储每个点的祖宗节点 int rank[N]; // 树的高度 // 初始化，假定节点编号是1~n void init(int n) { for (int i = 1; i <= n; i++){ p[i] = i; rank[i] = 0; } } // 返回x的祖宗节点 int find(int x) { if (p[x] != x) p[x] = find(p[x]); return p[x]; } // 合并x和y所在的两个集合： void union(int x, int y) { int px = find(x), py = find(y); if (rank[px] < rank[py]){ p[px] = py; rank[py] += rank[px]; } else { p[py] = px; rank[px] += rank[py]; } }\"]},\"203\":{\"h\":\"6.2 维护size的并查集\",\"t\":[\" int p[N], size[N]; // p[]存储每个点的祖宗节点 // size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量 // 返回x的祖宗节点 int find(int x) { if (p[x] != x) p[x] = find(p[x]); return p[x]; } // 初始化，假定节点编号是1~n for (int i = 1; i <= n; i ++ ) { p[i] = i; size[i] = 1; } // 合并a和b所在的两个集合： size[find(b)] += size[find(a)]; p[find(a)] = find(b);\"]},\"204\":{\"h\":\"6.3 维护到祖宗节点距离的并查集\",\"t\":[\" int p[N], d[N]; //p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离 // 返回x的祖宗节点 int find(int x) { if (p[x] != x) { int u = find(p[x]); d[x] += d[p[x]]; p[x] = u; } return p[x]; } // 初始化，假定节点编号是1~n for (int i = 1; i <= n; i ++ ) { p[i] = i; d[i] = 0; } // 合并a和b所在的两个集合： p[find(a)] = find(b); d[find(a)] = distance; // 根据具体问题，初始化find(a)的偏移量\"]},\"205\":{\"h\":\"7. 堆\",\"t\":[\"1、作用：维护一个数组集合\",\"2、堆是一棵（完全）二叉树，长得非常平衡，除最后一层节点，所有节点均不为空，最后一层节点从左向右排列，根节点小于等于左右两个子节点，即小根堆。\",\"3、存储：用一个一维数组存储树，下标从 1 开始。其中元素 x 的左儿子为 2x，x 的右儿子为 2x+1.\",\"4、5个基本操作\",\"heap 表示堆，size 表示大小\",\"1. 插入一个数 heap[++size] = x; up(size); 2. 求集合当中的最小值 heap[1]; 3. 删除最小值 heap[1] = heap[size]; size--; down(1); 4. 删除任意一个元素 heap[k] = heap[size]; size--; down(k); up(k); //down和up只会执行其中一个 5. 修改任意一个元素 heap[K] = x; down(k); up(k);\",\"// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1 // ph[k]存储第k个插入的点在堆中的位置 // hp[k]存储堆中下标是k的点是第几个插入的 int h[N], ph[N], hp[N], size; // 交换两个点，及其映射关系 void heap_swap(int a, int b) { swap(ph[hp[a]],ph[hp[b]]); swap(hp[a], hp[b]); swap(h[a], h[b]); } void down(int u) // 跟两个儿子比较大小 { // t表示该元素与它的左、右儿子相比最小的元素，初始化为它自身 int t = u; // 若左二子小于它，则最小的数为左二子 if (u * 2 <= size && h[u * 2] < h[t]) t = u * 2; // 若右儿子小于它，则最小的数为右儿子 if (u * 2 + 1 <= size && h[u * 2 + 1] < h[t]) t = u * 2 + 1; // 如果它本身不是最小的数，则往下沉，继续down()操作 if (u != t) { heap_swap(u, t); down(t); } } void up(int u) //只需要跟一个父亲比较大小就行 { // 如果比父节点大，就交换位置，上浮 while (u / 2 && h[u] < h[u / 2]) { heap_swap(u, u / 2); u >>= 1; //x /= 2 } } // O(n)建堆 for (int i = n / 2; i; i -- ) down(i);\"]},\"206\":{\"h\":\"8. 哈希表\"},\"207\":{\"h\":\"8.1 拉链法\",\"t\":[\"int h[N], e[N], ne[N], idx; // 向哈希表中插入一个数 void insert(int x) { //哈希函数离散化 int k = (x % N + N) % N; e[idx] = x; ne[idx] = h[k]; h[k] = idx ++ ; } // 在哈希表中查询某个数是否存在 bool find(int x) { int k = (x % N + N) % N; for (int i = h[k]; i != -1; i = ne[i]) if (e[i] == x) return true; return false; }\"]},\"208\":{\"h\":\"8.2 开放寻址法\",\"t\":[\"int h[N]; // 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置 int find(int x) { // 哈希函数 int k = (x % N + N) % N; while (h[k] != null && h[k] != x) { k++; // 如果到了末尾，那么再从头开始查找 if (k == N) k = 0; } return k; }\"]},\"209\":{\"h\":\"8.3 字符串哈希\",\"t\":[\"核心思想：将字符串看成 P 进制数，P 的经验值是 131 或 13331，取这两个值的冲突概率低 小技巧：取模的数用 2^64，这样直接用 unsigned long long 存储，溢出的结果就是取模的结果 typedef unsigned long long ULL; ULL h[N]; // h[k]存储字符串前k个字母的哈希值 ULL p[N]; // p[k]存储 P^k mod 2^64 // 初始化 p[0] = 1; for (int i = 1; i <= n; i ++ ) { h[i] = h[i - 1] * P + str[i]; p[i] = p[i - 1] * P; } // 计算子串 str[l ~ r] 的哈希值 ULL get(int l, int r) { return h[r] - h[l - 1] * p[r - l + 1]; }\"]},\"210\":{\"h\":\"9. C++ STL简介\",\"t\":[\"vector, 变长数组，倍增的思想 size() 返回元素个数 empty() 返回是否为空 clear() 清空 front()/back() push_back()/pop_back() begin()/end() [] 支持比较运算，按字典序 pair<int, int> first, 第一个元素 second, 第二个元素 支持比较运算，以first为第一关键字，以second为第二关键字（字典序） string, 字符串 size()/length() 返回字符串长度 empty() clear() substr(起始下标，(子串长度)) 返回子串 c_str() 返回字符串所在字符数组的起始地址 queue, 队列 size() empty() push() 向队尾插入一个元素 front() 返回队头元素 back() 返回队尾元素 pop() 弹出队头元素 priority_queue, 优先队列，默认是大根堆 size() empty() push() 插入一个元素 top() 返回堆顶元素 pop() 弹出堆顶元素 定义成小根堆的方式：priority_queue<int, vector<int>, greater<int>> q; stack, 栈 size() empty() push() 向栈顶插入一个元素 top() 返回栈顶元素 pop() 弹出栈顶元素 deque, 双端队列 size() empty() clear() front()/back() push_back()/pop_back() push_front()/pop_front() begin()/end() [] set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列，本身就是有序的，默认按 key 排序 size() empty() clear() begin()/end() ++, -- 返回前驱和后继，时间复杂度 O(logn) set/multiset insert() 插入一个数 find() 查找一个数 没找到则返回end() count() 返回某一个数的个数 erase() (1) 输入是一个数x，删除所有x O(k + logn) (2) 输入一个迭代器，删除这个迭代器 (3) 例如：s.erase(unique(s.begin(), d.end()), s,end()) 将一个容器中重复的元素删除，对字符串也适用 lower_bound()/upper_bound() lower_bound(x) 返回大于等于x的最小的数的迭代器 upper_bound(x) 返回大于x的最小的数的迭代器 map/multimap insert() 插入的数是一个pair erase() 输入的参数是pair或者迭代器 find() 用 first 和 second 查找每个键值对的元素 [] 注意multimap不支持此操作。 时间复杂度是 O(logn) lower_bound()/upper_bound() unordered_set, unordered_map, unordered_multiset, unordered_multimap, 都可以是‘哈希表’ 和上面类似，增删改查的时间复杂度是 O(1) 不支持 lower_bound()/upper_bound()， 迭代器的++，-- bitset, 圧位 bitset<10000> s; ~, &, |, ^ >>, << ==, != [] count() 返回有多少个1 any() 判断是否至少有一个1 none() 判断是否全为0 set() 把所有位置成1 set(k, v) 将第k位变成v reset() 把所有位变成0 flip() 等价于~ flip(k) 把第k位取反\"]},\"211\":{\"h\":\"10. 常用库函数\",\"t\":[\"1. reverse 翻转\",\"翻转一个 vector ：\",\"reverse(a.begin(), a.end());\",\"翻转一个数组，元素存放在下标 1 ~ n ：\",\"reverse(a + 1, a + n + 1);\",\"2. unique 去重\",\"返回去重（只去掉相邻的相同元素）之后的尾迭代器（或指针），仍然为前闭后开，即这个迭代器是去重之后末尾元素的下一个位置。该函数常用于离散化，利用迭代器（或指针）的减法，可计算出去重后的元素个数。\",\"把一个 vector 去重：\",\"int m = unique(a.begin(), a.end()) – a.begin();\",\"把一个数组去重，元素存放在下标 1 ~ n：\",\"int m = unique(a + 1, a + n + 1) – (a + 1);\",\"3. random_shuffle 随机打乱： 用法与 reverse 相同。\",\"4. sort 排序：\",\"对两个迭代器（或指针）指定的部分进行快速排序。可以在第三个参数传入定义大小比较的函数，或者重载 “小于号” 运算符。\",\"把一个 int 数组（元素存放在下标 1 ~ n ）从大到小排序，传入比较函数：\",\"int a[MAX_SIZE]; bool cmp(int a, int b) { return a > b; } sort(a + 1, a + n + 1, cmp);\",\"从大到小排序需要加入第三个参数：\",\"sort(a.begin(), a.end(), greater<int>());\",\"对自定义的结构体 vector 排序，重载 \\\"小于号\\\" 运算符：\",\"struct node { int id, x, y; }; vector<node> a; bool operator < (const node &a, const node &b) { return a.x < b.x || a.x == b.x && a.y < b.y; } sort(a.begin(), a.end());\",\"5. lower_bound / upper_bound 二分：\",\"lower_bound 的第三个参数传入一个元素 x，在两个迭代器（指针）指定的部分上执行二分查找，返回指向第一个大于等于 x 的元素的位置的迭代器（指针）。\",\"upper_bound 的用法和 lower_bound 大致相同，唯一的区别是查找第一个大于 x 的元素。当然，两个迭代器（指针）指定的部分应该是提前排好序的。\",\"在有序 int 数组（元素存放在下标 1 ~ n ）中查找大于等于 x 的最小整数的下标：\",\"int i = lower_bound(a + 1, a + 1 + n, x) - a;\",\"在有序 vector<int> 中查找小于等于 x 的最大整数（假设一定存在）：\",\"int y = *--upper_bound(a.begin(), a.end(), x);\",\"找不到则返回最后一个元素的下标+1，是越界的。\"]},\"212\":{\"c\":[\"模板\",\"数据结构\"]},\"213\":{\"h\":\"贪心\"},\"214\":{\"h\":\"1. 区间问题\"},\"215\":{\"h\":\"1.1 区间选点\",\"t\":[\"给定 N个闭区间 ，请你在数轴上选择尽量少的点，使得每个区间内至少包含一个选出的点。 输出选择的点的最小数量。\",\"#include <iostream> #include <algorithm> using namespace std; const int N = 1e5 + 10; struct node { int l, r; bool operator < (const node &W) const { return r < W.r; } } arr[N]; int main() { int n; cin >> n; for (int i = 1; i <= n; i++) cin >> arr[i].l >> arr[i].r; //按右端点从小到大排序 sort(arr + 1, arr + 1 + n); int ans = 0; int R = -2e9; //R表示上一连续区间的最右端的点 for (int i = 1; i <= n; i++) { if (arr[i].l > R) //如果不能覆盖掉右端点，则点数+1，更新右端点 { ans++; R = arr[i].r; } } cout << ans << endl; return 0; }\"]},\"216\":{\"h\":\"1.2 最大不相交区间数量\",\"t\":[\"#include <iostream> #include <algorithm> using namespace std; const int N = 1e5 + 10; struct node { int l, r; bool operator < (const node & W) const { return l < W.l; } } arr[N]; int main() { int n; cin >> n; for (int i = 1; i <= n; i++) cin >> arr[i].l >> arr[i].r; sort(arr + 1, arr + 1 + n); int res = 1, R = arr[1].r; for (int i = 2; i <= n; i++){ if (arr[i].l <= R) R = min(R, arr[i].r); else { res++; R = arr[i].r; } } cout << res << endl; return 0; }\"]},\"217\":{\"h\":\"1.3 区间分组\",\"t\":[\"给定 N个闭区间 ，要求分成若干组，使得每组内部区间两两之间没有交集，求分成的最小组数。\",\"#include <iostream> #include <algorithm> #include <queue> using namespace std; const int N = 1e5 + 10; struct Range { int l, r; //重载小于运算符，按左端点从小到大排序 bool operator < (const Range &W) const { return l < W.l; } } Range[N]; int main() { int n; cin >> n; for (int i = 0; i < n; i++) cin >> Range[i].l >> Range[i].r; sort(Range, Range + n); //用一个小根堆来维护所有组的右端点 priority_queue<int, vector<int>, greater<int>> heap; for (int i = 0; i < n; i++){ auto t = Range[i]; if (heap.empty() || heap.top() >= t.l) //放不进去则新开一组 heap.push(t.r); else { heap.pop(); heap.push(t.r); //放进去并更新右端点 } } cout << heap.size() << endl; return 0; }\"]},\"218\":{\"h\":\"1.4 区间覆盖\",\"t\":[\"给定 N 个闭区间，以及一个线段区间，请你选择尽量少的区间，将指定线段区间完全覆盖。\",\"#include <iostream> #include <algorithm> using namespace std; const int N = 1e5 + 10; struct Range { int l, r; bool operator < (const Range &W) const { return l < W.l; } } Range[N]; int main() { int n; int L, R; cin >> L >> R; cin >> n; for (int i = 0; i < n; i++) cin >> Range[i].l >> Range[i].r; sort(Range, Range + n); int res = 0; bool f = false; for (int i = 0; i < n; ){ //依次遍历每个区间 int j = i, r = -2e9; //j表示第几个区间 //遍历所有左端点在L的左边的区间，选出右端点最大的 while (j < n && Range[j].l <= L){ r = max(r, Range[j].r); j++; } if (r < L){ //如果所有右端点都小于L，则无解 res = -1; break; } res++; if (r >= R){ //循环出口 f = true; break; } //更新端点和遍历的区间 L = r; i = j; } if (!f) res = -1; cout << res << endl; return 0; }\"]},\"219\":{\"h\":\"1.5 区间合并\",\"t\":[\"#include <iostream> #include <cstdio> #include <algorithm> #include <vector> #define PII pair<int, int> using namespace std; const int N = 1e5 + 5; int n; vector <PII> nums, ans; void merge(vector<PII> &nums){ //按左端点排序 sort(nums.begin(), nums.end()); //l代表区间左端点，r代表区间右端点 int l = -2e9, r = -2e9; for (auto num : nums){ //如果两区间无法合并 if (r < num.first){ if (l != -2e9) ans.push_back({l, r});//将新的区间放入ans数组中 l = num.first, r = num.second;//更新区间 } //若两区间部分存在交集，小的合并到大的中 else r = max(r, num.second); } if (l != -2e9) ans.push_back({l, r}); } int main() { cin >> n; for (int i = 0; i < n; i++){ int l, r; cin >> l >> r; nums.push_back({l, r}); } merge(nums); cout << ans.size() << endl; return 0; }\"]},\"220\":{\"c\":[\"模板\",\"贪心\"]},\"221\":{\"h\":\"B站评论系统架构设计\",\"t\":[\"转载自哔哩哔哩技术，原文链接：B站评论系统架构设计\"]},\"222\":{\"h\":\"01 背景\",\"t\":[\"维基百科对「评论」的定义是：评论是人们对出版物、服务或公司的评估，例如电影（电影评论）、电子游戏（视频游戏评论）、音乐制作（对作品录音作品的音乐评论）、图书（书评）、硬件，如汽车、家用电器或电子计算机、商业软件、活动或表演，例如音乐会、戏剧、音乐剧、舞蹈或艺术展览。除了批判性评论之外，评论的作者还可以对作品进行内容分级以表明其相对价值。\",\"在B站，UP主每天都会发布海量的视频、动态、专栏等内容，随之而来的是弹幕和评论区的各种讨论。播放器中直接滚动播放的弹幕，如同调味剂，重在提升视频观看体验；而点进评论区，相对而言评论文本更长，内容的观点、形式都更丰富，更像是饭后甜点。\",\"随着业务不断发展，B站的评论系统逐渐组件化、平台化；通过持续演进架构设计，管理不断上升的系统复杂度，从而更好地满足各类用户的需求。\"]},\"223\":{\"h\":\"02 基础功能模块\",\"t\":[\"评论的基础功能模块是相对稳定的。\",\"1. 发布评论：支持无限盖楼回复。\",\"2. 读取评论：按照时间、热度排序；显示评论数、楼中楼等。\",\"3. 删除评论：用户删除、UP主删除等。\",\"4. 评论互动：点赞、点踩、举报等。\",\"5. 管理评论：置顶、精选、后台运营管理（搜索、删除、审核等）。\",\"结合B站以及其他互联网平台的评论产品特点，评论一般还包括一些更高阶的基础功能：\",\"1. 评论富文本展示：例如表情、@、分享链接、广告等。\",\"2. 评论标签：例如UP主点赞、UP主回复、好友点赞等。\",\"3. 评论装扮：一般用于凸显发评人的身份等。\",\"4. 热评管理：结合AI和人工，为用户营造更好的评论区氛围。\"]},\"224\":{\"h\":\"03 架构设计\",\"t\":[\"评论是主体内容的外延。因此一般会作为一个独立系统拆分设计。\"]},\"225\":{\"h\":\"3.1 架构设计 - 概览\",\"t\":[\"图片\"]},\"226\":{\"h\":\"3.2 架构设计 - reply-interface\",\"t\":[\"reply-interface 是评论系统的接入层，主要服务于两种调用者：一是客户端的评论组件，二是基于评论系统做二次开发或存在业务关联的其他业务后端。\",\"面向移动端/WEB场景，设计一套基于视图模型的API，利用客户端提供的布局能力，BFF层负责组织业务数据模型，并转换为视图模型，编排后下发给客户端。\",\"面向服务端场景，设计的API需要体现清晰的系统边界，最小可用原则对外提供数据，同时做好安全校验和流量控制。\",\"图片\",\"对评论业务来说，业务数据模型是最为复杂的。B站评论系统历史悠久，承载的功能模块相当之多，其中最核心的是发布类接口以及列表类接口，一写一读，数据字段多、依赖服务多、调用关系复杂，特别是一些依赖的变更，容易造成整个系统的腐化。\",\"因此，我们将整个业务数据模型组装，分为两个步骤，一是服务编排，二是数据组装。服务编排拆分为若干个层级，同一层级的可以并发调用，前置依赖较多的可以流水线调用，结构性提升了复杂调用场景下的接口性能下限；针对不同依赖服务所提供的 SLA 不同，设置不同的降级处理、超时控制和服务限流方案，保证少数弱依赖抖动甚至完全不可用情况下评论服务可用。数据组装在服务编排之后执行，例如在批量查询评论发布人的粉丝勋章数据之后，将其转换、组装到各个评论卡片之中。\"]},\"227\":{\"h\":\"3.3 架构设计 - reply-admin\",\"t\":[\"评论管理服务层，为多个内部管理后台提供服务。运营人员的数据查询具有：\",\"1. 组合、关联查询条件复杂；\",\"2. 刚需关键词检索能力；\",\"3. 写后读的可靠性与实时性要求高等特征。\",\"此类查询需求，ES 几乎是不二选择。但是由于业务数据量较大，需要为多个不同的查询场景建立多种索引分片，且数据更新实时性不高。因此，我们基于 ES 做了一层封装，提供统一化的数据检索能力，并结合在线数据库刷新部分实时性要求较高的字段。\",\"图片\"]},\"228\":{\"h\":\"3.4 架构设计 - reply-service\",\"t\":[\"评论基础服务层，专注于评论功能的原子化实现，例如查询评论列表、删除评论等。一般来说，这一层是较少做业务逻辑变更的，但是需要提供极高的可用性与性能吞吐。因此，reply-service 集成了多级缓存、布隆过滤器、热点探测等性能优化手段。\",\"图片\"]},\"229\":{\"h\":\"3.5 架构设计 - reply-job\",\"t\":[\"评论异步处理层，主要有两个职责：\",\"1. 与 reply-service 协同，为评论基础功能的原子化实现，做架构上的补充。\",\"为什么基础功能的原子化实现需要架构的补充呢？最典型的案例就是缓存的更新。一般采用 Cache Aside 模式，先读缓存，再读DB；缓存的重建，就是读请求未命中缓存穿透到DB，从DB读取到内容之后反写缓存。这一套流程对外提供了一个原子化的数据读取功能。但由于部分缓存数据项的重建代价较高，比如评论列表（由于列表是分页的，重建时会启用预加载），如果短时间内多个服务节点的大量请求缓存未命中，容易造成DB抖动。解决方案是利用消息队列，实现「单个评论列表，只重建一次缓存」。归纳而言，所谓架构上的补充，即是「用单线程解决分布式无状态服务的共性问题」。另一方面，reply-job 还作为数据库 binlog 的消费者，执行缓存的更新操作。\",\"图片\",\"2. 与 reply-interface 协同，为一些长耗时/高吞吐的调用做异步化/削峰处理。\",\"诸如评论发布等操作，基于安全/策略考量，会有非常重的前置调用逻辑。对于用户来说，这个长耗时几乎是不可接受的。同时，时事热点容易造成发评论的瞬间峰值流量。因此，reply-interface 在处理完一些必要校验逻辑之后，会通过消息队列送至 reply-job 异步处理，包括送审、写DB、发通知等。同时，这里也利用了消息队列的「有序」特性，将单个评论区内的发评串行处理，避免了并行处理导致的一些数据错乱风险。那么异步处理后用户体验是如何保证的呢？首先是C端的发评接口会返回展示新评论所需的数据内容，客户端据此展示新评论，完成一次用户交互。若用户重新刷新页面，因为发评的异步处理端到端延迟基本在2s以内，此时所有数据已准备好，不会影响用户体验。\",\"一个有趣的问题是，早年间评论显示楼层号，楼层号实际是计数器，且在一个评论区范围内不能出现重复。因此，这个楼层发号操作必须是在一个评论区范围内串行的（或者用更复杂的锁实现），否则两条同时发布的评论，获取的楼层号就是重复的。而分布式部署+负载均衡的网关，处理发评论请求是无法实现这种串行的，因此需要放到消息队列中处理。\"]},\"230\":{\"h\":\"04 存储设计\"},\"231\":{\"h\":\"4.1 数据库设计\",\"t\":[\"结合评论的产品功能要求，评论需要至少两张表：首先是评论表，主键是评论 id，关键索引是评论区 id；其次是评论区表，主键是评论区 id，平台化之后增加一个评论区 type 字段，与评论区 id 组成一个“联合主键”。\",\"由于评论内容是大字段，且相对独立、很少修改，因此独立设计第3张表。主键也是评论 id。\",\"评论表和评论区表的字段主要包括4种：\",\"1. 关系类，包括发布人、父评论等，这些关系型数据是发布时已经确定的，基本不会修改。\",\"2. 计数类，包括总评论数、根评论数、子评论数等，一般会在有评论发布或者删除时修改。\",\"3. 状态类，包括评论/评论区状态、评论/评论区属性等，评论/评论区状态是一个枚举值，描述的是正常、审核、删除等可见性状态；评论/评论区属性是一个整型的 bitmap，可用于描述评论/评论区的一些关键属性，例如UP主点赞等。\",\"4. 其他，包括 meta 等，可用于存储一些关键的附属信息。\",\"评论回复的树形关系，如下图所示：\",\"图片\",\"以评论列表的访问为例，我们的查询SQL可能是（已简化）：\",\"1. 查询评论区基础信息：\",\"SELECT * FROM subject WHERE obj_id=? AND obj_type=?\",\"2. 查询时间序一级评论列表：\",\"SELECT id FROM reply_index WHERE obj_id=? AND obj_type=? AND root=0 AND state=0 ORDER BY floor=? LIMIT 0,20\",\"3. 批量查询根评论基础信息：\",\"SELECT * FROM reply_index,reply_content WHERE rpid in (?,?,...)\",\"4. 并发查询楼中楼评论列表：\",\"SELECT id FROM reply_index WHERE obj_id=? AND obj_type=? AND root=? ORDER BY like_count LIMIT 0,3\",\"5. 批量查询楼中楼评论基础信息：\",\"SELECT * FROM reply_index,reply_content WHERE rpid in (?,?,...)\",\"产品形态上，单个页面只有二级列表（更多嵌套层次，对应嵌套多次点击），且评论计数也只有两级。若回复数也要无限套娃，则一条子评论的发布，需要级联更新所有的父评论的回复数，当前的数据库设计不能满足该需求。\",\"再者，产品侧定义是，若一级评论被删除，其回复也等价于全部删除，若直接删除，此时也可能出现写放大。因此结合查询逻辑，可以不对回复做更新操作，但是评论区的计数更新操作，需要多减去该一级评论的回复数。\",\"评论系统对数据库的选型要求，有两个基本且重要的特征：\",\"1. 必须有事务；\",\"2. 必须容量大。\",\"一开始，我们采用的是MySQL分表来满足这两个需求。但随着B站社区破圈起量，原来的MySQL分表架构很快到达存储瓶颈。于是从2020年起，我们逐步迁移到TiDB，从而具备了水平扩容能力。\"]},\"232\":{\"h\":\"4.2 缓存设计\",\"t\":[\"我们基于数据库设计进行缓存设计，选用 redis 作为主力缓存。主要有3项缓存：\",\"1. subject，对应于「查询评论区基础信息」，redis string 类型，value 使用JSON序列化方式存入。\",\"2. reply_index，对应于「查询xxx评论列表」，redis sorted set 类型。member 是评论 id，score 对应于 ORDER BY 的字段，如 floor、like_count 等。\",\"3. reply_content，对应于「查询xxx评论基础信息」，存储内容包括同一个评论 id 对应的 reply_index 表和 reply_content 表的两部分字段。\",\"reply_index 是一个 sorted set，为了保证数据完整性，必须要判定 key 存在才能增量追加。由于存在性判定和增量追加不是原子化的，判定存在后、增量追加前可能出现缓存过期，因此选用 redis 的 EXPIRE 命令来执行存在性判定，避免此类极端情况导致的数据缺失。此外，缓存的一致性依赖 binlog 刷新，主要有几个关键细节：\",\"1. binlog 投递到消息队列，分片 key 选择的是评论区，保证单个评论区和单个评论的更新操作是串行的，消费者顺序执行，保证对同一个 member 的 zadd 和 zrem 操作不会顺序错乱。\",\"2. 数据库更新后，程序主动写缓存和 binlog 刷缓存，都采用删除缓存而非直接更新的方式，避免并发写操作时，特别是诸如 binlog 延迟、网络抖动等异常场景下的数据错乱。那大量写操作后读操作缓存命中率低的问题如何解决呢？此时可以利用 singleflight 进行控制，防止缓存击穿。\"]},\"233\":{\"h\":\"05 可用性设计\"},\"234\":{\"h\":\"5.1 写热点与读热点\",\"t\":[\"2020年的腾讯的辣椒酱不香了[1]，引发一场评论区的狂欢。由于上文所述各类「评论区维度的串行」，当时评论发布的吞吐较低，面对如此大的流量出现了严重延迟。\",\"图片\",\"痛定思痛，我们剖析瓶颈并做了如下优化：\",\"1. 评论区评论计数的更新，先做内存合并再更新，可以减少热点场景下的SQL执行条数；评论表的插入，改成批量写入。\",\"2. 非数据库写操作的其他业务逻辑，拆分为前置和后置两部分，从数据写入主线程中剥离，交由其他的线程池并发执行。\",\"改造后，系统的并发处理能力有了极大提升，同时支持配置并行度/聚合粒度，在吞吐方面具备更大的弹性，热点评论区发评论的TPS提升了10倍以上。\",\"图片\",\"除了写热点，评论的读热点也有一些典型的特征：\",\"1. 由于大量接口都需要读取评论区基础信息，存在读放大，因此该操作是最先感知到读热点存在的。\",\"2. 由于评论业务的下游依赖较多，且多是批量查询，对下游来说也是读放大。此外，很多依赖是体量相对小的业务单元，数据稀疏，难以承载评论的大流量。\",\"3. 评论的读热点集中在评论列表的第一页，以及热评的热评。\",\"4. 评论列表的业务数据模型也包含部分个性化信息。\",\"因此，我们利用 《直播场景下 高并发的热点处理实践》[5] 一文所使用的SDK，在读取评论区基础信息阶段探测热点，并将热点标识传递至BFF层；BFF层实现了页面请求级的热点本地缓存，感知到热点后即读取本地缓存，然后再加载个性化信息。\",\"图片\",\"热点探测的实现基于单机的滑动窗口+LFU，那么如何定义、计算相应的热点条件阈值呢？\",\"首先，我们进行系统容量设计，列出容量计算的数学公式，主要包括各接口QPS的关系、服务集群总QPS与节点数的关系、接口QPS与CPU/网络吞吐的关系等；然后，收集系统内部以及相应依赖方的一些的热点相关统计信息，通过前面列出的公式，计算出探测数据项的单机QPS热点阈值。最后通过热点压测，来验证相应的热点配置与代码实现是符合预期的。\"]},\"235\":{\"h\":\"5.2 冗余与降级\",\"t\":[\"上文提到，评论基础服务层集成了多级缓存，在上一级缓存未命中或者出现网络错误后，可以视具体场景要求降级至下一级缓存。各级缓存可能有功能上的略微差异，但都能保障用户的基础体验。\",\"此外，评论系统是一个同城读双活的架构。数据库与缓存均是双机房独立部署的，均支持多副本，具备水平扩容的弹性。针对双机房架构下特有的副机房数据延迟故障，支持入口层切流/跨机房重试/应用层补偿，尽可能保证极端情况下用户无感。\",\"在功能层面，我们做了重要级别划分，把相应的依赖划分为强依赖（如审核）、弱依赖（如粉丝勋章）。对于弱依赖，我们一方面在异常情况下坚决限流熔断，另一方面也通过超时控制、请求预过滤、优化调用编排甚至技术方案重构等方式持续优化提升非核心功能的可用性，为业务在评论区获得更好的曝光展现。\"]},\"236\":{\"h\":\"06 安全性设计\",\"t\":[\"评论系统的安全性设计可以分为「数据安全」与「舆论安全」。\"]},\"237\":{\"h\":\"6.1 数据安全\",\"t\":[\"除了数据安全法所要求的以外，评论系统的数据安全还包括「合规性要求」。评论数据合规，一方面是审核和风控，另一方面对工程侧的要求主要是「状态一致性」。例如，有害评论被删除后，在客户端不能展现，也不能通过API等对外暴露。这就对数据一致性，包括缓存，提出了较高要求。在设计层面主要有两方面实践：\",\"1. 数据读写阶段均考虑了一致性风险，严格保证时序性。\",\"2. 对各类数据写操作，定义了优先级，避免高优先级操作被低优先级操作覆盖，例如审核删除的有害评论，不能被其他普通运营人员/自动化策略放出。\",\"3. 通过冗余校验，避免风险数据外泄。例如评论列表的露出，读取 sorted set 中的 id 列表后，还需要校验对应评论的状态，是可见态才允许下发。\"]},\"238\":{\"h\":\"6.2 舆论安全\",\"t\":[\"舆论安全问题更为泛化。接口错误导致用户操作失败、关闭评论区、评论计数不准，甚至新功能上线、用户不满意的评论被顶到热评前排等问题均可能引发舆情问题。\",\"1. 不对用户暴露用户无法处理和不值得处理的错误。 例如评论点赞点踩、某个数据项读取失败这一类的轻量级操作，不值得用户重试，此时告知用户操作失败也没有意义。系统可以考虑自行重试，甚至直接忽略。\",\"2. 优化产品功能及其技术实现，例如评论计数、热评排序等。\",\"计数不一致的根源，是数据冗余造成的。 一般出于性能考虑，会在评论列表以外，给这个列表记录一个长度。也就是用 SELECT count FROM subject，代替 SELECT count(*) FROM reply_index。基于这种冗余设计，count 字段大部分都是增量更新，即+1、-1，是容易出现误差累积的。\",\"1. 并发事务导致的「写倾斜（write skew）」，例如依据评论的状态来做评论区的计数更新。在A事务中读取的评论状态，可能在B事务中被修改，此时A事务计数更新的前提被破坏，也就造成了错误的增量更新。此时计数可能偏大或偏小。\",\"2. 运行时异常、脏数据或者非常规的展示侧控制，导致部分数据被过滤。此时计数可能偏大。\",\"3. 计数冗余同步至其他系统，例如视频表的评论数，延迟导致了过程不一致，同步失败则直接导致最终不一致。\",\"1. 事务加锁。综合评估而言，对性能的影响较大，特别是存在“锁放大”，越需要加锁的场景，越容易出现“锁冲突”。\",\"2. 串行化。将评论区的所有操作，抽象为一个排队的 Domain Events，串行处理，不容易出错。那为什么不能按照评论维度进行拆分，更加不容易出现评论区维度的热点？因为上文提到，删除一级评论时，实际也会从计数上删除其回复；删除二级评论时，也会更新其根评论的计数。多个评论的操作相互影响，因此按照评论维度进行拆分仍然存在并发事务问题。\"]},\"239\":{\"h\":\"07 热评设计\"},\"240\":{\"h\":\"7.1 什么是热评\",\"t\":[\"早期的热评，实际就是按照评论点赞数降序。后来衍生了更为复杂的热评：既包括类似「妙评」这种用户推荐、运营精选且带 logo 突出展示的产品形态，也包括各类热评排序算法，且热评排序算法应用场景也不仅局限于评论主列表的热度序，还包括楼中楼（外露子评论）、动态外露评论等。\",\"热评排序逻辑一般包括点赞数、回复数、内容相关、负反馈数、“时间衰退因子”、字数加权、用户等级加权等等。如何在B站评论区脱颖而出？[7]一文从内容运营层面，介绍了什么样的评论更容易上热评前排。\",\"咬文嚼字来说，我们对「热」的理解，大致分为几个阶段：\",\"1. 点赞高，就代表热度高。→ 解决热评的有无问题\",\"2. 基于用户正负样本投票的，加权平均高，就代表热度高。→ 解决高赞高踩的负面热评问题\",\"3. 短时间内点赞率高，就代表热度高。→ 解决高赞永远高赞的马太效应\",\"4. 热评用户流量大，社区影响也大。要权衡社会价值观引导、公司战略导向、商业利益、UP主与用户的「情绪」等。→ 追求用户价值平衡\"]},\"241\":{\"h\":\"7.2 挑战与应对\",\"t\":[\"显然，我们在不同阶段对热评的理解，在系统设计上也提出了不同层面的要求：\",\"1. 按照点赞绝对值排序，即要实现 ORDER BY like_count 的分页排序。点赞数是一个频繁更新的值，MySQL，特别是TiDB，由于扫描行数约等于 OFFSET，因此在 OFFSET 较大时查询性能特别差，很难找到一个完美的优化方案。此外，由于 like_count 的分布可能出现同一个值堆叠多个元素，比如评论区所有的评论都没有赞，我们更多依赖 redis 的 sorted set 来执行分页查询，这就要求缓存命中率要非常高。\",\"2. 按照正负样本加权平均的，即Reddit：威尔逊排序[6]，到这个阶段，数据库已经无法实现这样复杂的 ORDER BY，热评开始几乎完全依赖 sorted set 这样的数据结构，预先计算好排序分数并写入。于是在架构设计上，新增了 feed-service 和 feed-job 来支撑热评列表的读写。\",\"图片\",\"3. 按照点赞率排序，需要实现点赞率的近实时计算。点赞率=点赞数/曝光数，曝光的数据来源是客户端上报的展现日志，量级非常大，可以说是一个写多读少的场景：只有重算排序的时候才会读取曝光数。\",\"4. 追求用户价值平衡，需要处理各种细分场景下的差异化需求。热评排序与 feed 排序很像，但也有一点根本性差异：feed 排序我们往往都希望是个性化的，每个人看到的都不相同，但评论往往不会如此激进，一般来说会希望大家看到的评论排序都大致相同。由于排序问题的解决方案是探索型的，因此系统设计层面需要提供更多元、更易扩展的工程化能力，包括算法和策略的快速迭代、实验能力等，并提升整个热评模块的可观测水平，监控完善、数据报表丰富、排序过程可解释等等。在架构上，新增了 strategy-service 和 strategy-job 来承担这部分策略探索型业务。\",\"此外，数据量级规模的增加，也对系统的吞吐能力提出了更高要求：不管热评的算法如何变化，一般来说，热评列表都需要能够访问到全部评论，且基本维持相同的热评排序逻辑。在评论数过百万甚至千万的评论区，热评排序的挑战点主要在于：\",\"1. 大 key 问题：例如单个 sorted set 过大，读写性能都受影响（时间复杂度的基数可以认为都是O(logN)）；全量更新时，还可能遇到 redis pipeline 的瓶颈。\",\"2. 实时性放大存储压力：多样化的数据源，对特征的导入与更新都提出了挑战，需要支持较丰富的数据结构，和尽可能高的写吞吐（想象一下曝光数作为排序特征的变态要求）；与推荐排序不同，热评排序是全排序，此时需要读取全部评论的全部特征，查询压力也会非常大。\",\"这一阶段，我们仍然在持续优化，在工程落地层面尽可能还原理想的排序算法设计，保障用户的热评浏览体验。目前形成的系统架构总体如下图所示：\",\"图片\",\"图示的「评论策略层」，负责建立一套热评调控体系化能力，通过召回机制来实现想要的“balance“。即先通过策略工程，召回一批应该沉底的不良评论或者应该进前排的优秀评论，然后在排序分计算阶段根据召回结果实现这样的效果。\",\"这样做的好处是，可以保留一套通用的底层排序算法，然后通过迭代细分场景下的召回策略，来实现差异化评论排序的平衡。\",\"召回策略的工程设计，按照分层设计的原则拆分为3个部分：\",\"1. 因子机。主要职责是维护策略所需的全部「因子」，包括一些已有的在线/离线数据，也包括为了策略迭代而需要新开发的流式的窗口聚合数据。因子机的重难点是需要管理各种数据获取的拓扑关系，以及通过缓存来保护下游（数据提供方很难也不应该承受热评业务的巨大流量）。所有的因子可以构成一个有向无环图，通过梳理依赖关系和推导计算，实现并发提效、减少冗余。\",\"2. 规则机。实现了一套声明式规则语法，可以直接引用因子机预定义的因子，结合各种逻辑算子构成一个规则表达式。规则机执行命中后，会向下游传递预先声明的召回决策，例如排序提权。\",\"3. 召回处理中心。这一层的职责就是接收规则机返回的各种决策并执行，需要处理不同决策的优先级PK、不同规则的决策叠加作用、决策豁免等。\",\"热评排序涉及的特征，是多数据源的，数据更新方式、更新频率、查询性能也天差万别。因此我们针对数据源的特点做了多级缓存，通过多级冗余与跨级合并，提升了特征读取的稳定性与性能上限。当然，其中的数据实时性、一致性、可用性，仍然处于一个动态权衡取舍的过程。举个例子，曝光数使用 redis 计数器维护，受限于成本并未持久化；各类静态模型分存在4到5层冗余。此外，还应用了内部稀疏数据的 bloom-filter 查询、数据局部性集中与散列相结合、近实时大窗口聚合计数等多种性能优化手段。需要指出的是，召回和排序两阶段都需要查询因子/特征，得以复用「因子机」，完成各个特征的差异化实现与维护。\",\"热评排序最关键的计算模块，首先是引入了自适应的冷却算法，根据评论区的评论数、活跃程度等，对重算排序的收益进行预估，拦截了大部分低价值重排请求。其次在全量打分排序阶段，「排序策略」贯穿上下文，既支持传统的静态的经验算分公式，也支持动态的模型打分，支撑AI模型的快速部署快速迭代。通过组合与继承，支持排序策略的叠加、微调，结合评论网关层的排序策略路由，可实现各类定制化排序，完成热评排序系统的平台化。\",\"除了大家点开评论区看到的“热评”，在楼中楼、动态外露评论、评论详情页等类似场景，我们同样应用了这套热评系统，在工程上实现了架构的统一。\"]},\"242\":{\"h\":\"7.3 愿景与规划\",\"t\":[\"评论区作为B站社区的重要组成部分，致力于为中文互联网提供一个和谐、有趣的交流环境。另一方面，B站评论区流量巨大，所具备的商业化价值也是需要持续探索的。不管是氛围还是商业，都具有非常强的头部效应。因此，热评，尤其是热评的头部，我们会持续优化产品功能，持续探索排序策略，期望能为用户带来更好的体验：用户可以在这里看到自己喜欢的评论内容，有知识、有温度，也可以看到一些多元化的观点；可以炫一下自己的装扮，也可以守护新人UP主成长；可以倾诉自己的故事，也可以发一条友善的评论，更可以来一个段子，逗乐每一个在互联网里冲浪的有缘人。\",\"参考资料：\",\"[1] https://t.bilibili.com/406920470238773354?spm_id_from=333.999.0.0\",\"[2] 维基百科：评论 (https://zh.wikipedia.org/wiki/%E8%A9%95%E8%AB%96)\",\"[3] 百度评论中台的设计与探索 (https://juejin.cn/post/7108973163333025805)\",\"[4] 腾讯老干妈大瓜背后，B站竟成为最大赢家 (https://36kr.com/p/783469249310599)\",\"[5] 直播场景下 高并发的热点处理实践 (https://www.bilibili.com/read/cv15278397?from=search&spm_id_from=333.337.0.0)\",\"[6] Evan Miller: How Not To Sort By Average Rating (https://www.evanmiller.org/how-not-to-sort-by-average-rating.html)\",\"[7] 如何在B站评论区脱颖而出？\",\"[8] 如何对文章下面的评论做排序（2019年版）(https://zhuanlan.zhihu.com/p/57021517)\"]},\"243\":{\"c\":[\"架构设计\"]},\"244\":{\"c\":[\"评论系统\"]},\"245\":{\"h\":\"评论系统功能和架构设计\",\"t\":[\"转载自stormspirit，原文链接：评论系统功能和架构设计\",\"本周会以 B 站的评论系统为样本，来介绍该系统的功能、架构、存储、可用性设计等。\",\"首先在设计一个评论系统之前，我们必须要对这个系统的功能以及定位有一个清晰的了解。\"]},\"246\":{\"h\":\"功能模块\",\"t\":[\"架构设计最重要的就是 「理解整个产品体系在系统中的定位。搞清楚系统背后的背景，才能做出最佳的设计和抽象。不要做需求的翻译机，先理解业务背后的本质，事情的初衷。」 深入到业务里面，了解业务本身的本质。成为某个业务领域的专家，对这个业务的系统有比较深的理解，才能设计出一个全面的架构。\",\"评论系统，我们往小里做就是视频评论系统，往大了做就是评论平台，可以接入各种业务形态，比如在漫画、文章等业务下也能接入一样的评论系统。再往大做可以是一个评论中台，只需要设置不同的评论策略，比方说先审后发或者先发后审，或者高于多少等级的用户才能发表评论，这样不同的业务只需要设计自己的策略接入评论系统即可。\",\"评论系统可能有的功能：\",\"发布评论: 支持回复楼层、楼中楼。\",\"读取评论: 按照时间、热度排序。\",\"删除评论: 用户删除、作者删除。\",\"管理评论: 作者置顶、后台运营管理(搜索、删除、审核等)。\",\"在前期花足够时间去反复思考设计，会减少之后大量的返工。「在动手设计前，反复思考，真正编码的时间只有5%。」\"]},\"247\":{\"h\":\"架构设计\",\"t\":[\"图片\",\"如上图，一共有以下模块：\",\"网关层：api gateway，可能是 nginx 、kong 等。\",\"BFF 层：comment 模块。\",\"复杂评论业务的服务编排，比如访问账号服务进行等级判定，同时需要在 BFF 面向移动端/WEB场景来设计 API，「这一层抽象把评论的本身的内容列表处理(加载、分页、排序等)进行了隔离，关注在业务平台化逻辑上」。\",\"服务层：comment-service。\",\"服务层，去平台业务的逻辑，专注在评论功能的 API 实现上，比如发布、读取、删除等，「关注在稳定性、可用性上，这样让上游可以灵活组织逻辑，从而把基础能力和业务能力剥离」。\",\"Job：comment-job。\",\"消息队列的最大用途是**「削峰处理」**。\",\"Admin: comment-admin。\",\"管理平台，「按照安全等级划分服务」，尤其划分运营平台，他们会共享服务层的存储层(MySQL、Redis)。运营体系的数据大量都是检索，我们使用 canal 订阅 MySQL 的 binlog 进行同步到 ES 中，整个数据的展示都是通过 ES，再通过业务主键更新业务数据层，这样运营端的查询压力就下方给了独立的 fulltext search 系统。\",\"Dependency: account-service、filter-service。\",\"整个评论服务还会依赖一些外部 gRPC 服务，统一的平台业务逻辑在 comment BFF 层收敛，这里 account-service 主要是账号服务，filter-service 是敏感词过滤服务。\",\"架构设计等同于数据设计，梳理清楚数据的走向和逻辑。尽量避免**「环形依赖」**、数据双向请求等（比如两个服务互相调用）。\"]},\"248\":{\"h\":\"comment-service\",\"t\":[\"comment-service，专注在评论数据处理（Separation of Concerns）。\",\"图片\",\"注意\",\"我们一开始是 comment-service 和 comment 是一层，业务耦合和功能耦合在一起，非常不利于迭代，当然在设计层面可以考虑目录结构进行拆分，但是架构层次来说，迭代隔离也是好的。\"]},\"249\":{\"h\":\"读的核心逻辑\",\"t\":[\"Cache-Aside 模式，先读取缓存，再读取存储。\",\"早期 cache rebuild 是做到服务里的，对于重建逻辑，一般会使用 read ahead 的思路，即 「预读」，用户访问了第一页，很有可能访问第二页，所以缓存会超前加载，避免频繁 cache miss。当缓存抖动时候，特别容易引起集群 thundering herd 现象（惊群问题）。大量的请求会在 「comment 服务内部」 触发 cache rebuild，容易导致服务 OOM。\",\"所以在回源的逻辑里，我们使用了消息队列来进行逻辑异步化。发生缓存 miss 时，服务去 db 把数据拿出来返回，然后发送一条消息给 kafka，说明哪个 topic 或者 key cache miss 了，之后再在 comment-job 里消费消息，从 db 里拿出对应的数据再更新到缓存里。\"]},\"250\":{\"h\":\"写的核心逻辑\",\"t\":[\"写可以认为是 「透穿到存储层」 的，系统的瓶颈往往就来自于存储层，或者有状态层。\",\"对于写的设计上，把对存储的直接冲击 「下放到消息队列」，按照消息反压的思路，即如果存储 mysql 延迟升高，消费能力就下降，然后消息堆积，系统始终以最大化方式消费。意思就是把消息都暂存在 kafka 中，而不会一下发到 mysql ，这就是做一个削峰的处理。\",\"Kafka 是存在 partition 概念的，可以认为是物理上的一个小队列，一个 topic 是由一组 partition 组成的，所以 Kafka 的吞吐模型理解为: 「全局并行，局部串行的生产消费方式」。对于入队的消息，可以按照 hash(comment_subject) % N(partitions) 的方式进行分发。即某个评论主题的数据都在一个分区里，这样方便我们串行消费，顺序不会乱。\",\"处理之前的回源消息也是类似的思路。\"]},\"251\":{\"h\":\"comment-admin\",\"t\":[\"mysql binlog 中的数据被 canal 中间件流式消费，获取到业务的原始 CRUD 操作，需要回放录入到 es 中，但是 es 中的数据最终是面向运营体系提供服务能力，需要检索的数据维度比较多，在入 es 前需要做一个异构的 joiner，把单表变宽预处理好 join 逻辑，然后导入到 es 中。 一般来说，运营后台的检索条件都是组合的，使用 es 的好处是 「避免依赖 mysql 来做多条件组合检索」（索引越多写入速度会越慢），同时 mysql 毕竟是 OLTP 面向线上联机事务处理的。通过冗余数据的方式，使用其他引擎来实现。\",\"es 一般会存储检索、展示、primary key 等数据，当我们操作编辑的时候，找到记录的 primary key，最后交由 comment-admin 进行运营测的 CRUD 操作。\",\"内部运营体系基本都是基于 es 来完成的。\"]},\"252\":{\"h\":\"BFF-comment\",\"t\":[\"comment 作为 BFF，是面向端，面向平台，面向业务组合的服务。所以平台扩展的能力，我们都在 comment 服务来实现，方便统一和准入平台，以统一的接口形式提供平台化的能力。\",\"依赖其他 gRPC 服务，整合统一平台测的逻辑(比如发布评论用户等级限定)。\",\"直接向端上提供接口，提供数据的读写接口，甚至可以整合端上，提供统一的端上 SDK。\",\"需要对非核心依赖的 gRPC 服务进行降级，当这些服务不稳定时。\"]},\"253\":{\"c\":[\"架构设计\"]},\"254\":{\"c\":[\"评论系统\"]},\"255\":{\"h\":\"评论系统和可用性设计\",\"t\":[\"转载自stormspirit，原文链接：评论系统和可用性设计\"]},\"256\":{\"h\":\"存储设计\"},\"257\":{\"h\":\"数据表设计\",\"t\":[\"先看一张 b 站的评论图：\",\"图片\",\"如上图所示，主评论下面有子评论，子评论之间也可以互相评论，并且评论之间是通过赞数进行排序的。\",\"数据表设计：\",\"图片\",\"如上图，评论系统分为三张表。\",\"comment_subject\",\"评论主题表。一个主题可能是一个视频稿件、一篇文章等。分成了 50 张表。自增 id 做主键。\",\"obj_id 是主题 id， obj_type 是主题类型。\",\"另外还保存了一些计数字段，比如评论总数等。这样做是为了避免每次需要统计总数时都要做一次 select count(*) ，这样效率很低，所以直接每次新增评论的时候就把相应字段 +1 即可。\",\"comment_index\",\"评论索引表。主要存的是评论的 id 与评论主题的对应关系，以及该评论的一些相关信息，比如是不是根评论、评论楼层，评论总数等。分成了 200 张表。使用自增 id 做主键，主键 id 就是评论 id。\",\"root 是该评论的根评论 id，比如上面评论图红框里的就是根评论。不为 0 就是回复的评论，为 0 就是根评论。\",\"parent 是这个评论的父评论，也就是它是回复哪条评论的，如果为 0 那这个评论就是根评论。\",\"其他的都是一些统计信息等等。\",\"comment_content\",\"评论内容表。主要存的是评论实际内容。分成了 200 张表。\",\"它直接使用 comment_id（对应的就是 comment_index 表的 id ）作为主键，这样的好处是：\",\"表都有主键，即 cluster index，是物理组织形式存放的，comment_content 没有 id，是为了减少一次二级索引查找，直接基于主键检索，同时 comment_id 在写入要尽可能的顺序自增。\",\"意思是从 comment_index 表里捞出来一堆 comment_id ，那就可以直接通过这些 comment_id 作为主键去查询 comment_content 表了。如果 content 表还有自己的自增主键的话，那么通过 comment_id 去查必然需要先查到自己的主键 id ，然后再通过 id 去查到这一行数据，多了一步操作。\",\"索引、内容分离，方便 mysql datapage 缓存更多的 row，如果和 content 耦合，会导致更大的 IO。长远来看 content 信息可以直接使用 KV storage 存储。比如 Rocks DB 等。\",\"这也是一种 「索引内容分离」 的设计思想。\",\"写数据\",\"事务更新 comment_subject，comment_index，comment_content 三张表，其中 content 属于非强制需要一致性考虑的。可以先写入 content，之后事务更新其他表。即便 content 先成功，后续失败仅仅存在一条 ghost 数据。\",\"读数据\",\"基于 obj_id + obj_type 在 comment_index 表找到根评论列表，比如：\",\"select id from comment_index where obj_id = 'x' and obj_type = 'y' and root = 0 ORDER BY floor;\",\"对于二级的子楼层，由于一般只查询 3 层子楼层：\",\"select id from comment_index where parent/root in (上面查询出来的 id) and floor <= 3 order by floor;\",\"之后根据 comment_index 的 id 字段捞出 comment_content 的评论内容。\",\"因为产品形态上只存在 「二级列表」，因此只需要迭代查询两次即可。对于嵌套层次多的，产品上，可以通过二次点击支持。\",\"这种迭代查询的方式也可以直接用图数据库来实现，可能更好，比如 DGraph、HugeGraph 类似的图存储思路。\"]},\"258\":{\"h\":\"总结\",\"t\":[\"主题一张表，评论索引与评论内容分开两张表来存，表里有一些统计字段，避免每次都重新统计。内容表的主键直接使用评论 id，避免使用评论 id 查询还需要回表。评论内容可以使用 kv 数据库。写入时可以先写评论内容表，评论索引表和主题表用一个事务更新。\"]},\"259\":{\"h\":\"缓存设计\",\"t\":[\"图片\",\"图片\",\"图片\",\"comment_subject_cache\",\"对应主题的缓存，value 使用 protobuf 序列化的方式存入。\",\"comment_index_cache\",\"使用 redis sortedset 进行索引的缓存。key 是主题 id + 主题 type + 排序方式， member 就是评论 id，score 就是根据各种要素排序的得分。这样就可以根据某个主题查询，得到排序过后的评论 id 列表。然后就可以通过评论 id 列表去批量查询评论内容了。\",\"提示\",\"索引即数据的组织顺序，而非数据内容。参考过百度的贴吧，他们使用自己研发的拉链存储来组织索引，我认为 mysql 作为主力存储，利用 redis 来做加速完全足够，因为 cache miss 的构建，我们前面讲过使用 kafka 的消费者中处理，预加载少量数据，通过增量加载的方式逐渐预热填充缓存，而 redis sortedset skiplist 的实现，可以做到 O(logN) + O(M) 的时间复杂度，效率很高。\",\"sorted set 是要增量追加的，因此必须判定 key 存在，才能 zdd。\",\"comment_content_cache\",\"对应评论内容数据，使用 protobuf 序列化的方式存入。\",\"缓存使用增量加载 + lazy 加载模式，也就是在查询第一页的时候会将后两页评论数据也一起加载进缓存。可以使用 kafka 进行缓存的异步构建。\"]},\"260\":{\"h\":\"可用性设计\"},\"261\":{\"h\":\"缓存穿透\",\"t\":[\"singleflight\",\"图片\",\"对于热门的主题，如果存在缓存穿透的情况，会导致大量的同进程、跨进程的数据回源到存储层，可能会引起存储过载的情况，如何只交给同进程内，一个人去做加载存储？\",\"使用归并回源的思路 singleflight，singleflight 的原理可以看这篇文章 Go并发编程(十二) Singleflight。\",\"同进程只交给一个人去获取 mysql 数据，然后批量返回。\",\"同时这个租约 owner 投递一个 kafka 消息，做该 key 的 cache build 的操作。这样可以大大减少查询 mysql 的压力，以及大量透穿导致的密集写 kafka 的问题（如果不这么做那么会有很多的进程向 kafka 发送 cache rebuild 的指令，然后它们都会去 mysql 里查询数据写缓存）。\",\"更进一步的，后续连续的请求，仍然可能会短时 cache miss，我们可以在进程内设置一个过期时间为 5 秒的 short-lived flag，标记最近有一个人投递了同一个 key 的 cache rebuild 的消息，如果有这个 flag ，那么相同的 kafka 消息直接 drop 而不会再去查 mysql 构建缓存，这样 mysql 的压力更小。\",\"再进一步，可以在 comment-job 内存里设置一个过期时间很短的比如 5 秒的 LRU cache， 有一个线程去 mysql 里查到了数据就更新这个缓存，然后其他的线程直接从这个缓存里拿数据即可，这样就不用重复去 mysql 里查了，同样减少了对 mysql 的查询压力。\",\"一般不需要使用分布式锁，实现起来太复杂而且很容易出错。\"]},\"262\":{\"h\":\"热点\",\"t\":[\"流量热点是因为突然热门的主题，被高频次的访问，因为底层的 cache 设计，一般是按照主题 key 进行一致性 hash 来进行分片，但是热点 key 一定命中某一个节点，这时候 remote cache 可能会变为瓶颈，因此做 cache 的升级 local cache 是有必要的，我们一般使用**「单进程自适应发现热点」**的思路，附加一个短时的 ttl local cache，可以在进程内吞掉大量的读请求。\",\"在内存中使用 hashmap 统计每个 key 的访问频次，这里可以使用滑动窗口统计（如下图），即每个窗口中，维护一个 hashmap，之后统计所有未过期的 bucket，汇总所有 key 的数据。\",\"之后使用小顶堆计算 TopK 的数据，自动进行热点识别。把 TopK 的 key 统一 load 到本地缓存。\",\"图片\"]},\"263\":{\"c\":[\"架构设计\"]},\"264\":{\"c\":[\"评论系统\"]},\"265\":{\"h\":\"插件\",\"t\":[\"我做了一款vuepress的音乐可视化播放插件\",\"vuepress-plugin-player\",\"Vuepress 音乐播放器 & 沉浸式 源码：RayShineHub.github.io\",\"搭建 VuePress 博客，你可能会用到的一些插件\",\"博客搭建系列 - 冴羽\"]},\"266\":{\"c\":[\"教程\"]},\"267\":{\"c\":[\"Blog\"]},\"268\":{\"h\":\"二叉树的中序遍历\",\"t\":[\"94.二叉树的中序遍历\"]},\"269\":{\"h\":\"题意\",\"t\":[\"给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。\",\"二叉树的 中序遍历: 从根节点开始，首先遍历左子树，然后访问根节点，最后访问右子树。然后在遍历左子树的时候，同样首先遍历左子节点的左子树，然后访问根节点，最后遍历左子节点的右子树...\"]},\"270\":{\"h\":\"思路一（递归）\",\"t\":[\"按照中序遍历的过程，对每个节点的进行相同的递归处理。先处理这个节点的左子树，再处理这个节点，最后处理这个节点的右子树。\",\"递归终点：当处理的节点是空节点时，说明该节点的子树是空子树，无法继续向下处理了，递归结束，向上返回结果。\",\"代码：\"]},\"271\":{\"h\":\"思路二（迭代）\",\"t\":[\"在递归的方法中，其实隐式地维护了一个栈结构：一直递归寻找最下层的左节点，直到找到并处理完后，再返回处理上一层找到的节点。类似于栈中的先进后出，最后找到的节点处理完后，才会处理之前找到的节点。\",\"因此利用迭代的思想，使用一个栈，迭代地寻找当前节点的左子节点，找到后处理并弹出，同理再处理该节点和该节点的右子节点。全部弹出后，最后返回上一层，即当前节点的父节点。此时父节点相当于当前节点，当前节点相当于左节点，继续上述迭代处理即可。\",\"代码：\"]},\"272\":{\"c\":[\"hot100\",\"数据结构\"]},\"273\":{\"c\":[\"二叉树\",\"递归\",\"迭代\"]},\"274\":{\"h\":\"二叉树的最大深度\",\"t\":[\"104.二叉树的最大深度\"]},\"275\":{\"h\":\"题意\",\"t\":[\"给定一个二叉树 root ，返回其最大深度。\",\"二叉树的 最大深度 是指从根节点到最远叶子节点的最长路径上的节点数。\"]},\"276\":{\"h\":\"思路一：后序遍历（递归）\",\"t\":[\"递归实现：树深度 等于 左子树的深度 与 右子树的深度 中的 最大值 +1 。\",\"代码：\",\"class Solution { public int maxDepth(TreeNode root) { if (root == null) return 0; int l = maxDepth(root.left); int r = maxDepth(root.right); return Math.max(l, r) + 1; } }\"]},\"277\":{\"h\":\"思路二：层序遍历（迭代）\",\"t\":[\"队列实现：每遍历一层，则计数器 +1 ，直到遍历完成，则可得到树的深度。\",\"代码：\",\"class Solution { public int maxDepth(TreeNode root) { if (root == null) return 0; List<TreeNode> q = new LinkedList<>(); q.add(root); int res = 0; while (!q.isEmpty()){ List<TreeNode> tmp = new LinkedList<>(); for (TreeNode node : q){ if (node.left != null) tmp.add(node.left); if (node.right != null) tmp.add(node.right); } q = tmp; res++; } return res; } }\"]},\"278\":{\"c\":[\"hot100\",\"数据结构\"]},\"279\":{\"c\":[\"二叉树\",\"递归\",\"迭代\"]},\"280\":{\"h\":\"二叉树的直径\",\"t\":[\"543.二叉树的直径\"]},\"281\":{\"h\":\"题意\",\"t\":[\"给你一棵二叉树的根节点，返回该树的 直径 。\",\"二叉树的 直径 是指树中任意两个节点之间最长路径的 长度 。这条路径可能经过也可能不经过根节点 root 。\",\"两节点之间路径的 长度 由它们之间边数表示。\"]},\"282\":{\"h\":\"思路\",\"t\":[\"转化一下：\",\"所谓二叉树的直径，就是根节点的左右子树的最大深度之和，即左子树最深节点和右子树最深节点的距离。\",\"那么就是对每个节点计算左右子树的最大高度，得出每个节点的直径，顺便更新最大直径，递归返回即可。\"]},\"283\":{\"h\":\"代码\",\"t\":[\"class Solution { int ans = 0; int dfs(TreeNode root) { if (root == null) return 0; int l = dfs(root.left); int r = dfs(root.right); ans = Math.max(ans, l + r); // 更新最长路径 // 返回该节点的最大深度 return Math.max(l, r) + 1; } public int diameterOfBinaryTree(TreeNode root) { dfs(root); return ans; } }\"]},\"284\":{\"c\":[\"hot100\",\"数据结构\"]},\"285\":{\"c\":[\"二叉树\",\"递归\"]},\"286\":{\"h\":\"实现 Trie（前缀树）\",\"t\":[\"208.实现Trie（前缀树）\"]},\"287\":{\"h\":\"题意\",\"t\":[\"（发音类似 \\\"try\\\"）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。\",\"请你实现 Trie 类：\",\"Trie() 初始化前缀树对象。\",\"void insert(String word) 向前缀树中插入字符串 word 。\",\"boolean search(String word) 如果字符串 word 在前缀树中，返回 true（即，在检索之前已经插入）；否则，返回 false 。\",\"boolean startsWith(String prefix) 如果之前已经插入的字符串 word 的前缀之一为 prefix ，返回 true ；否则，返回 false 。\"]},\"288\":{\"h\":\"思路\",\"t\":[\"基于前缀树结构，每一层的节点并不是直接存储了某个字符，而是记录这一层节点对应字符串的位置是否出现了某个字符。比如根节点就是记录了字符串首个位置，第二层节点就是记录了字符串索引 1 的位置。\",\"树的结构\",\"我们可以将每一个字符串存储到树中，并且对于相同前缀只存储一次「从根节点出发到任一个节点都是一个前缀」。对于每个加入的字符串我们一定能在树中找到一条路径还原它。\",\"初始化：\",\"因为字符串中只存在小写字母，因此每个节点最多有 26 个子节点。\",\"使用 children[26] 的列表存储当前节点对应出现过的字符的子节点。\",\"使用布尔字段 isEnd，表示该节点是否为字符串的结尾。\",\"isEnd\",\"如果要查找一个完整的字符串，当我们找到时，我们如何知道找到的这部分是一个完整的字符串还是某个字符串的前缀呢？\",\"因此我们对每个节点引入一个标志 isEnd 标记当前节点对应一个完整字符串，我们在插入字符串的时候将最后一个字符对应的节点的标志位置为 True。\",\"当我们查找一个完整字符串时，既要能找到对应的节点，同时节点的标志位还必须为 true。\",\"插入字符串：\",\"假设当前节点为 node，当前要加入的字符为 ch：\",\"如果当前节点 node 的子节点列表中，ch 位置没有节点，则新建一个节点\",\"然后更新 node 为子节点，加入下一个字符\",\"node 初始为前缀树的根节点 root\",\"查找前缀：\",\"假设当前节点为 node，当前要查找的字符为 ch：\",\"如果当前节点 node 的子节点列表中，ch 位置没有节点，说明这个字符没有匹配上，前缀不存在退出查找\",\"否则更新 node 为子节点，寻找下一个字符\",\"node 初始为前缀树的根节点 root\"]},\"289\":{\"h\":\"代码\",\"t\":[\"class Trie { private Trie[] children; // 子节点列表 private boolean isEnd; // 标记是否尾节点 public Trie() { children = new Trie[26]; isEnd = false; } public void insert(String word) { Trie node = this; // 从根节点开始构造这个word对应的路径节点 int n = word.length(); for (int i = 0; i < n; i++){ // 将当前字符添加到当前节点对应的子节点位置，然后递归更新 int idx = word.charAt(i) - 'a'; if (node.children[idx] == null){ node.children[idx] = new Trie(); } node = node.children[idx]; } node.isEnd = true; // 最后一个节点的isEnd置为true，表示一个完整的字符串 } public boolean search(String word) { Trie node = searchPrefix(word); // 返回不为空且节点标记为尾节点，则包含word这个完整的字符串 return node != null && node.isEnd; } public boolean startsWith(String prefix) { return searchPrefix(prefix) != null; // 返回不为空，则包含了prefix前缀 } // 查找字典树是否包含word前缀 private Trie searchPrefix(String word) { Trie node = this; // 从根节点依次开始匹配每个字符 int n = word.length(); for (int i = 0; i < n; i++){ int idx = word.charAt(i) - 'a'; node = node.children[idx]; // 根据当前字符获取对应的子节点 if (node == null){ return null; // 只要当前节点为空，则不包含这个字符串，直接返回空指针 } } return node; // 否则匹配成功返回node } }\"]},\"290\":{\"c\":[\"hot100\",\"图论\"]},\"291\":{\"c\":[\"字典树\"]},\"292\":{\"h\":\"对称二叉树\",\"t\":[\"101.对称二叉树\"]},\"293\":{\"h\":\"题意\",\"t\":[\"给你一个二叉树的根节点 root ， 检查它是否轴对称。\"]},\"294\":{\"h\":\"思路\",\"t\":[\"递归结束条件：\",\"都为空指针返回 true\",\"只有一个为空返回 false\",\"递归过程：\",\"判断两个指针当前节点值是否相等\",\"判断 A 的右子树与 B 的左子树是否对称\",\"判断 A 的左子树与 B 的右子树是否对称\",\"短路原则：\",\"在递归判断过程中存在短路现象，也就是做 与 操作时，如果前面的值返回 false 则后面的不再进行计算\"]},\"295\":{\"h\":\"代码\",\"t\":[\"class Solution { boolean isSameTree(TreeNode p, TreeNode q) { if (p == null || q == null) return p == q; // 左对右，右对左，判断对应的两个节点是否相等 return p.val == q.val && isSameTree(p.left, q.right) && isSameTree(p.right, q.left); } public boolean isSymmetric(TreeNode root) { return isSameTree(root.left, root.right); } }\"]},\"296\":{\"c\":[\"hot100\",\"数据结构\"]},\"297\":{\"c\":[\"二叉树\",\"递归\"]},\"298\":{\"h\":\"将有序数组转换为二叉搜索树\",\"t\":[\"108.将有序数组转换为二叉搜索树\"]},\"299\":{\"h\":\"题意\",\"t\":[\"给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 平衡 二叉搜索树。\",\"平衡二叉树：是指该树所有节点的左右子树的深度相差不超过 1。\"]},\"300\":{\"h\":\"思路\",\"t\":[\"由于 BST 的中序遍历是升序的，所以本题等同于根据中序遍历的序列建立二叉搜索树。\",\"因为本题要求高度平衡，所以选择序列的中间值作为根节点，不断二分递归建立左子树和右子树。\"]},\"301\":{\"h\":\"代码\",\"t\":[\"class Solution { TreeNode dfs(int[] nums, int l, int r) { if (l > r) return null; // 以升序数组的中间元素作为根节点 int mid = l + (r - l) / 2; TreeNode root = new TreeNode(nums[mid]); // 递归的构建左子树与右子树 root.left = dfs(nums, l, mid - 1); root.right = dfs(nums, mid + 1, r); return root; } public TreeNode sortedArrayToBST(int[] nums) { return dfs(nums, 0, nums.length - 1); } }\"]},\"302\":{\"c\":[\"hot100\",\"数据结构\"]},\"303\":{\"c\":[\"二叉树\"]},\"304\":{\"h\":\"岛屿数量\",\"t\":[\"200.岛屿数量\"]},\"305\":{\"h\":\"题意\",\"t\":[\"给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。\",\"岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。\",\"此外，你可以假设该网格的四条边均被水包围。\"]},\"306\":{\"h\":\"思路一（DFS）\",\"t\":[\"解决岛屿题目最常见的就是 DFS 了，每次遇到一个岛屿中的陆地，就用 DFS 把这个岛屿「淹掉」。\",\"把二维数组中的每个格子看做「图」中的一个节点，这个节点和周围的四个节点连通，这样二维矩阵就被抽象成了一幅网状的「图」。\",\"为什么每次遇到岛屿，都要用 DFS 把岛屿「淹了」呢？主要是为了省事，避免维护 visited 数组。因为遍历图是需要 visited 数组记录遍历过的节点防止走回头路。\",\"由于 dfs 函数遍历到值为 0 的位置会直接返回，所以只要把经过的位置都设置为 0，就可以起到不走回头路的作用。\",\"最终岛屿的数量就是每次发现新岛屿的次数。\",\"代码：\",\"class Solution { void dfs(char[][] g, int i, int j) { int n = g.length, m = g[0].length; // 先判断范围和条件 if (i < 0 || i >= n || j < 0 || j >= m) return; if (g[i][j] == '0') return; // 将遍历过的陆地淹没 g[i][j] = '0'; // 遍历上下左右四个方向 dfs(g, i + 1, j); dfs(g, i, j + 1); dfs(g, i - 1, j); dfs(g, i, j - 1); } public int numIslands(char[][] g) { int res = 0; int n = g.length, m = g[0].length; for (int i = 0; i < n; i++){ for (int j = 0; j < m; j++){ // 每发现一个新岛屿，加入进来 if (g[i][j] == '1'){ res++; // 使用dfs将连通的陆地块淹掉 dfs(g, i, j); } } } return res; } }\"]},\"307\":{\"h\":\"思路二（BFS）\",\"t\":[\"广搜需要通过队列实现，每走过一个节点，就要加入队列并标记为「淹没」。\",\"遍历整个二维数组。如果一个位置为 '1'，则将其加入队列，开始进行广度优先搜索。在广度优先搜索的过程中，每个搜索到的 '1' 都会被重新标记为 '0'。直到队列为空，搜索结束。\",\"最终岛屿的数量就是进行广度优先搜索的次数。\",\"class Solution { int n, m; char[][] g; int dx[] = {1, 0, -1, 0}; int dy[] = {0, 1, 0, -1}; void bfs(int i, int j) { Queue<Pair<Integer, Integer>> q = new LinkedList<>(); q.offer(new Pair<>(i, j)); g[i][j] = '0'; while (!q.isEmpty()){ Pair<Integer, Integer> t = q.poll(); int x = t.getKey(); int y = t.getValue(); for (int k = 0; k < 4; k++){ int xx = x + dx[k], yy = y + dy[k]; if (xx < 0 || xx >= n || yy < 0 || yy >= m || g[xx][yy] == '0') continue; q.offer(new Pair<>(xx, yy)); g[xx][yy] = '0'; } } } public int numIslands(char[][] g) { n = g.length; m = g[0].length; this.g = g; int res = 0; for (int i = 0; i < n; i++){ for (int j = 0; j < m; j++){ if (g[i][j] == '1'){ bfs(i, j); res++; } } } return res; } }\"]},\"308\":{\"h\":\"思路三（并查集）\",\"t\":[\"遍历整个二维数组。如果一个位置为 '1'，则将其与相邻四个方向上的 '1' 在并查集中进行合并。\",\"因为是从（0,0）往（n，m）按顺序遍历，所以可以优化为每次只搜「右边」和「下边」的位置，因为「左边」和「上边」在之前的搜索中已经加入到集合了，不需要再搜了。\",\"最终岛屿的数量就是并查集中连通分量的数目。\",\"代码：\",\"class Solution { int[] p; int res; int find(int i) { return p[i] == i ? p[i] : find(p[i]); } void union(int i, int j){ if (find(i) == find(j)) return; // 避免重复合并操作 p[find(i)] = p[find(j)]; res--; } public int numIslands(char[][] g) { int n = g.length, m = g[0].length; p = new int[n * m]; res = 0; // 初始化 parent 数组，记录初始岛屿数（也就是 '1' 的数目） for (int i = 0; i < n; i++){ for(int j = 0; j < m; j++){ int idx = i * m + j; p[idx] = idx; if(g[i][j] == '1') res++; } } for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { int idx = i * m + j; if (g[i][j] == '1') { // 合并岛屿 if (i + 1 < n && g[i + 1][j] == '1') { union(idx, (i + 1) * m + j); } if (j + 1 < m && g[i][j + 1] == '1') { union(idx, i * m + j + 1); } } } } return res; } }\"]},\"309\":{\"c\":[\"hot100\",\"图论\"]},\"310\":{\"c\":[\"DFS\",\"BFS\",\"并查集\"]},\"311\":{\"h\":\"最长公共子序列\",\"t\":[\"1143.最长公共子序列\"]},\"312\":{\"h\":\"题意\",\"t\":[\"给定两个字符串 s1 和 s2，返回这两个字符串的最长公共子序列的长度。如果不存在公共子序列，返回 0。\",\"一个字符串的子序列是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。\",\"例如，\\\"ace\\\" 是 \\\"abcde\\\" 的子序列，但 \\\"aec\\\" 不是 \\\"abcde\\\" 的子序列。\",\"两个字符串的公共子序列是这两个字符串所共同拥有的子序列。\"]},\"313\":{\"h\":\"思路\",\"t\":[\"用两个指针 i, j 在两个字符串上游走，这就是「状态」，字符串中的每个字符都有两种「选择」，要么在 lcs 中，要么不在。\",\"f[i][j] 的含义是：对于 s1[1..i] 和 s2[1..j]，它们的 LCS 长度是 f[i][j]。\"]},\"314\":{\"h\":\"代码\",\"t\":[\"class Solution { public int longestCommonSubsequence(String s1, String s2) { // 定义：s1[0..i-1] 和 s2[0..j-1] 的 lcs 长度为 f[i][j] // 目标：s1[0..n-1] 和 s2[0..m-1] 的 lcs 长度，即 f[n][m] int n = s1.length(), m = s2.length(); // 初始化：f[0][..] = f[..][0] = 0 int f[][] = new int[n + 1][m + 1]; for (int i = 1; i <= n; i++) { for (int j = 1; j <= m; j++) { // s1[i-1] 和 s2[j-1] 至少有一个不在 lcs 中 f[i][j] = Math.max(f[i][j - 1], f[i - 1][j]); // 因为 i 和 j 从 1 开始，所以要减一 if (s1.charAt(i - 1) == s2.charAt(j - 1)) // s1[i-1] 和 s2[j-1] 必然在 lcs 中 f[i][j] = Math.max(f[i][j], f[i - 1][j - 1] + 1); } } return f[n][m]; } }\"]},\"315\":{\"c\":[\"hot100\",\"动态规划\"]},\"316\":{\"c\":[\"线性DP\"]},\"317\":{\"h\":\"滑动窗口最大值\",\"t\":[\"239.滑动窗口最大值\"]},\"318\":{\"h\":\"题意\",\"t\":[\"给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。\",\"返回 滑动窗口中的最大值 。\"]},\"319\":{\"h\":\"思路一（优先队列）\",\"t\":[\"使用优先队列，维护值和下标，窗口每次移动，判断当前最大值的位置，若已滑出窗口，则更新最大值，否则不更新。将每次移动的最大值保存在 ans[]中。\",\"代码：\",\"class Solution { public: vector<int> maxSlidingWindow(vector<int>& nums, int k) { int n = nums.size(); priority_queue<pair<int, int>> q; for (int i = 0; i < k; i++){ q.push({nums[i], i}); } vector<int> ans = {q.top().first}; for (int i = k; i < n; i++){ q.push({nums[i], i}); while (q.top().second <= i - k){ q.pop(); } ans.push_back(q.top().first); } return ans; } };\"]},\"320\":{\"h\":\"思路二（单调队列）\"},\"321\":{\"c\":[\"hot100\",\"数据结构\"]},\"322\":{\"c\":[\"滑动窗口\",\"优先队列\",\"单调队列\"]},\"323\":{\"h\":\"翻转二叉树\",\"t\":[\"226.翻转二叉树\"]},\"324\":{\"h\":\"题意\",\"t\":[\"给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。\"]},\"325\":{\"h\":\"思路\",\"t\":[\"如何翻转二叉树？其实就是把二叉树上的每个节点的左右子节点都交换一下。\",\"利用给出的函数定义，递归地交换每个节点的左右子树，返回每次的根节点即可。\"]},\"326\":{\"h\":\"代码\",\"t\":[\"class Solution { // 定义：将以 root 为根的这棵二叉树翻转，返回翻转后的二叉树的根节点 public TreeNode invertTree(TreeNode root) { if (root == null) return null; // 利用函数定义，先翻转左右子树 TreeNode l = invertTree(root.left); TreeNode r = invertTree(root.right); // 然后交换左右子节点 root.left = r; root.right = l; // 和定义逻辑自恰：以 root 为根的这棵二叉树已经被翻转，返回 root return root; } }\"]},\"327\":{\"c\":[\"hot100\",\"数据结构\"]},\"328\":{\"c\":[\"二叉树\",\"递归\"]},\"329\":{\"h\":\"腐烂的橘子\",\"t\":[\"994.腐烂的橘子\"]},\"330\":{\"h\":\"题意\",\"t\":[\"在给定的 m x n 网格 grid 中，每个单元格可以有以下三个值之一：\",\"值 0 代表空单元格； 值 1 代表新鲜橘子； 值 2 代表腐烂的橘子。 每分钟，腐烂的橘子 周围 4 个方向上相邻 的新鲜橘子都会腐烂。\",\"返回 直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1 。\"]},\"331\":{\"h\":\"思路\",\"t\":[\"从初始的 0 分钟开始，当前分钟的烂橘子都使其相邻位置的橘子也腐烂，从而不断扩散直到没有新鲜橘子或者无法扩散。\",\"这个过程与广度优先搜索的过程一致，常规的广度优先搜索只有一个起点，而这道题有多个起点，因为烂橘子不止一个，每个烂橘子都会去扩散腐烂周边的新鲜橘子。所以每次扩散需要考虑每一层（即最外层）的烂橘子，使用 size 记录每层烂橘子的数量，将每层的扩散情况都加入队列。\",\"重复上述步骤，即可得到最终的花费时间。\",\"另外，为了判断是否有永远不会腐烂的橘子，我们可以统计初始新鲜橘子的个数 fresh。在 BFS 中，每有一个新鲜橘子被腐烂，就把 fresh 减一，这样最后如果发现 fresh > 0，就意味着有橘子永远不会腐烂，返回 −1。\",\"初始化时间 time = -1，在每层遍历的时候 time++，这样初始的烂橘子时间为 0，因为它们是本来就有的。但要注意，在全为烂橘子的情况下要返回 0，可是在这种情况下 time 仍为其初始值 −1，所以最后要返回 max(time,0)。\"]},\"332\":{\"h\":\"代码\",\"t\":[\"使用链表作为队列，提取BFS方法\",\"class Solution { int n, m; int g[][]; int dx[] = {1, 0, -1, 0}; // x方向数组 int dy[] = {0, 1, 0, -1}; // y方向数组 int fresh = 0; int time = -1; // 初始化时间为-1 Queue<Pair<Integer, Integer>> q = new LinkedList<>(); // 将BFS过程提取为单独的一个方法 void bfs() { while (!q.isEmpty()){ time++; // 每遍历一层时间+1 int size = q.size(); // 取出这一层的烂橘子开始遍历 while (size-- > 0){ Pair<Integer, Integer> t = q.poll(); int x = t.getKey(); int y = t.getValue(); for (int k = 0; k < 4; k++){ // 开始扩散 int xx = x + dx[k], yy = y + dy[k]; if (xx >= 0 && xx < n && yy >= 0 && yy < m && g[xx][yy] == 1){ fresh--; q.offer(new Pair<>(xx, yy)); g[xx][yy] = 2; // 标记变成烂橘子 } } } } } public int orangesRotting(int[][] g) { n = g.length; m = g[0].length; this.g = g; for (int i = 0; i < n; i++){ for (int j = 0; j < m; j++){ if (g[i][j] == 1){ fresh++; // 统计新鲜橘子数 } else if (g[i][j] == 2){ q.offer(new Pair<>(i, j)); // 将初始的烂橘子入队 } } } bfs(); return fresh > 0 ? -1 : Math.max(time, 0); } }\",\"更简洁的写法 - 使用数组列表作为队列（推荐）\",\"class Solution { int dd[][] = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} }; // 四个方向 public int orangesRotting(int[][] g) { int n = g.length; int m = g[0].length; int fresh = 0; List<int[]> q = new ArrayList<>(); for (int i = 0; i < n; i++){ for (int j = 0; j < m; j++){ if (g[i][j] == 1) fresh++; // 统计新鲜橘子个数 else if (g[i][j] == 2) q.add(new int[]{i, j}); // 初始的烂橘子 } } int time = -1; while (!q.isEmpty()) { time++; // 经过一分钟 List<int[]> tmp = q; // 取出当前最外层的烂橘子 q = new ArrayList<>(); // 记录下一层被扩散的烂橘子 for (int[] pos : tmp) { // 开始扩散 for (int[] d : dd) { int i = pos[0] + d[0]; int j = pos[1] + d[1]; if (0 <= i && i < n && 0 <= j && j < m && g[i][j] == 1) { fresh--; g[i][j] = 2; // 标记变成烂橘子 q.add(new int[]{i, j}); // 加入新的一层 } } } } return fresh > 0 ? -1 : Math.max(time, 0); } }\"]},\"333\":{\"c\":[\"hot100\",\"图论\"]},\"334\":{\"c\":[\"BFS\"]},\"335\":{\"h\":\"课程表\",\"t\":[\"207.课程表\"]},\"336\":{\"h\":\"题意\",\"t\":[\"你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。\",\"在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i]=[ai​,bi​] ，表示如果要学习课程 ai​ 则 必须 先学习课程 bi​ 。\",\"例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。 请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。\"]},\"337\":{\"h\":\"思路\",\"t\":[\"判断条件：当存在循环依赖的时候，无法完成所有课程。\",\"比如：prerequisites = [[1,0],[0,1]]，在学习课程 1 之前，需要先完成​课程 0 ；并且学习课程 0 之前，还应先完成课程 1 。产生了循环依赖，所以不可能完成所有课程。\",\"所以，我们可以把题目的输入转化成一幅有向图，然后再判断图中是否存在环。\",\"使用邻接表建图：\",\"List<Integer>[] g; List<Integer>[] buildGraph(int n, int[][] edges) { // 图中共有 n 个节点 List<Integer>[] graph = new LinkedList[nu]; for (int i = 0; i < n; i++) { g[i] = new LinkedList<>(); } for (int[] edge : edges) { int from = edge[1], to = edge[0]; // 添加一条从 from 指向 to 的有向边 g[from].add(to); } return g; }\",\"接下来，遍历建好的图。\",\"要注意到图中并不一定所有节点都相连，所以要用一个 for 循环将所有节点都作为起点调用一次 DFS 搜索，用数组 st 标记所有走过的点，用数组 onPath 标记当前节点搜索时遍历过的节点，即路径节点，在搜索完当前所能走到的所有节点后，回退状态，以便给其他节点搜索。\",\"在一次搜索中，只要发现该节点已经被 onPath 标记了，表示回到了起点，成了一个环，那么就不满足条件，返回 false，否则返回 true。\"]},\"338\":{\"h\":\"代码\",\"t\":[\"class Solution { boolean onPath[]; // 记录一次DFS经过的节点 boolean st[]; // 记录遍历过的节点 boolean hasCycle = false; // 记录图中是否有环 void dfs(List<Integer>[] g, int x) { if (onPath[x]){ hasCycle = true; // 如果当前节点走过了，表示出现了环 } // 如果找到了环，就不用遍历了 if (st[x] || hasCycle) return; st[x] = true; onPath[x] = true; // 标记走过 for (int t : g[x]){ dfs(g, t); // 递归遍历 } onPath[x] = false; // 恢复现场 } // n为选修课程数，edges为先修课程关系 public boolean canFinish(int n, int[][] edges) { st = new boolean[n]; onPath = new boolean[n]; // 邻接表建图 g[a] -> b List<Integer>[] g = new LinkedList[n]; for (int i = 0; i < n; i++) g[i] = new LinkedList<>(); for (int[] edge : edges){ int from = edge[1]; int to = edge[0]; g[from].add(to); } for (int i = 0; i < n; i++){ dfs(g, i); } return !hasCycle; } }\"]},\"339\":{\"c\":[\"hot100\",\"图论\"]},\"340\":{\"c\":[\"DFS\"]},\"341\":{\"h\":\"常用API\",\"t\":[\"整理 java 刷题过程中常用 API\"]},\"342\":{\"h\":\"数组\",\"t\":[\"toString(arr); // 返回一个字符串 copyOf(arr, begin, end); copyOfRange(arr, begin, end); // 返回与arr类型相同的一个数组，其长度为end或end-begin，并填入arr的值 // 如果end大于arr.length，结果会填充0或false值 sort(arr, begin, end); // 使用稳定的快排队数组进行排序 --- O(n logn) sort(arr, begin, end, Collections.reverseOrder()); // 数组降序排序排序 equals(arr1, arr2); // 如果两个数组长度相同，并且相同索引对应的元素都相同，则返回 true\"]},\"343\":{\"h\":\"字符串\",\"t\":[\"字符串分为两类：不可变字符串（String）和可变字符串（StringBuilder）。\",\"String 类用来表示那些创建后就不会再改变的字符串，而 StringBuilder 类用来表示内容可变的字符串，并提供了修改字符串的方法。\",\"表面上拼接字符串时，String 类使用 str1 + str2 这种形式拼接字符串，实际上是 JVM 帮助创建 StringBuilder 对象来拼接，StringBuilder 类却要调用一个 append() 方法来拼接，但其实 StringBuilder 类的效率更高。\"]},\"344\":{\"h\":\"String\",\"t\":[\"初始化有两种：\",\"String str = new String(\\\"XXX\\\"); // 参数可以是字符串常量，也可为字符数组 String str = \\\"XXX\\\"; // 参数可为字符串常量，可为String.valueOf()系列的返回值\",\"前者是 java 中标准的对象创建方式，其创建的对象将直接放置到堆中，每调用一次就会创建一个新的对象； 后者则会在栈中创建一个对象引用变量 str ，然后查看字符串池中是否存在 \\\"XXX\\\"，如果没有，则将 \\\"XXX\\\" 存放字符串池，并令引用变量 str 指向它；如果已经有 \\\"XXX\\\"，则直接令 str 指向它。\",\"常用方法：\",\"equals(); // 字符串比较必须能用equals()，相同返回true，否则返回false equalsIgnoreCase(); // 忽略大小写进行比较 charAt(int index); // 返回index位置的字符char --- O(1) length(); // 返回字符串长度 --- O(1) substring(int begin, int end); // 返回字符片段[begin, end) --- O(n) substring(int begin); // 返回从begin开始后面所有的字符片段 ---- O(n) contains(String str); // 是否包含子串str --- O(1) indexOf(String str); // 返回str第一个出现的位置，没找到则返回-1 --- O(m * n) m为原串长度， n为str长度 indexOf(String str, int index); // 同上，但从index开始找 --- O(m * n) lastIndexOf(String str); // 返回str最后出现的位置，没找到则返回-1 --- O(m * n) m为原串长度， n为str长度 lastIndexOf(String str, int index); // 同上，但从index开始从后往前找 [0 <- Index] --- O(m * n) replace(char oldChar, char newChar); // 返回一个新字符串String，其全部oldChar都替换成newChar --- O(n) toLowerCase(); // 返回一个新的字符串全部转成小写 --- O(n) toUpperCase(); // 返回一个新的字符串全部转成大写 --- O(n) trim(); // 去除首尾空白字符，包括 \\\\t \\\\r \\\\n --- O(n) strip(); // 去除首尾空白字符，还包括中文的空格字符 \\\\u3000 也会被移除 isEmpty(); // 判断字符串是否为空 isBlank(); // 判断是否为空白字符串 split(String regex); // 传入正则表达式分隔字符串 ---- O(n) // String s = \\\"A,B,C,D\\\"; // String[] ss = s.split(\\\"\\\\\\\\,\\\"); // {\\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\"} join(); // 拼接字符串，用指定的字符串连接字符串数组 // String[] arr = {\\\"A\\\", \\\"B\\\", \\\"C\\\"}; // String s = String.join(\\\"***\\\", arr); // \\\"A***B***C\\\" formatted(); // 格式化字符串，通过传入其他参数，替换占位符，生成新的字符串 format(); // 同上 // String s = \\\"Hi %s, your score is %d!\\\"; // System.out.println(s.formatted(\\\"Alice\\\", 80)); // System.out.println(String.format(\\\"Hi %s, your score is %.2f!\\\", \\\"Bob\\\", 59.5));\",\"类型转换：\",\"valueOf(); // 将任意基本类型或引用类型转换为字符串 parseInt(); // 将字符串转换为int类型 parseBoolean(); // 将字符串转换为boolean类型 getInteger(); // 将该字符串对应的系统变量转换为Integer toCharArray(); // 将字符串转换为char[]数组 // char[] cs = \\\"Hello\\\".toCharArray(); // String -> char[] // String s = new String(cs); // char[] -> String // 将char[]转byte[] byte[] b1 = \\\"Hello\\\".getBytes(); // 按系统默认编码转换，不推荐 byte[] b2 = \\\"Hello\\\".getBytes(\\\"UTF-8\\\"); // 按UTF-8编码转换 byte[] b2 = \\\"Hello\\\".getBytes(\\\"GBK\\\"); // 按GBK编码转换 byte[] b3 = \\\"Hello\\\".getBytes(StandardCharsets.UTF_8); // 按UTF-8编码转换 // 将已知编码的byte[]转换为String byte[] b = ... String s1 = new String(b, \\\"GBK\\\"); // 按GBK转换 String s2 = new String(b, StandardCharsets.UTF_8); // 按UTF-8转换\"]},\"345\":{\"h\":\"StringBuilder\",\"t\":[\"StringBuilder sb = new StringBuilder(); // 创建对象 charAt(int index); // 返回index位置的char --- O(1) length(); // 返回缓冲字符串长度 --- O(1) append(String str); // 拼接字符串 --- O(n) toString(); // 返回一个与构建起或缓冲器内容相同的字符串 --- O(n)\"]},\"346\":{\"h\":\"集合\"},\"347\":{\"h\":\"List 列表\",\"t\":[\"两个实现类：ArrayList、LinkedList\",\"ArrayList 底层是通过数组（动态扩容的数组）实现的，查询快\",\"LinkedList 底层是通过双向链表实现的，插入和删除快\",\"// E 表示泛型 List<E> array = new ArrayList<>(); // 顺序数组列表 List<E> array = new LinkedList<>(); // 顺序链表 ArrayList<E>(int initialCapacity); // 指定容量的空数组列表 // Set<Integer> a = new HashSet<Integer>(); List<Integer> b = new ArrayList<>(a); //接受一个集合容器 set(int index, E e); // 将元素e放在index位置，返回之前的内容 get(int index); // 返回元素位置在index的元素e --- 数组 O(1), 链表 O(n) add(E e); // 在尾部添加一个元素e --- O(1) add(int index, E e); // 后移元素，在index位置插一个元素e --- O(n) remove(int index); // 删除位于index的元素，并返回删除元素e --- 删除最后元素为O(1)， 其余为O(n) //删除最后元素 list.remove(list.size() - 1); size(); // 返回动态数组所存元素个数/链表长度 --- O(1) subList(int satrt, int end) // 相当于返回原数组的一个片段，但不要对其进行改动，改动会影响原数组 --- O(1) // List<Integer> list, 对原来的list和返回的list做的 \\\"非结构性修改\\\" // 都会影响到彼此对方. 如果你在调用了sublist返回了子list之后，如果修改了原list的大小，那么之前产生的子list将会失效，变得不可使用 trimToSize(); // 将数组列表的存储容量削减到其当前大小\"]},\"348\":{\"h\":\"Set 集合\",\"t\":[\"Set 是一种没有重复元素的集合，三个实现类：HashSet，LinkedHashSet，TreeSet。\",\"HashSet 元素乱序\",\"LinkedHashSet 保证元素添加顺序\",\"TreeSet 元素按自然顺序排序\",\"Set<E> set = new HashSet<>(); // 实例化 //List<E> list = new ArrayList<>(); Set<E> set = new HashSet<>(list); // 传参 add(E e); // 在集合中添加元素e，若成功添加则返回true，若集合中有元素e则返回false --- O(1) remove(E e); // 在集合中删除元素e，若删除成功返回true；若集合中没有元素e，返回false --- O(1) contains(E e); // 若存在元素e，则返回true，否则返回false --- O(1) isEmpty(); // 若集合为空返回true，否则返回false --- O(1) first()、last(); // 返回有序集合中第一个元素，最后一个元素，在TreeSet类中\"]},\"349\":{\"h\":\"Map 映射\",\"t\":[\"两个实现类：HashMap，TreeMap\",\"HashMap 键值对乱序\",\"TreeMap 键值对以 “键” 排序\",\"TreeSet 中的元素和 TreeMap 中键如果是基本数据类型（的包装类型）或者是字符串，那么就按照数值大小以及字典序排序即可，但是如果是自定义的实体类对象，就需要自己自定义排序方式。自定义排序时，需要用到 Comparable 接口或者是 Comparator 接口。\",\"自然排序 -- 使用 Comparable 接口\",\"定制排序 -- 使用 Comparator 接口\",\"Map<Characters, Integer> map = new HashMap<>(); // 实例化 put(K key, V value); // 在Map中加入键值对<key, value>，返回value值。如果Map中有key，则replace旧的value --- O(1) get(K key); // 返回Map中key对应的value。若Map中没有该key，则返回null --- O(1) getOrDefault(K key, V defaultValue); // 返回Map中key对应的value。若Map中没有该key，则返回defaultValue --- O(1) // For example: // Map<Character, Integer> map = new HashMap<>(); // if (...) // 如果发现k，则k在Map中的值加1。没一开始没有k，则从0开始加1。（相当于给了key在Map中的一个初试值） map.put('k', map.getOrDefault('k', 0) + 1); containsKey(Key key); // 在Map中若存在key，则返回true，否则返回false --- O(1) containsValue(Value value); // 在Map中若存在value，则返回true，否则返回false --- O(1) Set<Map.Entry<K, V>> entrySet(); // 返回Map.Entry对象的一个集视图，可以删除元素，但不能添加任何元素 Set<K> keySet(); // 返回一个Set,这个Set中包含Map中所有的Key --- O(1) // For example: // We want to get all keys in Map // Map<Character, Integer> map = new HashMap<>(); for (Character key : map.keySet()) { // Operate with each key } Collection<V> values(); // 返回一个Collection<V>，里面全是对应的每一个value --- O(1) // For example: // We want to get all values in Map // Map<Character, Integer> map = new HashMap<>(); for (Integer value : map.values()) { // Operate with each values } getKey(); // 返回这个映射的键 getValue(); // 返回这个映射的值 setValue(V newValue); // 将关联映射中的值改为新值，并返回原来的值 isEmpty() // 若Map为空返回true， 否则返回false --- O(1) size() // 返回Map中中键值对<K, V>的个数 --- O(1)\"]},\"350\":{\"h\":\"栈\",\"t\":[\"java 中 Stack 继承了 Vector 类，仅仅实现栈的操作。 另外，Deque 不仅有队列（双端队列，普通队列）的特性，也可以作为栈，用法同 Stack ，方法也相同。\",\"建议使用 Deque 用作堆栈而不是 Stack 类，因为 Stack 的方法是同步的，同步的过程会消耗时间。\",\"Deque 的实现类有 ArrayDeque 和 LinkedList，但最好使用 ArrayDeque 类在 Java 中实现堆栈数据结构。\",\"Stack<E> stack = new Stack<>(); // Stack类 Deque<E> stack = new ArrayDeque<>(); // Deque接口，ArrayDeque是Deque的一个实现类 push(E e); // 入栈元素e， 返回值为元素e --- O(1) pop(); // 出栈一个元素，返回出栈元素e --- O(1) peek(); // 查看栈顶元素， 返回值为栈顶元素e --- O(1) search(); // 从堆栈的顶部返回元素的位置 --- O(1) isEmpty() // 若栈空返回true，否则返回false --- O(1) size() // 返回栈中元素个数 --- O(1)\"]},\"351\":{\"h\":\"Queue 队列\",\"t\":[\"Queue 为接口，实现类是 LinkedList（既实现 List 接口，又实现 Queue 接口） ，特性是先进先出。\",\"Queue<E> q = new LinkedList<>(); //实例化 // 添加元素e到队尾 --- O(1) offer(E e); // 成功返回true，否则返回false add(E e); // 失败抛出异常 // 取队首元素并删除 --- O(1) poll(); // 成功返回队首元素，否则返回null remove(); // 失败抛出异常 // 不建议把null添加到队列中，否则poll()方法返回null时，很难确定是取到了null元素还是队列为空。 // 取队首元素但不删除 --- O(1) peek(); // 成功返回队首元素，否则返回null element(); // 失败抛出异常 isEmpty() // 若队空返回true，否则返回false --- O(1) size() // 返回队中元素个数 --- O(1)\"]},\"352\":{\"h\":\"Deque 双端队列\",\"t\":[\"Dueue 接口实际上扩展自 Queue，Queue 中的方法在 Deque 中也可以使用，但不建议这么做。\",\"Dueue<E> q = new LinkedList<>(); //实例化 offFirst(E e); // 将元素添加到队首 --- O(1) offLast(E e); // 将元素添加到队尾 --- O(1) pollFirst(); // 获取队首元素并删除 --- O(1) pollLast(); // 获取队尾元素并删除 --- O(1) peekFirst(); // 获取队首元素但不删除 --- O(1) peekLast(); // 获取队尾元素但不删除 --- O(1) isEmpty(); // 非空返回true，否则返回false size(); // 队列中元素个数\"]},\"353\":{\"h\":\"PriorityQueue 优先队列\",\"t\":[\"优先队列在添加元素的时候对元素的大小排序后再保存。PriorityQueue 对元素采用的是堆排序，头是按指定排序方式的最小元素。（堆排序只能保证根是最大/最小，整个堆并不是有序的）\",\"因此，放入 PriorityQueue 的元素，需要先定义好排序规则，才能够确保队列元素整体有序。\",\"PriorityQueue 默认按元素的排序规则排序（必须实现 Comparable 接口），也可以通过 Comparator 自定义排序算法（元素就不必实现 Comparable 接口）。\",\"// 默认实现小根堆。 PriorityQueue<E> minHeap = new PriorityQueue<>(); // 大根堆 PriorityQueue<E> maxHeap = new PriorityQueue<>(Collections.reverseOrder()); // 自定义实现最小/最大（e1-e2，升序 / e2-e1，降序） // 开始指定大小capacity = 100，当元素超过容量后会扩容 PriorityQueue<E> priorityQueue = new PriorityQueue<E>(100, new Comparator<E>(){ @Override public int compare(E e1, E e2) { return e2.val - e1.val; // 返回值大于0，表示两个元素需要更换位置，否则不需要更换 } }); offer(E e); // 在堆中加入元素，并调整堆。若成功入堆返回值true，否则返回false --- O(logN) poll(); // 获取堆顶元素并删除，重新调整堆 --- O(logN) peek(); // 获取堆顶元素但不删除 --- O(1) isEmpty(); // 判断队列是否为空 size(); // 队列中元素数量\"]},\"354\":{\"h\":\"工具类\"},\"355\":{\"h\":\"java.util.Math\",\"t\":[\"主要包含数学内的应用方法\",\"Math.abs(a); // 返回a的绝对值 Math.max(a, b); // 返回a和b的最大值 Math.min(a, b); // 返回a和b的最小值 Math.sqrt(a); // 开平方 Math.cbrt(b); // 开立方 Math.pow(a, b); // 返回a的b次方 Math.ceil(a); // 对浮点数向上取整 Math.floor(a); // 对浮点数向下取整 Math.round(a); // 对浮点数四舍五入 Math.log(a); // 以e为底取对数 Math.log10(a); // 以10为底取对数 Math.log(n) / Math.log(m); // 以m为底取n的对数 Math.random(); // 返回一个随机数，范围为[0,1)，返回类型为double\"]},\"356\":{\"h\":\"java.util.Collections\",\"t\":[\"主要对集合进行操作\",\"binarySearch(arr, start, end, v); // 使用二分查找算法在有序数组arr中查找值 v --- O(logn) // 如果找到 v，则返回相应的索引；否则返回一个负数值 r。-r-1 是 v 应插入的位置（为保持 a 有序） max(Collection<E> elements); // 返回集合中最大的元素 min(Collection<E> elements); // 返回集合中最小的元素 fill(Collection<E> c, V value); // 将集合的所有元素设置为 v addAll(Collection<E> c, V...values); // 将所有的值添加到给定的集合中 replaceAll(Collection<E> c, V oldvalue, V newvalue); // 用newValue替换所有等于oldValue的元素 indexOfSubList(List<E> list1, List<E> list2); // 返回list1中第一个等于list2的子列表的索引 lastIndexOfSubList(List<E> list1, List<E> list2); // 返回list1中最后一个等于list2的子列表的索引\"]},\"357\":{\"h\":\"javafx.util.Pair<K, V>\",\"t\":[\"Java 8 的 package.json 中新增了一个 Pair<K,V> 类，表示键值对，类似于 C++ 中的 pair 二元组，实现对 first 和 second 的操作。\",\"getKey(); // 返回该pair的key值 getValue(); // 返回该pair的value值 hashCode(); // 生成该pair的哈希值 equals(E e); // 判断该pair是否和对象元素e相等 toString(); // 返回该pair的字符串表示\"]},\"358\":{\"h\":\"基本类型的最大值和最小值\",\"t\":[\"数字类型包装类都支持两个常量：MAX_VALUE，MIN_VALUE，分别保存了对应基本类型的最大值与最小值。\",\"fmax = Float.MAX_VALUE; fmin = Float.MIN_VALUE; dmax = Double.MAX_VALUE; dmin = Double.MIN_VALUE; bmax = Byte.MAX_VALUE; bmin = Byte.MIN_VALUE; cmax = Character.MAX_VALUE; cmin = Character.MIN_VALUE; shmax = Short.MAX_VALUE; shmin = Short.MIN_VALUE; imax = Integer.MAX_VALUE; imin = Integer.MIN_VALUE; lmax = Long.MAX_VALUE; lmin = Long.MIN_VALUE;\"]},\"359\":{\"c\":[\"Java\"]},\"360\":{\"c\":[\"API\"]},\"361\":{\"h\":\"MinIO 安装与部署\",\"t\":[\"官方仓库\",\"GitHub：https://github.com/minio\",\"GItee镜像：https://gitee.com/mirrors/minio\",\"官网下载：https://www.minio.org.cn/download.shtml#/\"]},\"362\":{\"h\":\"Linux 安装启动\",\"t\":[\"下载安装包：\",\"wget https://dl.minio.org.cn/server/minio/release/linux-amd64/minio\",\"赋予可执行权限：\",\"chmod +x minio\",\"前台启动：\",\"MINIO_ROOT_USER=admin MINIO_ROOT_PASSWORD=password ./minio server /mnt/data --console-address \\\":9001\\\"\",\"命令解释：\",\"MINIO_ROOT_USER=admin：指定MinIO的用户名\",\"MINIO_ROOT_PASSWORD=password：指定MinIO密码 （用户名和密码都可以省略，默认均为 minioadmin）\",\"./minio server：在 minio 所在目录下启动 minio 服务，可修改\",\"/mnt/data：指定数据存放位置，可以自定义修改\",\"--console-address \\\":9001\\\"：指定 MinIO 控制台的监听地址和端口\",\"后台启动：\",\"# 最简单的，只需要在最后面加上 & 即可，但关闭会话服务会停止 nohub ./minio server /mnt/data > /opt/minio/data/minio.log 2>&1 --console-address \\\":9001\\\" &\",\"命令解释：\",\"nohup：这是一个 Unix 命令，用于运行另一个命令在后台，并且忽略挂起（HUP）信号，即使你退出了终端或关闭了会话，该命令也会继续执行；\",\"> /opt/minio/data/minio.log：这部分是将标准输出（stdout）重定向到 /opt/minio/data/minio.log 文件，这意味着 MinIO 服务器的所有正常输出（如启动信息、状态更新等）都会被写入到这个日志文件中；\",\"2>&1：这部分是将标准错误输出（stderr）重定向到标准输出（stdout），即输出到 /opt/minio/data/minio.log 文件，这样，无论是标准输出还是错误输出，都会被写入到同一个日志文件中；\",\"&：这个符号是在命令的末尾，用于将命令放到后台执行，也就是即使你启动了 MinIO 服务器，你的终端或 shell 会话也不会被阻塞，你可以继续执行其他命令；\"]},\"363\":{\"h\":\"Docker 安装启动\",\"t\":[\"搜索 MinIO 镜像：\",\"docker search minio\",\"拉取 MinIO 镜像：\",\"docker pull minio/minio\",\"启动 MinIO 容器：\",\"docker run -p 9000:9000 -p 9001:9001 minio/minio server /mnt/docker/data --console-address \\\":9001\\\"\"]},\"364\":{\"h\":\"Windows 安装启动\",\"t\":[\"下载 Windows 版的 MinIO：\",\"https://dl.min.io/server/minio/release/windows-amd64/minio.exe\",\"进入到 minio.exe 所在的目录，导航栏输入 cmd 进入终端，执行：\",\"minio.exe server D:\\\\dev\\\\MinIO\\\\data --console-address \\\":9001\\\"\",\"启动 MinIO 服务，其中 D:\\\\dev\\\\MinIO\\\\data 是 MinIO 存储数据的目录路径\",\"在浏览器输入 http://localhost:9000/，登录 MinIO 服务器 web 管理后台\",\"提示\",\"默认用户名和密码都是 minioadmin\"]},\"365\":{\"h\":\"Windows 后台服务安装\",\"t\":[\"使用上述命令将 MinIO 在 Windows 上启动，关闭终端后服务就会停止。如果要使用 Windows 搭建 MinIO 服务器，需要将其注册为 Windows 服务。\",\"下载 WinSW-x64.exe：https://github.com/winsw/winsw/releases\",\"将 WinSW.exe 复制到自己指定的目录，重命名为 minio-server.exe.\",\"在同目录下创建 minio-server.xml。注意，xml 和 exe 必须同名。\",\"配置 minio-server.xml 文件，内容如下:\",\"<service> <id>minio-server</id> <name>minio-server</name> <description>minio文件存储服务</description> <executable>%BASE%\\\\minio.exe</executable> <arguments>server \\\"%BASE%\\\\data\\\"</arguments> <logpath>%BASE%\\\\logs</logpath> <log mode=\\\"roll-by-size-time\\\"> <sizeThreshold>10240</sizeThreshold> <pattern>yyyyMMdd</pattern> <autoRollAtTime>00:00:00</autoRollAtTime> <zipOlderThanNumDays>5<zipOlderThanNumDays> <zipDateFormat>yyyyMMdd</zipDateFormat> </log> </service>\",\"执行 cmd 命令注册系统服务\",\"minio-server.exe install\",\"卸载服务\",\"minio-server.exe uninstall\"]},\"366\":{\"c\":[\"中间件\"]},\"367\":{\"c\":[\"MinIO\"]},\"368\":{\"h\":\"MinIO 概述\",\"t\":[\"官网链接\",\"MinIO官网：https://min.io/\",\"中文官网：http://minio.org.cn/\",\"MinIO 是一个高性能的分布式对象存储系统，基于 Apache License v2.0 开源协议，兼容亚马逊 S3 云存储服务接口，非常适合存储大容量的数据，包括但不限于：\",\"文本数据：新闻报道、社交媒体文章、博客......\",\"语音数据：音频形式存储的数据，语音mp3文件......\",\"图像数据：各种图片......\",\"视频数据：各种视频、电影......\",\"非结构化数据：没有明确结构的数据，比如社交评论、日志文件......\"]},\"369\":{\"h\":\"什么是对象存储？\",\"t\":[\"对象存储（Object Storage）是一种数据存储架构，它以对象为单位来处理、存储和检索数据，每个对象都包含了数据本身以及元数据，适合存放任意类型的文件。通常通过基于 HTTP 或 HTTPS 协议的 API（应用程序编程接口）进行数据读写。常见的有阿里云对象存储服务（OSS）、腾讯云对象存储（COS）等。\",\"所以基于对象的形式， MinIO 存储的元数据主要包括对象的描述信息，如用户（account）、存储桶（bucket）以及存储桶索引（bucket index）等。\",\"对于企业来说，可以使用各种公有云提供的 OSS 服务，将业务数据存储在云上，既能节省存储成本，也能使用云存储服务提供的 API 接口，方便使用和管理数据。但对于数据传输的安全性和及时性有较高要求的业务来说，使用公有云的 OSS 服务，就要付出较高的公网带宽传输成本，以及对数据安全的保障服务。在这种情况下，利用 MinIO 轻便、高性能、可拓展性的特点，企业可以快速搭建自己的内部对象存储服务。\",\"当然，对于个人来说，MinIO 是 100% 开源的，这就意味着个人也可以基于 MinIO 搭建自己专属的对象存储服务器。\"]},\"370\":{\"h\":\"特点\",\"t\":[\"文档全面： MinIO 作为一款基于 Golang 语言开发的一款高性能的分布式式存储方案的开源项目，有十分完善的官方文档。\",\"MinIO 文档\",\"中文文档地址：https://www.minio.org.cn/docs/minio/\",\"高性能： MinIO 号称是目前速度最快的对象存储服务器。在标准硬件上，对象存储的读/写速度最高可以高达 183GB/s 和 171GB/s。对象存储可以作为主存储层，用来处理 Spark、Presto、TensorFlow、HAO.ai 等各种复杂工作负载以及成为 Hadoop HDFS 的替代品。\",\"云原生： 容器化、基于 K8S 的编排、多租户支持。 用作云原生应用程序的主要存储，和传统对象存储相比，云原生应用程序需要更高的吞吐量和更低的延迟。\",\"可拓展： 不同 MinIO 集群可以组成联邦，并形成一个全局的命名空间，并且支持跨越多个数据中心。 并且除了 MinIO 自己的文件系统，还支持 DAS、 JBODs、NAS、Google 云存储和 Azure Blob 存储。\",\"Amazon S3 标准兼容: 亚马逊云的 S3 API（接口协议） 是在全球范围内达到共识的对象存储的协议，是全世界内大家都认可的标准。MinIO 在很早的时候就采用了 S3 兼容协议，并且 MinIO 是第一个支持 S3 Select 的产品。 使用 Amazon S3 v2 / v4 API，可以使用 MinIO SDK，MinIO Client，AWS SDK 和 AWS CLI 访问 MinIO 服务器。\",\"支持全面： 目前 MinIO 支持市面主流的开发语言并且可以通过 SDK 快速集成快速集成使用。\",\"常用语言的 SDK\",\"GO SDK：https://github.com/minio/minio-go\",\"Java SDK：https://github.com/minio/minio-java\",\"Python SDK：https://github.com/minio/minio-py\",\"可视化管理界面： MinIO 除了通过传统的命令行进行操作之外，还提供可视化的操作管理界面，在服务安装后，可以直接通过浏览器登录系统，完成文件夹、文件的管理，非常方便使用。\",\"数据存储高容错： Minio 的存储机制使用纠删码（Erasure Code）和校验和（CheckSum）。 校验和：保护数据免受硬件故障和无声数据损坏。 纠删码：是一种恢复丢失和损坏数据的数学算法。通过数学算法将数据分割成多个数据块和校验块，并将这些块分散存储在不同的磁盘上。这种机制使得即使部分磁盘发生故障，也能通过剩余的数据块和校验块恢复原始数据，从而提高系统的可靠性和容错能力。 具体地，MinIO 使用 Reed-Solomon 码作为其纠删码算法，将一个对象拆分成 N/2 份数据和 N/2 份奇偶校验块。如果是 12 块盘，一个对象会被分成 6 个数据块、 6 个奇偶校验块，可以丢失任意 6 块盘（不管其是存放的数据块还是奇偶校验块），仍可以从剩下的盘中的数据进行恢复。 这样的设计，保证了即使在最坏的情况，即丢失一半数量的硬盘的情况下仍能保证数据的安全性。\"]},\"371\":{\"c\":[\"中间件\"]},\"372\":{\"c\":[\"MinIO\"]},\"373\":{\"h\":\"SpringBoot 整合 MinIO\"},\"374\":{\"h\":\"引入依赖\",\"t\":[\"<dependency> <groupId>io.minio</groupId> <artifactId>minio</artifactId> <version>8.5.9</version> </dependency>\"]},\"375\":{\"h\":\"配置文件\",\"t\":[\"MinIO 中的 Bucket、Object\",\"Bucket 是存储 Object 的逻辑空间，每个 Bucket 之间的数据是相互隔离的，对用户而言，相当于存放文件的顶层文件夹\",\"Object 是存储到 MinIO 的基本对象，对用户而言，相当于文件\",\"SpringBoot 使用 MinIO 非常方便，只需要创建 MinIOClient 即可，后续通过调用 API 对 MinIO 服务进行配置和操作。\",\"在 application.yml 中配置 MinIO 连接信息\",\"minio: endpoint: http://localhost:9000 # 服务器地址和端口 accessKey: minioadmin # minio用户名 secretKey: minioadmin # minio密码 bucket: user-bucket # 使用的存储桶（可选）\",\"添加 MinIO 实体类\",\"@Data @Component @ConfigurationProperties(prefix = \\\"minio\\\") public class MinIOInfo { private String endpoint; private String accessKey; private String secretKey; private String bucket; }\",\"将 MinIOClient 注册为 Bean 对象，后续通过注入 minioClient 对象即可实现对 MinIO 的操作。\",\"@Configuration public class Config { @Resource private MinIOInfo minIOInfo; @Bean public MinioClient minioClient() { //链式编程，构建MinioClient对象 return MinioClient.builder() .endpoint(minIOInfo.getEndpoint()) .credentials(minIOInfo.getAccessKey(), minIOInfo.getSecretKey()) .build(); } }\",\"支持多线程\",\"MinioClient 对象是单例的，那么有没有线程安全问题呢？\",\"答案是：没有线程安全问题。MinIO 官方团队表示，可以多个线程共同使用一个 MinIOClient 对象。\"]},\"376\":{\"h\":\"MinioClient 的常用 API\"},\"377\":{\"h\":\"Bucket 操作\",\"t\":[\"bucketExists()：用于检查指定的存储桶是否存在，返回布尔值，表示存储桶是否存在\",\" void test01() throws Exception { boolean isBucketExists = minioClient.bucketExists(BucketExistsArgs.builder().bucket(\\\"myfile\\\").build()); System.out.println(\\\"myfile目录是否存在：\\\" + isBucketExists); }\",\"makeBucket()：用于创建一个新的存储桶（bucket），需要指定存储桶的名称\",\" void test02() throws Exception { String bucketName = \\\"myfile2\\\"; boolean isBucketExists = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build()); if (!isBucketExists) { minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build()); } else { System.out.println(\\\"bucket已经存在，不需要创建\\\"); } String policyJsonString = \\\"{\\\\\\\"Version\\\\\\\" : \\\\\\\"2012-10-17\\\\\\\",\\\\\\\"Statement\\\\\\\":[{\\\\\\\"Sid\\\\\\\":\\\\\\\"PublicRead\\\\\\\",\\\\\\\"Effect\\\\\\\":\\\\\\\"Allow\\\\\\\",\\\\\\\"Principal\\\\\\\":{\\\\\\\"AWS\\\\\\\":\\\\\\\"*\\\\\\\"},\\\\\\\"Action\\\\\\\":[\\\\\\\"s3:GetObject\\\\\\\"],\\\\\\\"Resource\\\\\\\":[\\\\\\\"arn:aws:s3:::\\\" + bucketName + \\\"/*\\\\\\\"]}]}\\\"; //创建存储桶的时候，设置该存储桶里面的文件的访问策略，运行公开的读； minioClient.setBucketPolicy(SetBucketPolicyArgs.builder() .bucket(bucketName) .config(policyJsonString)//json串，里面是访问策略 .build()); }\",\"listBuckets()：用于列出用户有权访问的所有存储桶，返回存储桶的列表\",\" void test03() throws Exception { List<Bucket> bucketList = minioClient.listBuckets(); bucketList.forEach(bucket -> { System.out.println(bucket.name() + \\\" -- \\\" + bucket.creationDate()); }); }\",\"removeBucket()：用于删除一个已存在的存储桶（bucket），删除失败会抛出异常\",\" void test04() throws Exception { minioClient.removeBucket(RemoveBucketArgs.builder().bucket(\\\"myfile2\\\").build()); }\"]},\"378\":{\"h\":\"Object 操作\",\"t\":[\"putObject()：用于上传文件到指定的存储桶\",\" void test05() throws Exception { File file = new File(\\\"D:\\\\\\\\MinIO\\\\\\\\MinioClient.jpg\\\"); // 文件路径 ObjectWriteResponse objectWriteResponse = minioClient.putObject(PutObjectArgs.builder() .bucket(\\\"myfile\\\") .object(\\\"test.jpg\\\") .stream(new FileInputStream(file), file.length(), -1) // 使用stream流读取文件，自动获取文件大小 .build() ); System.out.println(objectWriteResponse); ObjectWriteResponse objectWriteResponse2 = minioClient.uploadObject(UploadObjectArgs.builder() .bucket(\\\"myfile\\\") .object(\\\"test2.jpg\\\") .filename(\\\"D:\\\\\\\\MinIO\\\\\\\\MinioClient.jpg\\\") // 指定文件路径 .build() ); System.out.println(objectWriteResponse); }\",\"statObject()：用于检查指定的对象（文件）的状态\",\" void test06() throws Exception { StatObjectResponse statObjectResponse = minioClient.statObject(StatObjectArgs.builder() .bucket(\\\"myfile\\\") .object(\\\"test.jpg\\\") .build() ); System.out.println(statObjectResponse); }\",\"getPresignedObjectUrl()：用于生成一个对象（文件）的签名URL，以便可以通过HTTP访问\",\" void test07() throws Exception { String presignedObjectUrl = minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder() .bucket(\\\"myfile\\\") .object(\\\"test.jpg\\\") .expiry(3, TimeUnit.MINUTES) .method(Method.GET) .build() ); System.out.println(presignedObjectUrl); }\",\"getObject()：用于从指定的存储桶中下载文件\",\" void test08() throws Exception { GetObjectResponse getObjectResponse = minioClient.getObject(GetObjectArgs.builder() .bucket(\\\"myfile\\\") .object(\\\"test.jpg\\\") .build() ); System.out.println(getObjectResponse.transferTo(new FileOutputStream(\\\"D:\\\\\\\\MinIO\\\\\\\\123.jpg\\\"))); }\",\"listObjects()：用于列出指定存储桶中的所有对象（文件）\",\" void test09() throws Exception { Iterable<Result<Item>> listObjects = minioClient.listObjects(ListObjectsArgs.builder() .bucket(\\\"myfile\\\") .build() ); listObjects.forEach( itemResult -> { try { Item item = itemResult.get(); System.out.println(item.objectName()); } catch (Exception e) { throw new RuntimeException(e); } }); }\",\"removeObject()：用于删除指定存储桶中的对象，需要指定存储桶名称和对象键\",\" void test10() throws Exception { minioClient.removeObject(RemoveObjectArgs.builder() .bucket(\\\"myfile\\\") .object(\\\"test.jpg\\\") .build() ); }\"]},\"379\":{\"c\":[\"中间件\"]},\"380\":{\"c\":[\"MinIO\"]},\"381\":{\"h\":\"1. 领导让我研究 Eureka 源码：启动过程\",\"t\":[\"转载自悟空聊架构，原文链接：领导让我研究 Eureka 源码 | 启动过程\"]},\"382\":{\"h\":\"一、初始化环境\",\"t\":[\"打开源码，找到这个启动类，EurekaBootStrap.java，在这个路径下：\",\"\\\\eureka\\\\eureka-core\\\\src\\\\main\\\\java\\\\com\\\\netflix\\\\eureka\\\\EurekaBootStrap.java\",\"启动时序图给大家画好了：\",\"初始化环境时序图\",\"启动代码：\",\"@Override public void contextInitialized(ServletContextEvent event) { initEurekaEnvironment(); initEurekaServerContext(); // 省略非核心代码 }\",\"分为两步，初始化环境和初始化上下文，先来看第一步。\",\"初始化环境的方法是 initEurekaEnvironment()，点进去看下这个方法做了什么。\",\"String dataCenter = ConfigurationManager.getConfigInstance() .getString(EUREKA_DATACENTER);\",\"就是获取配置管理类的一个单例。单例的实现方法用的是 双重检测 + volatile\",\"public static AbstractConfiguration getConfigInstance() { if (instance == null) { synchronized (ConfigurationManager.class) { if (instance == null) { instance = getConfigInstance(false)); } } } return instance; }\",\"instance 变量定义成了 volatile，保证可见性。\",\"static volatile AbstractConfiguration instance = null;\",\"线程 A 修改后，会将变量的值刷到主内存中，线程 B 会将主内存中的值刷回到自己的线程内存中，也就是说线程 A 改了后，线程 B 可以看到改了后的值。\",\"可以参考之前我写的文章：反制面试官 - 14 张原理图 - 再也不怕被问 volatile\"]},\"383\":{\"h\":\"二、初始化上下文\",\"t\":[\"初始化上下文的时序图如下：\",\"初始化上下文的时序图\",\"还是在 EurekaBootStrap.java 类中 contextInitialized 方法中，第二步调用了 initEurekaServerContext() 方法。\",\"initEurekaServerContext 里面主要的操作分为六步：\",\"第一步就是加载配置文件。\"]},\"384\":{\"h\":\"2.1 加载 eureka-server 配置文件\",\"t\":[\"基于接口的方式，获取配置项。\",\"initEurekaServerContext 方法创建了一个 eurekaServerConfig 对象：\",\"EurekaServerConfig eurekaServerConfig = new DefaultEurekaServerConfig();\",\"图片\",\"EurekaServerConfig 是一个接口，里面定义了很多获取配置项的方法。和定义常量来获取配置项的方式不同。比如获取 AccessId 和 SecretKey。\",\"String getAWSAccessId(); String getAWSSecretKey();\",\"还有另外一种获取配置项的方式：Config.get(Constants.XX_XX)，这种方式和上面的接口的方式相比：\",\"常量的方式较容易取错变量。因为常量的定义都是大写，很可能拿到 XX_XY 变量，而接口的方法是驼峰命名的，更容易辨识，对于相似的变量，取一个辨识度更高的方法名即可。\",\"常量的方式不易于修改。假如修改了常量名称，则需要全局搜索用到的地方，都改掉。如果是用接口的方式，则只需要修改接口方法中引用常量的地方即可，对于调用接口方法的地方是透明的。\"]},\"385\":{\"h\":\"2.1.1 创建默认的 eureka server 配置\",\"t\":[\"new DefaultEurekaServerConfig()，会创建出一个默认的 server 配置，构造方法会调用 init 方法：\",\"public DefaultEurekaServerConfig() { init(); }\"]},\"386\":{\"h\":\"2.2.2 加载配置文件\",\"t\":[\"private void init() { String env = ConfigurationManager.getConfigInstance() .getString(EUREKA_ENVIRONMENT, TEST); ConfigurationManager.getConfigInstance() .setProperty(ARCHAIUS_DEPLOYMENT_ENVIRONMENT, env); String eurekaPropsFile = EUREKA_PROPS_FILE.get(); try { ConfigurationManager.loadCascadedPropertiesFromResources(eurekaPropsFile); } catch (IOException e) { logger.warn( \\\"Cannot find the properties specified : {}. This may be okay if there are other environment \\\" + \\\"specific properties or the configuration is installed with a different mechanism.\\\", eurekaPropsFile); } }\",\"前两行是设置环境名称，后面几行是关键语句：获取配置文件，并放到 ConfigurationManager 单例中。\",\"来看下 EUREKA_PROPS_FILE.get(); 做了什么。\",\"首先 EUREKA_PROPS_FILE 是这样定义的：\",\"private static final DynamicStringProperty EUREKA_PROPS_FILE = DynamicPropertyFactory.getInstance() .getStringProperty(\\\"eureka.server.props\\\", \\\"eureka-server\\\");\",\"用单例工厂 DynamicPropertyFactory 设置了默认值 eureka-server，然后 EUREKA_PROP_FILE.get() 就会从缓存里面这个默认值。\",\"然后再调用 loadCascadedPropertiesFromResources 方法，来加载配置文件。\",\"首先会拼接默认的配置文件：\",\"String defaultConfigFileName = configName + \\\".properties\\\";\",\"然后获取默认配置文件的配置项：\",\"Properties props = getPropertiesFromFile(url);\",\"然后再拼接当前环境的配置文件\",\"String envConfigFileName = configName + \\\"-\\\" + environment + \\\".properties\\\";\",\"然后获取环境的配置文件的配置项并覆盖之前的默认配置项。\",\"props.putAll(envProps);\",\"putAll 方法就是将这些属性放到一个 map 中。\",\"然后这些配置项统一都交给 ConfigurationManager 来管理：\",\"config.loadProperties(props);<br>\",\"其实就是加载这个文件：\",\"eureka-server.properties\",\"打开这个文件后，发现里面有几个 demo 配置项，不过都被注释了。\"]},\"387\":{\"h\":\"2.1.3 真正的配置项在哪？\",\"t\":[\"上面可以看到 eureka-server.properties 都是空的，那配置项都配置在哪呢？\",\"我们之前说过，DefaultEurekaServerConfig 是实现了 EurekaServerConfig 接口的，如下所示：\",\"public class DefaultEurekaServerConfig implements EurekaServerConfig\",\"在 EurekaServerConfig 接口里面定义很多 get 方法，而 DefaultEurekaServerConfig 实现了这些 get 方法，来看下怎么实现的：\",\"@Override public int getWaitTimeInMsWhenSyncEmpty() { return configInstance.getIntProperty( namespace + \\\"waitTimeInMsWhenSyncEmpty\\\", (1000 * 60 * 5)).get(); }\",\"里面的类似这样的 getXX 的方法，都有一个 default value，比如上面的是 1000∗60∗5，所以我们可以知道，配置项是在 DefaultEurekaServerConfig 类中定义的。\",\"configInstance 这个单例又是 DynamicPropertyFactory 类型的，而在创建 configInstance 单例的时候，ConfigurationManager 还做了一些事情：将配置文件中的配置项放到 DynamicPropertyFactory 单例中，这样的话，DefaultEurekaServerConfig 中的 get 方法就可以获取到配置文件中的配置项了。具体的代码在 DynamicPropertyFactory 类中的 initWithConfigurationSource 方法中。\",\"结合上面的加载配置文件的分析，可以得出结论：如果配置文件中没有配置，则用 DefaultEurekaServerConfig 定义的默认值。\"]},\"388\":{\"h\":\"2.1.4 加载配置文件小结\",\"t\":[\"（1）创建一个 DefaultEurekaServerConfig 对象，实现了 EurekaServerConfig 接口，里面有很多获取配置项的方法。\",\"（2）DefaultEurekaServerConfig 构造函数中调用了 init 方法。\",\"（3）init 方法会加载 eureka-server.properties 配置文件，把里面的配置项都放到一个 map 中，然后交给 ConfigurationManager 来管理。\",\"（4）DefaultEurekaServerConfig 对象里面有很多 get 方法，里面通过 hard code 定义了配置项的名称，当调用 get 方法时，调用的是 DynamicPropertyFactory 的获取配置项的方法，这些配置项如果在配置文件中有，则用配置项的。配置文件中的配置项是通过 ConfigurationManager 赋值给 DynamicPropertyFactory 的。\",\"（5）当要获取配置项时，就调用对应的 get 方法，如果配置文件没有配置，则用默认值。\"]},\"389\":{\"h\":\"2.2 构造实例信息管理器\",\"t\":[\"结构如下图所示：\",\"实例信息管理器\"]},\"390\":{\"h\":\"2.2.1 初始化服务实例的配置 instanceConfig\",\"t\":[\"创建了一个 ApplicationInfoManager 对象，服务配置管理器，Application 可以理解为一个 Eureka client，作为一个应用程序向 Eureka 服务注册的。\",\"applicationInfoManager = new ApplicationInfoManager( instanceConfig, new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get());\",\"创建这个对象时，传了 instanceConfig，这个就是 eureka 实例的配置。这个 instanceConfig 和之前讲过的 EurekaServerConfig 很像，都是实现了一个接口，通过接口的 getXX 方法来获取配置信息。\"]},\"391\":{\"h\":\"2.2.2 构造服务实例 instanceInfo\",\"t\":[\"另外一个参数是 EurekaConfigBasedInstanceInfoProvider，这个 Provider 是用来构造 instanceInfo（服务实例）。\",\"怎么构造出来的呢？用到了设计模式中的 构造器模式，而用到的配置信息就是从 EurekaInstanceConfig 里面获取到的。\",\"InstanceInfo.Builder builder = InstanceInfo.Builder.newBuilder(vipAddressResolver); builder.setXX ... instanceInfo = builder.build();\",\"setXX 的代码如下所示：\",\"setXX 示例\"]},\"392\":{\"h\":\"2.2.3 小结\",\"t\":[\"（1）初始化服务实例的配置 instanceConfig。\",\"（2）用构造器模式初始化服务实例 instanceInfo。\",\"（3）将 instanceConfig 和 instanceInfo 传给了 ApplicationInfoManager，交由它来管理。\"]},\"393\":{\"h\":\"2.3 初始化 eureka-client\"},\"394\":{\"h\":\"2.3.1 初始化 eureka-client 配置\",\"t\":[\"eurekaClient 是包含在 eureka-server 服务中的，用来跟其他 eureka-server 进行通信的。为什么还会有其他 eureka-server，因为在集群环境中，是会有多个 eureka 服务的，而服务之间是需要相互通信的。\",\"初始化 eureka-client 代码：\",\"EurekaClientConfig eurekaClientConfig = new DefaultEurekaClientConfig(); eurekaClient = new DiscoveryClient(applicationInfoManager, eurekaClientConfig);\",\"第一行又是初始化了一个配置，和之前初始化 server config，instance config 的地方很相似。也是通过接口方法里面的 DynamicPropertyFactory 来获取配置项的值。\",\"eureka-client 也有一个加载配置文件的方法：\",\"Archaius1Utils.initConfig(CommonConstants.CONFIG_FILE_NAME);\",\"这个文件就是 eureka-client.properties。\",\"初始化配置的时候还初始化了一个 DefaultEurekaTransportConfig()，可以理解为传输的配置。\"]},\"395\":{\"h\":\"2.3.2 初始化 eurekaClient\",\"t\":[\"再来看下第二行代码，创建了一个 DiscoveryClient 对象，赋值给了 eurekaClient。\",\"创建 DiscoveryClient 对象的过程非常复杂，我们来细看下。\",\"（1） 拿到 eureka-client 的 config 、transport 的 config、instance 实例信息。\",\"（2） 判断是否要获取注册表信息，默认会获取。\",\"if (config.shouldFetchRegistry())\",\"如果在配置文件中定义了 fetch-registry: false，则不会获取，单机 eureka 情况下，配置为 false，因为自己就包含了注册表信息，而且也不需要从其他` eureka 实例上获取配置信息。当在集群环境下，才需要获取注册表信息。\",\"（3） 判断是否要把自己注册到其他 eureka 上，默认会注册。\",\"if (config.shouldRegisterWithEureka())\",\"单机情况下，配置 register-with-eureka: false。\",\"（4） 创建了一个支持任务调度的线程池。\",\"scheduler = Executors.newScheduledThreadPool(2, new ThreadFactoryBuilder() .setNameFormat(\\\"DiscoveryClient-%d\\\") .setDaemon(true) .build());\",\"（5） 创建了一个支持心跳检测的线程池。\",\"heartbeatExecutor = new ThreadPoolExecutor( 1, clientConfig.getHeartbeatExecutorThreadPoolSize(), 0, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactoryBuilder() .setNameFormat(\\\"DiscoveryClient-HeartbeatExecutor-%d\\\") .setDaemon(true) .build() ); // use direct handoff\",\"（6） 创建了一个支持缓存刷新的线程池。\",\"cacheRefreshExecutor = new ThreadPoolExecutor( 1, clientConfig.getCacheRefreshExecutorThreadPoolSize(), 0, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactoryBuilder() .setNameFormat(\\\"DiscoveryClient-CacheRefreshExecutor-%d\\\") .setDaemon(true) .build() ); // use direct handoff\",\"（7） 创建了一个支持 eureka client 和 eureka server 进行通信的对象\",\"eurekaTransport = new EurekaTransport();\",\"（8） 初始化调度任务\",\"initScheduledTasks();\",\"这个里面就会根据 fetch-registry 来判断是否需要开始调度执行刷新注册表信息，默认 30 s 调度一次。这个刷新的操作是由一个 CacheRefreshThread 线程来执行的。\",\"同样的，也会根据 register-with-eureka 来判断是否需要开始调度执行发送心跳，默认 30 s 调度一次。这个发送心跳的操作由一个 HeartbeatThread 线程来执行的。\",\"然后还创建了一个实例信息的副本，用来将自己本地的 instanceInfo 实例信息传给其他服务。什么时候发送这些信息呢？\",\"又创建了一个监听器 statusChangeListener，这个监听器监听到状态改变时，就调用副本的 onDemandUpdate() 方法，将 instanceInfo 传给其他服务。\"]},\"396\":{\"h\":\"2.4 处理注册相关的流程\"},\"397\":{\"h\":\"2.4.1 注册对象\",\"t\":[\"创建了一个 PeerAwareInstanceRegistryImpl 对象，通过名字可以知道是 可以感知集群实例注册表的实现类。通过官方注释可以知道这个类的作用：\",\"处理所有的拷贝操作到其他节点，让他们保持同步。复制的操作包含 注册，续约，摘除，过期和状态变更。\",\"当 eureka server 启动后，它尝试着从集群节点去获取所有的注册信息。如果获取失败了，当前 eureka server 在一段时间内不会让其他应用获取注册信息，默认 5 分钟。\",\"自我保护机制：如果应用丢失续约的占比在一定时间内超过了设定的百分比，则 eureka 会报警，然后停止执行过期应用。\",\"registry = new PeerAwareInstanceRegistryImpl( eurekaServerConfig, eurekaClient.getEurekaClientConfig(), serverCodecs, eurekaClient );\",\"PeerAwareInstanceRegistryImpl 继承 AbstractInstanceRegistry 抽象类，构造函数主要做了以下事情：\",\"初始化 server config 和 client config 的配置信息。\",\"this.serverConfig = serverConfig; this.clientConfig = clientConfig;\",\"初始化摘除的队列，队列长度为 1000。\",\"this.recentCanceledQueue = new CircularQueue<Pair<Long, String>>(1000);\",\"初始化注册的队列。\",\"this.recentRegisteredQueue = new CircularQueue<Pair<Long, String>>(1000);\"]},\"398\":{\"h\":\"2.5 初始化上下文\"},\"399\":{\"h\":\"2.5.1 集群节点帮助类\",\"t\":[\"创建了一个 PeerEurekaNodes，它是一个帮助类，来管理集群节点的生命周期。\",\"PeerEurekaNodes peerEurekaNodes = getPeerEurekaNodes( registry, eurekaServerConfig, eurekaClient.getEurekaClientConfig(), serverCodecs, applicationInfoManager );\"]},\"400\":{\"h\":\"2.5.2 默认上下文\",\"t\":[\"创建了一个 DefaultEurekaServerContext 默认上下文。\",\"serverContext = new DefaultEurekaServerContext( eurekaServerConfig, serverCodecs, registry, peerEurekaNodes, applicationInfoManager );\"]},\"401\":{\"h\":\"2.5.3 创建上下文的持有者\",\"t\":[\"创建了一个 holder，用来持有上下文。其他地方想要获取上下文，就通过 holder 来获取。用到了单例模式。\",\"EurekaServerContextHolder.initialize(serverContext);\",\"holder 的 initialize() 初始化方法是一个线程安全的方法。\",\"public static synchronized void initialize(EurekaServerContext serverContext) { holder = new EurekaServerContextHolder(serverContext); }\",\"定义了一个静态的私有的 holder 变量\",\"private static EurekaServerContextHolder holder;\",\"其他地方想获取 holder 的话，就通过 getInstance() 方法来获取 holder。\",\"public static EurekaServerContextHolder getInstance() { return holder; }\",\"然后想要获取上下文的就调用 holder 的 getServerContext() 方法。\",\"public EurekaServerContext getServerContext() { return this.serverContext; }\"]},\"402\":{\"h\":\"2.5.4 初始化上下文\",\"t\":[\"调用 serverContext 的 initialize() 方法来初始化。\",\"public void initialize() throws Exception { logger.info(\\\"Initializing ...\\\"); peerEurekaNodes.start(); registry.init(peerEurekaNodes); logger.info(\\\"Initialized\\\"); }\",\"peerEurekaNodes.start();\",\"这个里面就是启动了一个定时任务，将集群节点的 URL 放到集合里面，这个集合不包含本地节点的 url。每隔一定时间，就更新 eureka server 集群的信息。\",\"registry.init(peerEurekaNodes);\",\"这个里面会初始化注册表，将集群中的 注册信息获取下，然后放到注册表里面。\"]},\"403\":{\"h\":\"2.6 其他\"},\"404\":{\"h\":\"2.6.1 从相邻节点拷贝注册信息\",\"t\":[\"int registryCount = registry.syncUp();\"]},\"405\":{\"h\":\"2.6.2 eureka 监控\",\"t\":[\"EurekaMonitors.registerAllStats();\"]},\"406\":{\"h\":\"2.7 编译报错的解决方案\"},\"407\":{\"h\":\"1、异常1\",\"t\":[\"An exception occurred applying plugin request [id: 'nebula.netflixoss', version: '3.6.0']\",\"解决方案\",\"plugins { id 'nebula.netflixoss' version '5.1.1' }\"]},\"408\":{\"h\":\"2、异常2\",\"t\":[\"eureka-server-governator Plugin with id 'jetty' not found.\",\"参考 https://blog.csdn.net/Sino_Crazy_Snail/article/details/79300058\"]},\"409\":{\"h\":\"三、总结\",\"t\":[\"来一份 Eureka 启动的整体流程图\",\"Eureka 启动过程\"]},\"410\":{\"c\":[\"常用框架\"]},\"411\":{\"c\":[\"SpringCloud\"]},\"412\":{\"h\":\"如何实现 List 转 Map 后依然有序？\"},\"413\":{\"c\":[\"杂项\"]},\"414\":{\"c\":[\"工作笔记\"]},\"415\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"416\":{\"h\":\"For Offer\"},\"417\":{\"h\":\"Leetcode\"},\"418\":{\"h\":\"Note\"},\"419\":{\"h\":\"Template\"},\"420\":{\"h\":\"System Design\"},\"421\":{\"h\":\"Tool Build\"},\"422\":{\"h\":\"Hot100\"},\"423\":{\"h\":\"Java\"},\"424\":{\"h\":\"Language\"},\"425\":{\"h\":\"Min IO\"},\"426\":{\"h\":\"Middleware\"},\"427\":{\"h\":\"源码剖析\"},\"428\":{\"h\":\"Spring Cloud\"},\"429\":{\"h\":\"Work Note\"},\"430\":{\"h\":\"Sundry\"}},\"dirtCount\":0,\"index\":[[\"工作笔记\",{\"2\":{\"414\":1}}],[\"工具类\",{\"0\":{\"354\":1}}],[\"杂项\",{\"2\":{\"413\":1}}],[\"监控\",{\"0\":{\"405\":1}}],[\"监控完善\",{\"1\":{\"241\":1}}],[\"抽象类\",{\"1\":{\"397\":1}}],[\"抽象为一个排队的\",{\"1\":{\"238\":1}}],[\"摘除\",{\"1\":{\"397\":1}}],[\"续约\",{\"1\":{\"397\":1}}],[\"什么时候发送这些信息呢\",{\"1\":{\"395\":1}}],[\"什么是对象存储\",{\"0\":{\"369\":1}}],[\"什么是热评\",{\"0\":{\"240\":1}}],[\"情况下\",{\"1\":{\"395\":1}}],[\"情绪\",{\"1\":{\"240\":1}}],[\"拿到\",{\"1\":{\"395\":1}}],[\"怎么构造出来的呢\",{\"1\":{\"391\":1}}],[\"赋值给了\",{\"1\":{\"395\":1}}],[\"赋值给\",{\"1\":{\"388\":1}}],[\"赋予可执行权限\",{\"1\":{\"362\":1}}],[\"真正的配置项在哪\",{\"0\":{\"387\":1}}],[\"真正编码的时间只有5\",{\"1\":{\"246\":1}}],[\"张原理图\",{\"1\":{\"382\":1}}],[\"张表\",{\"1\":{\"257\":3}}],[\"线程来执行的\",{\"1\":{\"395\":2}}],[\"线程\",{\"1\":{\"382\":3}}],[\"线性代数方法解非齐次线性方程组\",{\"1\":{\"173\":1}}],[\"线性筛法求素数\",{\"1\":{\"178\":1}}],[\"线性筛\",{\"0\":{\"161\":1}}],[\"线性dp写法\",{\"1\":{\"89\":1}}],[\"线性dp\",{\"0\":{\"88\":1},\"2\":{\"316\":1}}],[\"省略非核心代码\",{\"1\":{\"382\":1}}],[\"打开这个文件后\",{\"1\":{\"386\":1}}],[\"打开源码\",{\"1\":{\"382\":1}}],[\"打印开头下标\",{\"1\":{\"199\":1}}],[\"领导让我研究\",{\"0\":{\"381\":1},\"1\":{\"381\":1}}],[\"链式编程\",{\"1\":{\"375\":1}}],[\"链表长度\",{\"1\":{\"347\":1}}],[\"链表\",{\"1\":{\"62\":1,\"347\":1}}],[\"注册信息获取下\",{\"1\":{\"402\":1}}],[\"注册\",{\"1\":{\"397\":1}}],[\"注册对象\",{\"0\":{\"397\":1}}],[\"注册为\",{\"1\":{\"375\":1}}],[\"注意multimap不支持此操作\",{\"1\":{\"210\":1}}],[\"注意乘除的先后顺序\",{\"1\":{\"165\":1}}],[\"注意特征\",{\"1\":{\"79\":1}}],[\"注意\",{\"1\":{\"51\":1,\"126\":1,\"198\":1,\"248\":1,\"365\":1}}],[\"连接信息\",{\"1\":{\"375\":1}}],[\"连通图\",{\"1\":{\"150\":1}}],[\"连通这两个顶点\",{\"1\":{\"149\":1}}],[\"引入依赖\",{\"0\":{\"374\":1}}],[\"引发一场评论区的狂欢\",{\"1\":{\"234\":1}}],[\"块盘\",{\"1\":{\"370\":2}}],[\"份奇偶校验块\",{\"1\":{\"370\":1}}],[\"份数据和\",{\"1\":{\"370\":1}}],[\"码作为其纠删码算法\",{\"1\":{\"370\":1}}],[\"纠删码\",{\"1\":{\"370\":1}}],[\"校验和\",{\"1\":{\"370\":1}}],[\"兼容协议\",{\"1\":{\"370\":1}}],[\"兼容亚马逊\",{\"1\":{\"368\":1}}],[\"亚马逊云的\",{\"1\":{\"370\":1}}],[\"云存储和\",{\"1\":{\"370\":1}}],[\"云存储服务接口\",{\"1\":{\"368\":1}}],[\"云原生应用程序需要更高的吞吐量和更低的延迟\",{\"1\":{\"370\":1}}],[\"云原生\",{\"1\":{\"370\":1}}],[\"号称是目前速度最快的对象存储服务器\",{\"1\":{\"370\":1}}],[\"号点的判断中需要进行\",{\"1\":{\"142\":1}}],[\"语言开发的一款高性能的分布式式存储方案的开源项目\",{\"1\":{\"370\":1}}],[\"语音mp3文件\",{\"1\":{\"368\":1}}],[\"语音数据\",{\"1\":{\"368\":1}}],[\"企业可以快速搭建自己的内部对象存储服务\",{\"1\":{\"369\":1}}],[\"轻便\",{\"1\":{\"369\":1}}],[\"腾讯云对象存储\",{\"1\":{\"369\":1}}],[\"腾讯老干妈大瓜背后\",{\"1\":{\"242\":1}}],[\"通常通过基于\",{\"1\":{\"369\":1}}],[\"通过官方注释可以知道这个类的作用\",{\"1\":{\"397\":1}}],[\"通过名字可以知道是\",{\"1\":{\"397\":1}}],[\"通过接口的\",{\"1\":{\"390\":1}}],[\"通过数学算法将数据分割成多个数据块和校验块\",{\"1\":{\"370\":1}}],[\"通过传入其他参数\",{\"1\":{\"344\":1}}],[\"通过增量加载的方式逐渐预热填充缓存\",{\"1\":{\"259\":1}}],[\"通过冗余数据的方式\",{\"1\":{\"251\":1}}],[\"通过冗余校验\",{\"1\":{\"237\":1}}],[\"通过组合与继承\",{\"1\":{\"241\":1}}],[\"通过多级冗余与跨级合并\",{\"1\":{\"241\":1}}],[\"通过梳理依赖关系和推导计算\",{\"1\":{\"241\":1}}],[\"通过召回机制来实现想要的\",{\"1\":{\"241\":1}}],[\"通过前面列出的公式\",{\"1\":{\"234\":1}}],[\"通过持续演进架构设计\",{\"1\":{\"222\":1}}],[\"通过定理求组合数c\",{\"1\":{\"177\":1}}],[\"通过预处理逆元的方式求组和数\",{\"0\":{\"176\":1}}],[\"通过初等行变换把\",{\"1\":{\"173\":1}}],[\"通过一个连接起来\",{\"1\":{\"147\":1}}],[\"通过下式\",{\"1\":{\"51\":1}}],[\"通过替换旧值为向量元素分配新值\",{\"1\":{\"42\":1}}],[\"通过\",{\"1\":{\"39\":3,\"178\":1}}],[\"日志文件\",{\"1\":{\"368\":1}}],[\"视频数据\",{\"1\":{\"368\":1}}],[\"视频游戏评论\",{\"1\":{\"222\":1}}],[\"音频形式存储的数据\",{\"1\":{\"368\":1}}],[\"音乐播放器\",{\"1\":{\"265\":1}}],[\"音乐剧\",{\"1\":{\"222\":1}}],[\"音乐制作\",{\"1\":{\"222\":1}}],[\"社交媒体文章\",{\"1\":{\"368\":1}}],[\"社区影响也大\",{\"1\":{\"240\":1}}],[\"卸载服务\",{\"1\":{\"365\":1}}],[\"配置为\",{\"1\":{\"395\":1}}],[\"配置项是在\",{\"1\":{\"387\":1}}],[\"配置项\",{\"1\":{\"386\":1}}],[\"配置文件中的配置项是通过\",{\"1\":{\"388\":1}}],[\"配置文件\",{\"0\":{\"375\":1,\"384\":1},\"1\":{\"388\":1}}],[\"配置\",{\"0\":{\"385\":1,\"394\":1},\"1\":{\"365\":1,\"385\":1,\"395\":1}}],[\"复制的操作包含\",{\"1\":{\"397\":1}}],[\"复制到自己指定的目录\",{\"1\":{\"365\":1}}],[\"复杂评论业务的服务编排\",{\"1\":{\"247\":1}}],[\"登录\",{\"1\":{\"364\":1}}],[\"执行\",{\"1\":{\"364\":1,\"365\":1}}],[\"执行缓存的更新操作\",{\"1\":{\"229\":1}}],[\"导航栏输入\",{\"1\":{\"364\":1}}],[\"导致部分数据被过滤\",{\"1\":{\"238\":1}}],[\"版的\",{\"1\":{\"364\":1}}],[\"版本2\",{\"0\":{\"110\":1}}],[\"版本1\",{\"0\":{\"109\":1}}],[\"启动的整体流程图\",{\"1\":{\"409\":1}}],[\"启动后\",{\"1\":{\"397\":1}}],[\"启动代码\",{\"1\":{\"382\":1}}],[\"启动时序图给大家画好了\",{\"1\":{\"382\":1}}],[\"启动过程\",{\"0\":{\"381\":1},\"1\":{\"381\":1,\"409\":1}}],[\"启动\",{\"1\":{\"363\":1,\"364\":1}}],[\"拉取\",{\"1\":{\"363\":1}}],[\"拉链法\",{\"0\":{\"207\":1}}],[\"镜像\",{\"1\":{\"363\":2}}],[\"文档\",{\"1\":{\"370\":1}}],[\"文档全面\",{\"1\":{\"370\":1}}],[\"文本数据\",{\"1\":{\"368\":1}}],[\"文件路径\",{\"1\":{\"378\":1}}],[\"文件的管理\",{\"1\":{\"370\":1}}],[\"文件\",{\"1\":{\"362\":2,\"365\":1,\"378\":3}}],[\"文章等业务下也能接入一样的评论系统\",{\"1\":{\"246\":1}}],[\"文章\",{\"1\":{\"19\":1}}],[\"信号\",{\"1\":{\"362\":1}}],[\"信息可以直接使用\",{\"1\":{\"257\":1}}],[\"控制台的监听地址和端口\",{\"1\":{\"362\":1}}],[\"控制精度\",{\"1\":{\"173\":1}}],[\"命令注册系统服务\",{\"1\":{\"365\":1}}],[\"命令\",{\"1\":{\"362\":1}}],[\"命令解释\",{\"1\":{\"362\":2}}],[\"命令来执行存在性判定\",{\"1\":{\"232\":1}}],[\"官方团队表示\",{\"1\":{\"375\":1}}],[\"官方仓库\",{\"1\":{\"361\":1}}],[\"官网链接\",{\"1\":{\"368\":1}}],[\"官网下载\",{\"1\":{\"361\":1}}],[\"安装启动\",{\"0\":{\"362\":1,\"363\":1,\"364\":1}}],[\"安装与部署\",{\"0\":{\"361\":1}}],[\"安全性设计\",{\"0\":{\"236\":1}}],[\"安全中间件\",{\"1\":{\"14\":1}}],[\"生成该pair的哈希值\",{\"1\":{\"357\":1}}],[\"生成新的字符串\",{\"1\":{\"344\":1}}],[\"应插入的位置\",{\"1\":{\"356\":1}}],[\"应用程序编程接口\",{\"1\":{\"369\":1}}],[\"应用程序服务器中间件\",{\"1\":{\"14\":1}}],[\"应用层补偿\",{\"1\":{\"235\":1}}],[\"范围为\",{\"1\":{\"355\":1}}],[\"降序\",{\"1\":{\"353\":1}}],[\"失败抛出异常\",{\"1\":{\"351\":3}}],[\"添加\",{\"1\":{\"375\":1}}],[\"添加元素e到队尾\",{\"1\":{\"351\":1}}],[\"添加一条从\",{\"1\":{\"337\":1}}],[\"添加一条边a\",{\"1\":{\"133\":1}}],[\"又创建了一个监听器\",{\"1\":{\"395\":1}}],[\"又实现\",{\"1\":{\"351\":1}}],[\"又是空节点\",{\"1\":{\"200\":1}}],[\"入栈元素e\",{\"1\":{\"350\":1}}],[\"入度为0\",{\"1\":{\"102\":1}}],[\"入度\",{\"1\":{\"102\":1}}],[\"仅仅实现栈的操作\",{\"1\":{\"350\":1}}],[\"继承\",{\"1\":{\"397\":1}}],[\"继承了\",{\"1\":{\"350\":1}}],[\"继续上述迭代处理即可\",{\"1\":{\"271\":1}}],[\"继续down\",{\"1\":{\"205\":1}}],[\"继续枚举\",{\"1\":{\"79\":1}}],[\"继续后移\",{\"1\":{\"50\":1}}],[\"键\",{\"1\":{\"349\":1}}],[\"键值对以\",{\"1\":{\"349\":1}}],[\"键值对乱序\",{\"1\":{\"349\":1}}],[\"映射\",{\"0\":{\"349\":1}}],[\"映射到1\",{\"1\":{\"129\":1}}],[\"传给其他服务\",{\"1\":{\"395\":1}}],[\"传给了\",{\"1\":{\"392\":1}}],[\"传了\",{\"1\":{\"390\":1}}],[\"传参\",{\"1\":{\"348\":1}}],[\"传入正则表达式分隔字符串\",{\"1\":{\"344\":1}}],[\"传入比较函数\",{\"1\":{\"211\":1}}],[\"传入t的地址\",{\"1\":{\"118\":1}}],[\"元素就不必实现\",{\"1\":{\"353\":1}}],[\"元素按自然顺序排序\",{\"1\":{\"348\":1}}],[\"元素乱序\",{\"1\":{\"348\":1}}],[\"元素存放在下标\",{\"1\":{\"211\":4}}],[\"底层是通过双向链表实现的\",{\"1\":{\"347\":1}}],[\"底层是通过数组\",{\"1\":{\"347\":1}}],[\"格式化字符串\",{\"1\":{\"344\":1}}],[\"拼接字符串\",{\"1\":{\"344\":1,\"345\":1}}],[\"忽略大小写进行比较\",{\"1\":{\"344\":1}}],[\"系列的返回值\",{\"1\":{\"344\":1}}],[\"系统始终以最大化方式消费\",{\"1\":{\"250\":1}}],[\"系统的瓶颈往往就来自于存储层\",{\"1\":{\"250\":1}}],[\"系统的并发处理能力有了极大提升\",{\"1\":{\"234\":1}}],[\"系统\",{\"1\":{\"247\":1}}],[\"系统可以考虑自行重试\",{\"1\":{\"238\":1}}],[\"回退状态\",{\"1\":{\"337\":1}}],[\"回复数\",{\"1\":{\"240\":1}}],[\"产生了循环依赖\",{\"1\":{\"337\":1}}],[\"产品上\",{\"1\":{\"257\":1}}],[\"产品侧定义是\",{\"1\":{\"231\":1}}],[\"产品形态上\",{\"1\":{\"231\":1}}],[\"想要学习课程\",{\"1\":{\"336\":1}}],[\"想象一下曝光数作为排序特征的变态要求\",{\"1\":{\"241\":1}}],[\"门课程\",{\"1\":{\"336\":1}}],[\"课程表\",{\"0\":{\"335\":1},\"1\":{\"335\":1}}],[\"四个方向\",{\"1\":{\"332\":1}}],[\"四个方向上连在一起的一片陆地组成一座岛屿\",{\"1\":{\"68\":1}}],[\"推荐\",{\"1\":{\"332\":1}}],[\"仍可以从剩下的盘中的数据进行恢复\",{\"1\":{\"370\":1}}],[\"仍为其初始值\",{\"1\":{\"331\":1}}],[\"仍然可能会短时\",{\"1\":{\"261\":1}}],[\"仍然处于一个动态权衡取舍的过程\",{\"1\":{\"241\":1}}],[\"仍然为前闭后开\",{\"1\":{\"211\":1}}],[\"减一\",{\"1\":{\"331\":1}}],[\"减少冗余\",{\"1\":{\"241\":1}}],[\"周围\",{\"1\":{\"330\":1}}],[\"值\",{\"1\":{\"330\":3}}],[\"值是0x3f3f3f3f\",{\"1\":{\"148\":1}}],[\"腐烂的橘子\",{\"0\":{\"329\":1},\"1\":{\"329\":1,\"330\":1}}],[\"窗口每次移动\",{\"1\":{\"319\":1}}],[\"滑动窗口\",{\"2\":{\"322\":1}}],[\"滑动窗口中的最大值\",{\"1\":{\"318\":1}}],[\"滑动窗口每次只向右移动一位\",{\"1\":{\"318\":1}}],[\"滑动窗口最大值\",{\"0\":{\"317\":1},\"1\":{\"317\":1}}],[\"往\",{\"1\":{\"308\":1}}],[\"往大了做就是评论平台\",{\"1\":{\"246\":1}}],[\"广搜需要通过队列实现\",{\"1\":{\"307\":1}}],[\"广告等\",{\"1\":{\"223\":1}}],[\"呢\",{\"1\":{\"306\":1}}],[\"淹没\",{\"1\":{\"307\":1}}],[\"淹了\",{\"1\":{\"306\":1}}],[\"淹掉\",{\"1\":{\"306\":1}}],[\"水\",{\"1\":{\"305\":1}}],[\"陆地\",{\"1\":{\"305\":1}}],[\"岛屿总是被水包围\",{\"1\":{\"305\":1}}],[\"岛屿数量\",{\"0\":{\"304\":1},\"1\":{\"304\":1}}],[\"岛屿边缘一个像素的范围会被海水淹没\",{\"1\":{\"68\":1}}],[\"升序\",{\"1\":{\"299\":1,\"353\":1}}],[\"短路原则\",{\"1\":{\"294\":1}}],[\"短时间内点赞率高\",{\"1\":{\"240\":1}}],[\"顺序链表\",{\"1\":{\"347\":1}}],[\"顺序数组列表\",{\"1\":{\"347\":1}}],[\"顺序不会乱\",{\"1\":{\"250\":1}}],[\"顺便更新最大直径\",{\"1\":{\"282\":1}}],[\"教程\",{\"2\":{\"266\":1}}],[\"冴羽\",{\"1\":{\"265\":1}}],[\"博客搭建系列\",{\"1\":{\"265\":1}}],[\"博客\",{\"1\":{\"265\":1,\"368\":1}}],[\"博弈论\",{\"0\":{\"181\":1}}],[\"搭建自己专属的对象存储服务器\",{\"1\":{\"369\":1}}],[\"搭建\",{\"1\":{\"265\":1,\"365\":1}}],[\"源码剖析\",{\"0\":{\"427\":1}}],[\"源码\",{\"0\":{\"381\":1},\"1\":{\"265\":1,\"381\":1}}],[\"沉浸式\",{\"1\":{\"265\":1}}],[\"插件\",{\"0\":{\"265\":1}}],[\"插入和删除快\",{\"1\":{\"347\":1}}],[\"插入字符串\",{\"1\":{\"288\":1}}],[\"插入的数是一个pair\",{\"1\":{\"210\":1}}],[\"插入一个元素\",{\"1\":{\"210\":1}}],[\"插入一个数\",{\"1\":{\"205\":1,\"210\":1}}],[\"插入一个字符串\",{\"1\":{\"200\":1}}],[\"插入\",{\"1\":{\"94\":1}}],[\"附加一个短时的\",{\"1\":{\"262\":1}}],[\"被高频次的访问\",{\"1\":{\"262\":1}}],[\"流量热点是因为突然热门的主题\",{\"1\":{\"262\":1}}],[\"秒的\",{\"1\":{\"261\":2}}],[\"投递一个\",{\"1\":{\"261\":1}}],[\"投递到消息队列\",{\"1\":{\"232\":1}}],[\"十二\",{\"1\":{\"261\":1}}],[\"跨进程的数据回源到存储层\",{\"1\":{\"261\":1}}],[\"跨机房重试\",{\"1\":{\"235\":1}}],[\"效率很高\",{\"1\":{\"259\":1}}],[\"序列化的方式存入\",{\"1\":{\"259\":2}}],[\"序列中的数字均不超过\",{\"1\":{\"92\":1}}],[\"属于非强制需要一致性考虑的\",{\"1\":{\"257\":1}}],[\"耦合\",{\"1\":{\"257\":1}}],[\"意思是从\",{\"1\":{\"257\":1}}],[\"意思就是把消息都暂存在\",{\"1\":{\"250\":1}}],[\"另外一个参数是\",{\"1\":{\"391\":1}}],[\"另外\",{\"1\":{\"331\":1,\"350\":1}}],[\"另外还保存了一些计数字段\",{\"1\":{\"257\":1}}],[\"另一方面对工程侧的要求主要是\",{\"1\":{\"237\":1}}],[\"另一方面也通过超时控制\",{\"1\":{\"235\":1}}],[\"另一方面\",{\"1\":{\"229\":1,\"242\":1}}],[\"另一棵树的子树\",{\"0\":{\"23\":1},\"1\":{\"23\":1}}],[\"自我保护机制\",{\"1\":{\"397\":1}}],[\"自己的文件系统\",{\"1\":{\"370\":1}}],[\"自定义实现最小\",{\"1\":{\"353\":1}}],[\"自定义排序算法\",{\"1\":{\"353\":1}}],[\"自定义排序时\",{\"1\":{\"349\":1}}],[\"自然排序\",{\"1\":{\"349\":1}}],[\"自增\",{\"1\":{\"257\":1}}],[\"自动获取文件大小\",{\"1\":{\"378\":1}}],[\"自动获得\",{\"1\":{\"95\":1}}],[\"自动进行热点识别\",{\"1\":{\"262\":1}}],[\"自动化策略放出\",{\"1\":{\"237\":1}}],[\"自动得到右端点\",{\"1\":{\"95\":1}}],[\"站的评论图\",{\"1\":{\"257\":1}}],[\"站的评论系统为样本\",{\"1\":{\"245\":1}}],[\"展示\",{\"1\":{\"251\":1}}],[\"毕竟是\",{\"1\":{\"251\":1}}],[\"索引即数据的组织顺序\",{\"1\":{\"259\":1}}],[\"索引内容分离\",{\"1\":{\"257\":1}}],[\"索引\",{\"1\":{\"257\":1}}],[\"索引越多写入速度会越慢\",{\"1\":{\"251\":1}}],[\"索道上的缆车最大承重量为\",{\"1\":{\"78\":1}}],[\"局部串行的生产消费方式\",{\"1\":{\"250\":1}}],[\"概述\",{\"0\":{\"368\":1}}],[\"概念的\",{\"1\":{\"250\":1}}],[\"概览\",{\"0\":{\"225\":1}}],[\"透穿到存储层\",{\"1\":{\"250\":1}}],[\"里面获取到的\",{\"1\":{\"391\":1}}],[\"里面通过\",{\"1\":{\"388\":1}}],[\"里面有很多获取配置项的方法\",{\"1\":{\"388\":1}}],[\"里面的类似这样的\",{\"1\":{\"387\":1}}],[\"里面定义了很多获取配置项的方法\",{\"1\":{\"384\":1}}],[\"里面主要的操作分为六步\",{\"1\":{\"383\":1}}],[\"里面是访问策略\",{\"1\":{\"377\":1}}],[\"里面全是对应的每一个value\",{\"1\":{\"349\":1}}],[\"里面各个数字有多少个\",{\"1\":{\"97\":1}}],[\"里查了\",{\"1\":{\"261\":1}}],[\"里查到了数据就更新这个缓存\",{\"1\":{\"261\":1}}],[\"里查询数据写缓存\",{\"1\":{\"261\":1}}],[\"里拿出对应的数据再更新到缓存里\",{\"1\":{\"249\":1}}],[\"里消费消息\",{\"1\":{\"249\":1}}],[\"了\",{\"1\":{\"249\":1,\"306\":1}}],[\"了解业务本身的本质\",{\"1\":{\"246\":1}}],[\"触发\",{\"1\":{\"249\":1}}],[\"惊群问题\",{\"1\":{\"249\":1}}],[\"现象\",{\"1\":{\"249\":1}}],[\"现在给定一个正整数\",{\"1\":{\"96\":1}}],[\"现在请你求出\",{\"1\":{\"94\":1}}],[\"现在要将\",{\"1\":{\"94\":1}}],[\"现在又让他们研究最长公共上升子序列了\",{\"1\":{\"92\":1}}],[\"现在又多了一个\",{\"1\":{\"49\":1}}],[\"现在有一个并查集\",{\"1\":{\"62\":1}}],[\"现在有一种新型的激光炸弹\",{\"1\":{\"51\":1}}],[\"现在有若干家族图谱关系\",{\"1\":{\"61\":1}}],[\"现在\",{\"1\":{\"50\":1,\"67\":1,\"69\":1}}],[\"业务耦合和功能耦合在一起\",{\"1\":{\"248\":1}}],[\"业务数据模型是最为复杂的\",{\"1\":{\"226\":1}}],[\"环形依赖\",{\"1\":{\"247\":1}}],[\"尽量避免\",{\"1\":{\"247\":1}}],[\"尽可能保证极端情况下用户无感\",{\"1\":{\"235\":1}}],[\"梳理清楚数据的走向和逻辑\",{\"1\":{\"247\":1}}],[\"统一\",{\"1\":{\"262\":1}}],[\"统一的平台业务逻辑在\",{\"1\":{\"247\":1}}],[\"统计新鲜橘子个数\",{\"1\":{\"332\":1}}],[\"统计新鲜橘子数\",{\"1\":{\"332\":1}}],[\"统计每个\",{\"1\":{\"262\":1}}],[\"统计叶子节点\",{\"1\":{\"97\":1}}],[\"统计大于10\",{\"1\":{\"97\":1}}],[\"统计1\",{\"1\":{\"97\":1}}],[\"订阅\",{\"1\":{\"247\":1}}],[\"他们使用自己研发的拉链存储来组织索引\",{\"1\":{\"259\":1}}],[\"他们会共享服务层的存储层\",{\"1\":{\"247\":1}}],[\"他的下属所能获得的最大快乐值\",{\"1\":{\"102\":2}}],[\"尤其划分运营平台\",{\"1\":{\"247\":1}}],[\"尤其是热评的头部\",{\"1\":{\"242\":1}}],[\"层序遍历\",{\"0\":{\"277\":1}}],[\"层子楼层\",{\"1\":{\"257\":1}}],[\"层收敛\",{\"1\":{\"247\":1}}],[\"层\",{\"1\":{\"247\":1}}],[\"网格\",{\"1\":{\"330\":1}}],[\"网关层\",{\"1\":{\"247\":1}}],[\"网络吞吐的关系等\",{\"1\":{\"234\":1}}],[\"网络抖动等异常场景下的数据错乱\",{\"1\":{\"232\":1}}],[\"网络和数据库之上\",{\"1\":{\"14\":1}}],[\"成功返回队首元素\",{\"1\":{\"351\":2}}],[\"成功返回true\",{\"1\":{\"351\":1}}],[\"成了一个环\",{\"1\":{\"337\":1}}],[\"成为某个业务领域的专家\",{\"1\":{\"246\":1}}],[\"成立\",{\"1\":{\"36\":1,\"171\":1}}],[\"深入到业务里面\",{\"1\":{\"246\":1}}],[\"深度优先遍历\",{\"0\":{\"135\":1}}],[\"才需要获取注册表信息\",{\"1\":{\"395\":1}}],[\"才会处理之前找到的节点\",{\"1\":{\"271\":1}}],[\"才能够确保队列元素整体有序\",{\"1\":{\"353\":1}}],[\"才能\",{\"1\":{\"259\":1}}],[\"才能设计出一个全面的架构\",{\"1\":{\"246\":1}}],[\"才能做出最佳的设计和抽象\",{\"1\":{\"246\":1}}],[\"才为\",{\"1\":{\"126\":1}}],[\"才为1\",{\"1\":{\"126\":1}}],[\"搞清楚系统背后的背景\",{\"1\":{\"246\":1}}],[\"理解整个产品体系在系统中的定位\",{\"1\":{\"246\":1}}],[\"百度评论中台的设计与探索\",{\"1\":{\"242\":1}}],[\"参考\",{\"1\":{\"408\":1}}],[\"参考过百度的贴吧\",{\"1\":{\"259\":1}}],[\"参考资料\",{\"1\":{\"242\":1}}],[\"参数可为字符串常量\",{\"1\":{\"344\":1}}],[\"参数可以是字符串常量\",{\"1\":{\"344\":1}}],[\"参数\",{\"1\":{\"150\":1}}],[\"逗乐每一个在互联网里冲浪的有缘人\",{\"1\":{\"242\":1}}],[\"期望能为用户带来更好的体验\",{\"1\":{\"242\":1}}],[\"持续探索排序策略\",{\"1\":{\"242\":1}}],[\"致力于为中文互联网提供一个和谐\",{\"1\":{\"242\":1}}],[\"愿景与规划\",{\"0\":{\"242\":1}}],[\"微调\",{\"1\":{\"241\":1}}],[\"支撑ai模型的快速部署快速迭代\",{\"1\":{\"241\":1}}],[\"支持多线程\",{\"1\":{\"375\":1}}],[\"支持市面主流的开发语言并且可以通过\",{\"1\":{\"370\":1}}],[\"支持全面\",{\"1\":{\"370\":1}}],[\"支持回复楼层\",{\"1\":{\"246\":1}}],[\"支持排序策略的叠加\",{\"1\":{\"241\":1}}],[\"支持入口层切流\",{\"1\":{\"235\":1}}],[\"支持无限盖楼回复\",{\"1\":{\"223\":1}}],[\"支持比较运算\",{\"1\":{\"210\":2}}],[\"既能节省存储成本\",{\"1\":{\"369\":1}}],[\"既实现\",{\"1\":{\"351\":1}}],[\"既要能找到对应的节点\",{\"1\":{\"288\":1}}],[\"既支持传统的静态的经验算分公式\",{\"1\":{\"241\":1}}],[\"既包括类似\",{\"1\":{\"240\":1}}],[\"贯穿上下文\",{\"1\":{\"241\":1}}],[\"拦截了大部分低价值重排请求\",{\"1\":{\"241\":1}}],[\"活跃程度等\",{\"1\":{\"241\":1}}],[\"活动或表演\",{\"1\":{\"222\":1}}],[\"近实时大窗口聚合计数等多种性能优化手段\",{\"1\":{\"241\":1}}],[\"受限于成本并未持久化\",{\"1\":{\"241\":1}}],[\"举个例子\",{\"1\":{\"241\":1}}],[\"举报等\",{\"1\":{\"223\":1}}],[\"决策豁免等\",{\"1\":{\"241\":1}}],[\"规则机执行命中后\",{\"1\":{\"241\":1}}],[\"规则机\",{\"1\":{\"241\":1}}],[\"离线数据\",{\"1\":{\"241\":1}}],[\"离散化\",{\"0\":{\"129\":1}}],[\"召回和排序两阶段都需要查询因子\",{\"1\":{\"241\":1}}],[\"召回处理中心\",{\"1\":{\"241\":1}}],[\"召回策略的工程设计\",{\"1\":{\"241\":1}}],[\"召回一批应该沉底的不良评论或者应该进前排的优秀评论\",{\"1\":{\"241\":1}}],[\"目前\",{\"1\":{\"370\":1}}],[\"目前形成的系统架构总体如下图所示\",{\"1\":{\"241\":1}}],[\"目标\",{\"1\":{\"314\":1}}],[\"目录\",{\"0\":{\"8\":1}}],[\"读数据\",{\"1\":{\"257\":1}}],[\"读的核心逻辑\",{\"0\":{\"249\":1}}],[\"读写性能都受影响\",{\"1\":{\"241\":1}}],[\"读取\",{\"1\":{\"237\":1,\"247\":1}}],[\"读取评论\",{\"1\":{\"223\":1,\"246\":1}}],[\"过期和状态变更\",{\"1\":{\"397\":1}}],[\"过大\",{\"1\":{\"241\":1}}],[\"过程\",{\"1\":{\"62\":1}}],[\"量级非常大\",{\"1\":{\"241\":1}}],[\"曝光的数据来源是客户端上报的展现日志\",{\"1\":{\"241\":1}}],[\"曝光数使用\",{\"1\":{\"241\":1}}],[\"曝光数\",{\"1\":{\"241\":1}}],[\"新闻报道\",{\"1\":{\"368\":1}}],[\"新增了\",{\"1\":{\"241\":2}}],[\"新节点的下一节点指向\",{\"1\":{\"191\":1}}],[\"预加载少量数据\",{\"1\":{\"259\":1}}],[\"预读\",{\"1\":{\"249\":1}}],[\"预先计算好排序分数并写入\",{\"1\":{\"241\":1}}],[\"预处理范围内的所有质数\",{\"1\":{\"178\":1}}],[\"预处理阶乘的余数和阶乘逆元的余数\",{\"1\":{\"176\":1}}],[\"预处理出\",{\"1\":{\"169\":1}}],[\"威尔逊排序\",{\"1\":{\"241\":1}}],[\"较大时查询性能特别差\",{\"1\":{\"241\":1}}],[\"较平衡\",{\"1\":{\"62\":1}}],[\"挑战与应对\",{\"0\":{\"241\":1}}],[\"追求用户价值平衡\",{\"1\":{\"240\":1,\"241\":1}}],[\"商业利益\",{\"1\":{\"240\":1}}],[\"商业软件\",{\"1\":{\"222\":1}}],[\"公司战略导向\",{\"1\":{\"240\":1}}],[\"公平组合游戏icg\",{\"0\":{\"183\":1}}],[\"→\",{\"1\":{\"240\":4}}],[\"咬文嚼字来说\",{\"1\":{\"240\":1}}],[\"介绍了什么样的评论更容易上热评前排\",{\"1\":{\"240\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}],[\"负责建立一套热评调控体系化能力\",{\"1\":{\"241\":1}}],[\"负反馈数\",{\"1\":{\"240\":1}}],[\"负数左补\",{\"1\":{\"126\":1}}],[\"负数按补码形式参加按位与运算\",{\"1\":{\"126\":1}}],[\"外露子评论\",{\"1\":{\"240\":1}}],[\"突出展示的产品形态\",{\"1\":{\"240\":1}}],[\"妙评\",{\"1\":{\"240\":1}}],[\"早期\",{\"1\":{\"249\":1}}],[\"早期的热评\",{\"1\":{\"240\":1}}],[\"早年间评论显示楼层号\",{\"1\":{\"229\":1}}],[\"实例上获取配置信息\",{\"1\":{\"395\":1}}],[\"实例信息传给其他服务\",{\"1\":{\"395\":1}}],[\"实例信息\",{\"1\":{\"395\":1}}],[\"实例信息管理器\",{\"1\":{\"389\":1}}],[\"实例的配置\",{\"1\":{\"390\":1}}],[\"实例化\",{\"1\":{\"348\":1,\"349\":1,\"351\":1,\"352\":1}}],[\"实体类\",{\"1\":{\"375\":1}}],[\"实时性放大存储压力\",{\"1\":{\"241\":1}}],[\"实验能力等\",{\"1\":{\"241\":1}}],[\"实际上是\",{\"1\":{\"343\":1}}],[\"实际就是按照评论点赞数降序\",{\"1\":{\"240\":1}}],[\"实际也会从计数上删除其回复\",{\"1\":{\"238\":1}}],[\"实现了\",{\"1\":{\"388\":1}}],[\"实现了这些\",{\"1\":{\"387\":1}}],[\"实现了一套声明式规则语法\",{\"1\":{\"241\":1}}],[\"实现对\",{\"1\":{\"357\":1}}],[\"实现类是\",{\"1\":{\"351\":1}}],[\"实现的\",{\"1\":{\"347\":1}}],[\"实现trie\",{\"1\":{\"286\":1}}],[\"实现起来太复杂而且很容易出错\",{\"1\":{\"261\":1}}],[\"实现上\",{\"1\":{\"247\":1}}],[\"实现并发提效\",{\"1\":{\"241\":1}}],[\"实现\",{\"0\":{\"286\":1},\"1\":{\"229\":1}}],[\"实现一些简洁的操作\",{\"1\":{\"45\":1}}],[\"串行处理\",{\"1\":{\"238\":1}}],[\"串行化\",{\"1\":{\"238\":1}}],[\"串每一个特定的下标\",{\"1\":{\"199\":1}}],[\"锁冲突\",{\"1\":{\"238\":1}}],[\"锁放大\",{\"1\":{\"238\":1}}],[\"越容易出现\",{\"1\":{\"238\":1}}],[\"越需要加锁的场景\",{\"1\":{\"238\":1}}],[\"综合评估而言\",{\"1\":{\"238\":1}}],[\"脏数据或者非常规的展示侧控制\",{\"1\":{\"238\":1}}],[\"甚至可以整合端上\",{\"1\":{\"252\":1}}],[\"甚至直接忽略\",{\"1\":{\"238\":1}}],[\"甚至新功能上线\",{\"1\":{\"238\":1}}],[\"某个数据项读取失败这一类的轻量级操作\",{\"1\":{\"238\":1}}],[\"某一个操作\",{\"1\":{\"182\":1}}],[\"严格保证时序性\",{\"1\":{\"237\":1}}],[\"提取bfs方法\",{\"1\":{\"332\":1}}],[\"提示\",{\"1\":{\"259\":1,\"364\":1}}],[\"提供统一的端上\",{\"1\":{\"252\":1}}],[\"提供统一化的数据检索能力\",{\"1\":{\"227\":1}}],[\"提供数据的读写接口\",{\"1\":{\"252\":1}}],[\"提升了特征读取的稳定性与性能上限\",{\"1\":{\"241\":1}}],[\"提出了较高要求\",{\"1\":{\"237\":1}}],[\"舆论安全问题更为泛化\",{\"1\":{\"238\":1}}],[\"舆论安全\",{\"0\":{\"238\":1},\"1\":{\"236\":1}}],[\"弱依赖\",{\"1\":{\"235\":1}}],[\"针对双机房架构下特有的副机房数据延迟故障\",{\"1\":{\"235\":1}}],[\"针对不同依赖服务所提供的\",{\"1\":{\"226\":1}}],[\"均支持多副本\",{\"1\":{\"235\":1}}],[\"冗余与降级\",{\"0\":{\"235\":1}}],[\"收集系统内部以及相应依赖方的一些的热点相关统计信息\",{\"1\":{\"234\":1}}],[\"感知到热点后即读取本地缓存\",{\"1\":{\"234\":1}}],[\"难以承载评论的大流量\",{\"1\":{\"234\":1}}],[\"很像\",{\"1\":{\"390\":1}}],[\"很可能拿到\",{\"1\":{\"384\":1}}],[\"很难确定是取到了null元素还是队列为空\",{\"1\":{\"351\":1}}],[\"很难找到一个完美的优化方案\",{\"1\":{\"241\":1}}],[\"很有可能访问第二页\",{\"1\":{\"249\":1}}],[\"很多依赖是体量相对小的业务单元\",{\"1\":{\"234\":1}}],[\"很少修改\",{\"1\":{\"231\":1}}],[\"聚合粒度\",{\"1\":{\"234\":1}}],[\"拆分为前置和后置两部分\",{\"1\":{\"234\":1}}],[\"痛定思痛\",{\"1\":{\"234\":1}}],[\"面对如此大的流量出现了严重延迟\",{\"1\":{\"234\":1}}],[\"面向业务组合的服务\",{\"1\":{\"252\":1}}],[\"面向平台\",{\"1\":{\"252\":1}}],[\"面向线上联机事务处理的\",{\"1\":{\"251\":1}}],[\"面向服务端场景\",{\"1\":{\"226\":1}}],[\"面向移动端\",{\"1\":{\"226\":1,\"247\":1}}],[\"延迟升高\",{\"1\":{\"250\":1}}],[\"延迟导致了过程不一致\",{\"1\":{\"238\":1}}],[\"延迟\",{\"1\":{\"232\":1}}],[\"刷题过程中常用\",{\"1\":{\"341\":1}}],[\"刷缓存\",{\"1\":{\"232\":1}}],[\"刷新\",{\"1\":{\"232\":1}}],[\"程序主动写缓存和\",{\"1\":{\"232\":1}}],[\"程序人生\",{\"0\":{\"19\":1}}],[\"消费能力就下降\",{\"1\":{\"250\":1}}],[\"消费者顺序执行\",{\"1\":{\"232\":1}}],[\"消息直接\",{\"1\":{\"261\":1}}],[\"消息\",{\"1\":{\"261\":1}}],[\"消息队列的最大用途是\",{\"1\":{\"247\":1}}],[\"消息中间件\",{\"1\":{\"14\":1}}],[\"判定存在后\",{\"1\":{\"232\":1}}],[\"判断该pair是否和对象元素e相等\",{\"1\":{\"357\":1}}],[\"判断字符串是否为空\",{\"1\":{\"344\":1}}],[\"判断条件\",{\"1\":{\"337\":1}}],[\"判断对应的两个节点是否相等\",{\"1\":{\"295\":1}}],[\"判断两个指针当前节点值是否相等\",{\"1\":{\"294\":1}}],[\"判断当前最大值的位置\",{\"1\":{\"319\":1}}],[\"判断当前元素与队尾元素是否满足单调性问题\",{\"1\":{\"198\":2}}],[\"判断当前a和c是否满足条件\",{\"1\":{\"79\":1}}],[\"判断队头是否滑出窗口\",{\"1\":{\"198\":1}}],[\"判断队头是否已经滑出窗口\",{\"1\":{\"198\":1}}],[\"判断队列是否为空\",{\"1\":{\"197\":1,\"353\":1}}],[\"判断栈是否为空\",{\"1\":{\"194\":1}}],[\"判断这条边的两个顶点是否有相同的父节点\",{\"1\":{\"149\":1}}],[\"判断\",{\"1\":{\"142\":2,\"149\":1,\"294\":2}}],[\"判断奇偶\",{\"1\":{\"126\":1}}],[\"判断b在这一位上有没有数\",{\"1\":{\"116\":1}}],[\"判断是否要把自己注册到其他\",{\"1\":{\"395\":1}}],[\"判断是否要获取注册表信息\",{\"1\":{\"395\":1}}],[\"判断是否为空白字符串\",{\"1\":{\"344\":1}}],[\"判断是否全为0\",{\"1\":{\"210\":1}}],[\"判断是否至少有一个1\",{\"1\":{\"210\":1}}],[\"判断是否有\",{\"1\":{\"116\":1}}],[\"判断是否变成了目标串\",{\"1\":{\"67\":1}}],[\"判断可能的答案更新区间\",{\"1\":{\"111\":1}}],[\"判断每一位上的数字是否用过\",{\"1\":{\"79\":1}}],[\"缓存穿透\",{\"0\":{\"261\":1}}],[\"缓存使用增量加载\",{\"1\":{\"259\":1}}],[\"缓存更多的\",{\"1\":{\"257\":1}}],[\"缓存的一致性依赖\",{\"1\":{\"232\":1}}],[\"缓存的重建\",{\"1\":{\"229\":1}}],[\"缓存设计\",{\"0\":{\"232\":1,\"259\":1}}],[\"于是在架构设计上\",{\"1\":{\"241\":1}}],[\"于是从2020年起\",{\"1\":{\"231\":1}}],[\"于是我们发现只有一个大于\",{\"1\":{\"156\":1}}],[\"批量查询楼中楼评论基础信息\",{\"1\":{\"231\":1}}],[\"批量查询根评论基础信息\",{\"1\":{\"231\":1}}],[\"审核\",{\"1\":{\"231\":1}}],[\"审核等\",{\"1\":{\"223\":1,\"246\":1}}],[\"联合主键\",{\"1\":{\"231\":1}}],[\"主题\",{\"1\":{\"259\":1}}],[\"主题一张表\",{\"1\":{\"258\":1}}],[\"主评论下面有子评论\",{\"1\":{\"257\":1}}],[\"主键\",{\"1\":{\"257\":1}}],[\"主键也是评论\",{\"1\":{\"231\":1}}],[\"主键是评论区\",{\"1\":{\"231\":1}}],[\"主键是评论\",{\"1\":{\"231\":1}}],[\"主要对集合进行操作\",{\"1\":{\"356\":1}}],[\"主要包含数学内的应用方法\",{\"1\":{\"355\":1}}],[\"主要包括各接口qps的关系\",{\"1\":{\"234\":1}}],[\"主要是为了省事\",{\"1\":{\"306\":1}}],[\"主要是账号服务\",{\"1\":{\"247\":1}}],[\"主要存的是评论实际内容\",{\"1\":{\"257\":1}}],[\"主要存的是评论的\",{\"1\":{\"257\":1}}],[\"主要职责是维护策略所需的全部\",{\"1\":{\"241\":1}}],[\"主要有几个关键细节\",{\"1\":{\"232\":1}}],[\"主要有3项缓存\",{\"1\":{\"232\":1}}],[\"主要有两个职责\",{\"1\":{\"229\":1}}],[\"主要服务于两种调用者\",{\"1\":{\"226\":1}}],[\"主要用来优化某些问题\",{\"1\":{\"192\":1}}],[\"主要应用\",{\"1\":{\"191\":1}}],[\"主要步骤\",{\"1\":{\"105\":1,\"106\":1}}],[\"楼中楼\",{\"1\":{\"246\":1}}],[\"楼中楼等\",{\"1\":{\"223\":1}}],[\"楼层号实际是计数器\",{\"1\":{\"229\":1}}],[\"客户端据此展示新评论\",{\"1\":{\"229\":1}}],[\"发现里面有几个\",{\"1\":{\"386\":1}}],[\"发音类似\",{\"1\":{\"287\":1}}],[\"发送\",{\"1\":{\"261\":1}}],[\"发生缓存\",{\"1\":{\"249\":1}}],[\"发通知等\",{\"1\":{\"229\":1}}],[\"发布评论\",{\"1\":{\"223\":1,\"246\":1}}],[\"策略考量\",{\"1\":{\"229\":1}}],[\"诸如评论发布等操作\",{\"1\":{\"229\":1}}],[\"削峰处理\",{\"1\":{\"229\":1,\"247\":1}}],[\"归纳而言\",{\"1\":{\"229\":1}}],[\"归并的一般写法如下\",{\"1\":{\"106\":1}}],[\"归并\",{\"1\":{\"106\":1}}],[\"归并每次都将中点作为分界点\",{\"1\":{\"106\":1}}],[\"归并排序\",{\"0\":{\"106\":1}}],[\"做了什么\",{\"1\":{\"386\":1}}],[\"做了一层封装\",{\"1\":{\"227\":1}}],[\"做该\",{\"1\":{\"261\":1}}],[\"做主键\",{\"1\":{\"257\":2}}],[\"做架构上的补充\",{\"1\":{\"229\":1}}],[\"协同\",{\"1\":{\"229\":2}}],[\"协议的\",{\"1\":{\"369\":1}}],[\"协议\",{\"1\":{\"14\":1}}],[\"布隆过滤器\",{\"1\":{\"228\":1}}],[\"集群的信息\",{\"1\":{\"402\":1}}],[\"集群节点帮助类\",{\"0\":{\"399\":1}}],[\"集群可以组成联邦\",{\"1\":{\"370\":1}}],[\"集合\",{\"0\":{\"346\":1,\"348\":1}}],[\"集合数量+1\",{\"1\":{\"180\":1}}],[\"集成了多级缓存\",{\"1\":{\"228\":1}}],[\"专注在评论数据处理\",{\"1\":{\"248\":1}}],[\"专注在评论功能的\",{\"1\":{\"247\":1}}],[\"专注于评论功能的原子化实现\",{\"1\":{\"228\":1}}],[\"专栏等内容\",{\"1\":{\"222\":1}}],[\"几乎是不二选择\",{\"1\":{\"227\":1}}],[\"几乎退化成\",{\"1\":{\"62\":1}}],[\"写速度最高可以高达\",{\"1\":{\"370\":1}}],[\"写入时可以先写评论内容表\",{\"1\":{\"258\":1}}],[\"写数据\",{\"1\":{\"257\":1}}],[\"写可以认为是\",{\"1\":{\"250\":1}}],[\"写的核心逻辑\",{\"0\":{\"250\":1}}],[\"写倾斜\",{\"1\":{\"238\":1}}],[\"写热点与读热点\",{\"0\":{\"234\":1}}],[\"写db\",{\"1\":{\"229\":1}}],[\"写后读的可靠性与实时性要求高等特征\",{\"1\":{\"227\":1}}],[\"写法示例\",{\"1\":{\"43\":1}}],[\"刚需关键词检索能力\",{\"1\":{\"227\":1}}],[\"保护数据免受硬件故障和无声数据损坏\",{\"1\":{\"370\":1}}],[\"保障用户的热评浏览体验\",{\"1\":{\"241\":1}}],[\"保证可见性\",{\"1\":{\"382\":1}}],[\"保证了即使在最坏的情况\",{\"1\":{\"370\":1}}],[\"保证元素添加顺序\",{\"1\":{\"348\":1}}],[\"保证对同一个\",{\"1\":{\"232\":1}}],[\"保证单个评论区和单个评论的更新操作是串行的\",{\"1\":{\"232\":1}}],[\"保证少数弱依赖抖动甚至完全不可用情况下评论服务可用\",{\"1\":{\"226\":1}}],[\"保存节点信息\",{\"1\":{\"102\":1}}],[\"超时控制和服务限流方案\",{\"1\":{\"226\":1}}],[\"服务的\",{\"1\":{\"394\":1}}],[\"服务中的\",{\"1\":{\"394\":1}}],[\"服务实例\",{\"1\":{\"391\":1}}],[\"服务注册的\",{\"1\":{\"390\":1}}],[\"服务配置管理器\",{\"1\":{\"390\":1}}],[\"服务进行配置和操作\",{\"1\":{\"375\":1}}],[\"服务进行降级\",{\"1\":{\"252\":1}}],[\"服务器地址和端口\",{\"1\":{\"375\":1}}],[\"服务器\",{\"1\":{\"362\":1,\"364\":1,\"365\":1,\"370\":1}}],[\"服务器的所有正常输出\",{\"1\":{\"362\":1}}],[\"服务来实现\",{\"1\":{\"252\":1}}],[\"服务去\",{\"1\":{\"249\":1}}],[\"服务内部\",{\"1\":{\"249\":1}}],[\"服务\",{\"1\":{\"247\":1,\"252\":1,\"362\":1,\"364\":1,\"365\":1,\"369\":2}}],[\"服务层\",{\"1\":{\"247\":2}}],[\"服务集群总qps与节点数的关系\",{\"1\":{\"234\":1}}],[\"服务编排拆分为若干个层级\",{\"1\":{\"226\":1}}],[\"服务或公司的评估\",{\"1\":{\"222\":1}}],[\"调度一次\",{\"1\":{\"395\":2}}],[\"调用\",{\"1\":{\"402\":1}}],[\"调用的是\",{\"1\":{\"388\":1}}],[\"调用关系复杂\",{\"1\":{\"226\":1}}],[\"调和级数\",{\"1\":{\"159\":1}}],[\"承载的功能模块相当之多\",{\"1\":{\"226\":1}}],[\"利用函数定义\",{\"1\":{\"326\":1}}],[\"利用给出的函数定义\",{\"1\":{\"325\":1}}],[\"利用\",{\"1\":{\"259\":1,\"369\":1}}],[\"利用客户端提供的布局能力\",{\"1\":{\"226\":1}}],[\"利用迭代器\",{\"1\":{\"211\":1}}],[\"好友点赞等\",{\"1\":{\"223\":1}}],[\"精选\",{\"1\":{\"223\":1}}],[\"置顶\",{\"1\":{\"223\":1}}],[\"显然\",{\"1\":{\"241\":1}}],[\"显然无解\",{\"1\":{\"171\":1}}],[\"显示评论数\",{\"1\":{\"223\":1}}],[\"热\",{\"1\":{\"240\":1}}],[\"热评\",{\"1\":{\"241\":1,\"242\":1}}],[\"热评列表都需要能够访问到全部评论\",{\"1\":{\"241\":1}}],[\"热评开始几乎完全依赖\",{\"1\":{\"241\":1}}],[\"热评用户流量大\",{\"1\":{\"240\":1}}],[\"热评排序最关键的计算模块\",{\"1\":{\"241\":1}}],[\"热评排序涉及的特征\",{\"1\":{\"241\":1}}],[\"热评排序是全排序\",{\"1\":{\"241\":1}}],[\"热评排序的挑战点主要在于\",{\"1\":{\"241\":1}}],[\"热评排序与\",{\"1\":{\"241\":1}}],[\"热评排序逻辑一般包括点赞数\",{\"1\":{\"240\":1}}],[\"热评排序等\",{\"1\":{\"238\":1}}],[\"热评设计\",{\"0\":{\"239\":1}}],[\"热评管理\",{\"1\":{\"223\":1}}],[\"热点\",{\"0\":{\"262\":1}}],[\"热点探测的实现基于单机的滑动窗口+lfu\",{\"1\":{\"234\":1}}],[\"热点探测等性能优化手段\",{\"1\":{\"228\":1}}],[\"热点评论区发评论的tps提升了10倍以上\",{\"1\":{\"234\":1}}],[\"热度排序\",{\"1\":{\"223\":1,\"246\":1}}],[\"热题\",{\"1\":{\"5\":1}}],[\"管理后台\",{\"1\":{\"364\":1}}],[\"管理平台\",{\"1\":{\"247\":1}}],[\"管理评论\",{\"1\":{\"223\":1,\"246\":1}}],[\"管理不断上升的系统复杂度\",{\"1\":{\"222\":1}}],[\"管理计算资源和网络通信\",{\"1\":{\"14\":1}}],[\"平衡二叉树\",{\"1\":{\"299\":1}}],[\"平衡\",{\"1\":{\"299\":1}}],[\"平台化之后增加一个评论区\",{\"1\":{\"231\":1}}],[\"平台化\",{\"1\":{\"222\":1}}],[\"平均情况下\",{\"1\":{\"143\":1}}],[\"形式都更丰富\",{\"1\":{\"222\":1}}],[\"形成的路径叫交替路\",{\"1\":{\"151\":1}}],[\"播放器中直接滚动播放的弹幕\",{\"1\":{\"222\":1}}],[\"随着业务不断发展\",{\"1\":{\"222\":1}}],[\"随之而来的是弹幕和评论区的各种讨论\",{\"1\":{\"222\":1}}],[\"随机打乱\",{\"1\":{\"211\":1}}],[\"舞蹈或艺术展览\",{\"1\":{\"222\":1}}],[\"戏剧\",{\"1\":{\"222\":1}}],[\"家用电器或电子计算机\",{\"1\":{\"222\":1}}],[\"硬件\",{\"1\":{\"222\":1}}],[\"书评\",{\"1\":{\"222\":1}}],[\"电影\",{\"1\":{\"368\":1}}],[\"电影评论\",{\"1\":{\"222\":1}}],[\"电子游戏\",{\"1\":{\"222\":1}}],[\"评论内容可以使用\",{\"1\":{\"258\":1}}],[\"评论内容表\",{\"1\":{\"257\":1}}],[\"评论索引与评论内容分开两张表来存\",{\"1\":{\"258\":1}}],[\"评论索引表和主题表用一个事务更新\",{\"1\":{\"258\":1}}],[\"评论索引表\",{\"1\":{\"257\":1}}],[\"评论总数等\",{\"1\":{\"257\":1}}],[\"评论楼层\",{\"1\":{\"257\":1}}],[\"评论主题表\",{\"1\":{\"257\":1}}],[\"评论详情页等类似场景\",{\"1\":{\"241\":1}}],[\"评论策略层\",{\"1\":{\"241\":1}}],[\"评论计数不准\",{\"1\":{\"238\":1}}],[\"评论数据合规\",{\"1\":{\"237\":1}}],[\"评论系统分为三张表\",{\"1\":{\"257\":1}}],[\"评论系统和可用性设计\",{\"0\":{\"255\":1},\"1\":{\"255\":1}}],[\"评论系统可能有的功能\",{\"1\":{\"246\":1}}],[\"评论系统功能和架构设计\",{\"0\":{\"245\":1},\"1\":{\"245\":1}}],[\"评论系统\",{\"1\":{\"246\":1},\"2\":{\"244\":1,\"254\":1,\"264\":1}}],[\"评论系统的数据安全还包括\",{\"1\":{\"237\":1}}],[\"评论系统的安全性设计可以分为\",{\"1\":{\"236\":1}}],[\"评论系统是一个同城读双活的架构\",{\"1\":{\"235\":1}}],[\"评论系统对数据库的选型要求\",{\"1\":{\"231\":1}}],[\"评论列表的业务数据模型也包含部分个性化信息\",{\"1\":{\"234\":1}}],[\"评论表的插入\",{\"1\":{\"234\":1}}],[\"评论表和评论区表的字段主要包括4种\",{\"1\":{\"231\":1}}],[\"评论回复的树形关系\",{\"1\":{\"231\":1}}],[\"评论区作为b站社区的重要组成部分\",{\"1\":{\"242\":1}}],[\"评论区评论计数的更新\",{\"1\":{\"234\":1}}],[\"评论区维度的串行\",{\"1\":{\"234\":1}}],[\"评论区的一些关键属性\",{\"1\":{\"231\":1}}],[\"评论区属性是一个整型的\",{\"1\":{\"231\":1}}],[\"评论区属性等\",{\"1\":{\"231\":1}}],[\"评论区状态是一个枚举值\",{\"1\":{\"231\":1}}],[\"评论区状态\",{\"1\":{\"231\":1}}],[\"评论需要至少两张表\",{\"1\":{\"231\":1}}],[\"评论异步处理层\",{\"1\":{\"229\":1}}],[\"评论基础服务层集成了多级缓存\",{\"1\":{\"235\":1}}],[\"评论基础服务层\",{\"1\":{\"228\":1}}],[\"评论管理服务层\",{\"1\":{\"227\":1}}],[\"评论是主体内容的外延\",{\"1\":{\"224\":1}}],[\"评论是人们对出版物\",{\"1\":{\"222\":1}}],[\"评论装扮\",{\"1\":{\"223\":1}}],[\"评论标签\",{\"1\":{\"223\":1}}],[\"评论富文本展示\",{\"1\":{\"223\":1}}],[\"评论一般还包括一些更高阶的基础功能\",{\"1\":{\"223\":1}}],[\"评论互动\",{\"1\":{\"223\":1}}],[\"评论的读热点集中在评论列表的第一页\",{\"1\":{\"234\":1}}],[\"评论的读热点也有一些典型的特征\",{\"1\":{\"234\":1}}],[\"评论的基础功能模块是相对稳定的\",{\"1\":{\"223\":1}}],[\"评论的作者还可以对作品进行内容分级以表明其相对价值\",{\"1\":{\"222\":1}}],[\"评论\",{\"1\":{\"222\":1,\"231\":3,\"242\":1}}],[\"维基百科\",{\"1\":{\"242\":1}}],[\"维基百科对\",{\"1\":{\"222\":1}}],[\"维护值和下标\",{\"1\":{\"319\":1}}],[\"维护一个\",{\"1\":{\"262\":1}}],[\"维护一个数组集合\",{\"1\":{\"205\":1}}],[\"维护一个动态数组\",{\"0\":{\"30\":1}}],[\"维护到祖宗节点距离的并查集\",{\"0\":{\"204\":1}}],[\"维护size的并查集\",{\"0\":{\"203\":1}}],[\"维护某种次序\",{\"1\":{\"128\":1}}],[\"背景\",{\"0\":{\"222\":1}}],[\"背包容量为\",{\"1\":{\"84\":1,\"85\":1,\"86\":1}}],[\"背包\",{\"0\":{\"84\":1}}],[\"背包问题常用枚举方法\",{\"1\":{\"83\":1}}],[\"背包问题\",{\"0\":{\"83\":1}}],[\"放到集合里面\",{\"1\":{\"402\":1}}],[\"放入\",{\"1\":{\"353\":1}}],[\"放入高位\",{\"1\":{\"115\":1}}],[\"放进去并更新右端点\",{\"1\":{\"217\":1}}],[\"放不进去则新开一组\",{\"1\":{\"217\":1}}],[\"唯一的区别是查找第一个大于\",{\"1\":{\"211\":1}}],[\"唯一不同的在于\",{\"1\":{\"199\":1}}],[\"大根堆\",{\"1\":{\"353\":1}}],[\"大量的请求会在\",{\"1\":{\"249\":1}}],[\"大\",{\"1\":{\"241\":1}}],[\"大致分为几个阶段\",{\"1\":{\"240\":1}}],[\"大致相同\",{\"1\":{\"211\":1}}],[\"大于某个与inf`\",{\"1\":{\"142\":1}}],[\"圧位\",{\"1\":{\"210\":1}}],[\"增量追加前可能出现缓存过期\",{\"1\":{\"232\":1}}],[\"增删改查的时间复杂度是\",{\"1\":{\"210\":1}}],[\"增广矩阵\",{\"1\":{\"173\":1}}],[\"增广路\",{\"1\":{\"151\":1}}],[\"本周会以\",{\"1\":{\"245\":1}}],[\"本身就是有序的\",{\"1\":{\"210\":1}}],[\"本题有自定义校验器\",{\"1\":{\"75\":1}}],[\"红黑树\",{\"1\":{\"210\":1}}],[\"弹出栈顶元素\",{\"1\":{\"210\":1}}],[\"弹出堆顶元素\",{\"1\":{\"210\":1}}],[\"弹出队头元素\",{\"1\":{\"210\":1}}],[\"弹出队尾元素\",{\"1\":{\"198\":1}}],[\"默认上下文\",{\"0\":{\"400\":1},\"1\":{\"400\":1}}],[\"默认\",{\"1\":{\"395\":2,\"397\":1}}],[\"默认会注册\",{\"1\":{\"395\":1}}],[\"默认会获取\",{\"1\":{\"395\":1}}],[\"默认用户名和密码都是\",{\"1\":{\"364\":1}}],[\"默认均为\",{\"1\":{\"362\":1}}],[\"默认实现小根堆\",{\"1\":{\"353\":1}}],[\"默认按元素的排序规则排序\",{\"1\":{\"353\":1}}],[\"默认按\",{\"1\":{\"210\":1}}],[\"默认是大根堆\",{\"1\":{\"210\":1}}],[\"默认染成\",{\"1\":{\"150\":1}}],[\"优先队列在添加元素的时候对元素的大小排序后再保存\",{\"1\":{\"353\":1}}],[\"优先队列\",{\"0\":{\"319\":1,\"353\":1},\"1\":{\"210\":1},\"2\":{\"322\":1}}],[\"优化产品功能及其技术实现\",{\"1\":{\"238\":1}}],[\"优化调用编排甚至技术方案重构等方式持续优化提升非核心功能的可用性\",{\"1\":{\"235\":1}}],[\"优化\",{\"0\":{\"26\":1}}],[\"起始下标\",{\"1\":{\"210\":1}}],[\"起点的入度为0\",{\"1\":{\"137\":1}}],[\"清空\",{\"1\":{\"210\":1}}],[\"清零\",{\"1\":{\"126\":1}}],[\"溢出的结果就是取模的结果\",{\"1\":{\"209\":1}}],[\"核心思想\",{\"1\":{\"209\":1}}],[\"核心思路\",{\"1\":{\"161\":1}}],[\"哈希函数\",{\"1\":{\"208\":1}}],[\"哈希函数离散化\",{\"1\":{\"207\":1}}],[\"哈希表\",{\"0\":{\"206\":1},\"1\":{\"210\":1}}],[\"跟两个儿子比较大小\",{\"1\":{\"205\":1}}],[\"及其映射关系\",{\"1\":{\"205\":1}}],[\"长远来看\",{\"1\":{\"257\":1}}],[\"长得非常平衡\",{\"1\":{\"205\":1}}],[\"长度为\",{\"1\":{\"314\":1}}],[\"长度为1的区间为0\",{\"1\":{\"95\":1}}],[\"长度是\",{\"1\":{\"313\":1}}],[\"长度+左端点\",{\"1\":{\"95\":1}}],[\"长度修改为5\",{\"1\":{\"31\":1}}],[\"长度\",{\"1\":{\"31\":2,\"281\":2,\"314\":1}}],[\"堆排序只能保证根是最大\",{\"1\":{\"353\":1}}],[\"堆是一棵\",{\"1\":{\"205\":1}}],[\"堆\",{\"0\":{\"205\":1}}],[\"堆优化版的dijkstra算法\",{\"0\":{\"141\":1},\"1\":{\"139\":1}}],[\"我做了一款vuepress的音乐可视化播放插件\",{\"1\":{\"265\":1}}],[\"我认为\",{\"1\":{\"259\":1}}],[\"我用数组记录一下你的位置\",{\"1\":{\"199\":1}}],[\"我们来细看下\",{\"1\":{\"395\":1}}],[\"我们之前说过\",{\"1\":{\"387\":1}}],[\"我们在插入字符串的时候将最后一个字符对应的节点的标志位置为\",{\"1\":{\"288\":1}}],[\"我们在不同阶段对热评的理解\",{\"1\":{\"241\":1}}],[\"我们如何知道找到的这部分是一个完整的字符串还是某个字符串的前缀呢\",{\"1\":{\"288\":1}}],[\"我们前面讲过使用\",{\"1\":{\"259\":1}}],[\"我们都在\",{\"1\":{\"252\":1}}],[\"我们一般使用\",{\"1\":{\"262\":1}}],[\"我们一开始是\",{\"1\":{\"248\":1}}],[\"我们一方面在异常情况下坚决限流熔断\",{\"1\":{\"235\":1}}],[\"我们使用了消息队列来进行逻辑异步化\",{\"1\":{\"249\":1}}],[\"我们使用\",{\"1\":{\"247\":1}}],[\"我们往小里做就是视频评论系统\",{\"1\":{\"246\":1}}],[\"我们必须要对这个系统的功能以及定位有一个清晰的了解\",{\"1\":{\"245\":1}}],[\"我们会持续优化产品功能\",{\"1\":{\"242\":1}}],[\"我们同样应用了这套热评系统\",{\"1\":{\"241\":1}}],[\"我们仍然在持续优化\",{\"1\":{\"241\":1}}],[\"我们更多依赖\",{\"1\":{\"241\":1}}],[\"我们对\",{\"1\":{\"240\":1}}],[\"我们做了重要级别划分\",{\"1\":{\"235\":1}}],[\"我们进行系统容量设计\",{\"1\":{\"234\":1}}],[\"我们利用\",{\"1\":{\"234\":1}}],[\"我们剖析瓶颈并做了如下优化\",{\"1\":{\"234\":1}}],[\"我们逐步迁移到tidb\",{\"1\":{\"231\":1}}],[\"我们采用的是mysql分表来满足这两个需求\",{\"1\":{\"231\":1}}],[\"我们的查询sql可能是\",{\"1\":{\"231\":1}}],[\"我们的目的是通过交换\",{\"1\":{\"67\":1}}],[\"我们基于数据库设计进行缓存设计\",{\"1\":{\"232\":1}}],[\"我们基于\",{\"1\":{\"227\":1}}],[\"我们将整个业务数据模型组装\",{\"1\":{\"226\":1}}],[\"我们将这样的一种表示称为正整数\",{\"1\":{\"96\":1}}],[\"我们只关心\",{\"1\":{\"199\":1}}],[\"我们关心对于每个不同的下标\",{\"1\":{\"199\":1}}],[\"我们需要找出\",{\"1\":{\"199\":1}}],[\"我们讨论的博弈问题一般都只考虑理想情况\",{\"1\":{\"182\":1}}],[\"我们把这种游戏称为nim博弈\",{\"1\":{\"182\":1}}],[\"我们就找到了目标值\",{\"1\":{\"108\":1}}],[\"我们就称这个区间\",{\"1\":{\"49\":1}}],[\"我们其实是希望\",{\"1\":{\"62\":1}}],[\"我们可以把题目的输入转化成一幅有向图\",{\"1\":{\"337\":1}}],[\"我们可以统计初始新鲜橘子的个数\",{\"1\":{\"331\":1}}],[\"我们可以将每一个字符串存储到树中\",{\"1\":{\"288\":1}}],[\"我们可以在进程内设置一个过期时间为\",{\"1\":{\"261\":1}}],[\"我们可以通过\",{\"1\":{\"49\":1}}],[\"我们可能习惯性地认为树的高度就是\",{\"1\":{\"62\":1}}],[\"我们先将它们的父节点设为自己\",{\"1\":{\"57\":1}}],[\"我们用一个数组\",{\"1\":{\"57\":1}}],[\"我们直接用二维数组读入数据\",{\"1\":{\"51\":1}}],[\"我们通常是把它当作一个结构体使用\",{\"1\":{\"45\":1}}],[\"非结构化数据\",{\"1\":{\"368\":1}}],[\"非结构性修改\",{\"1\":{\"347\":1}}],[\"非空返回true\",{\"1\":{\"352\":1}}],[\"非常方便\",{\"1\":{\"375\":1}}],[\"非常方便使用\",{\"1\":{\"370\":1}}],[\"非常适合存储大容量的数据\",{\"1\":{\"368\":1}}],[\"非常不利于迭代\",{\"1\":{\"248\":1}}],[\"非常有意思的说法是\",{\"1\":{\"199\":1}}],[\"非数据库写操作的其他业务逻辑\",{\"1\":{\"234\":1}}],[\"非匹配边\",{\"1\":{\"151\":1}}],[\"能走多远\",{\"1\":{\"199\":1}}],[\"能更快一点点\",{\"1\":{\"79\":1}}],[\"队头的值\",{\"1\":{\"197\":1}}],[\"队头不断出队\",{\"1\":{\"143\":1}}],[\"队列长度为\",{\"1\":{\"397\":1}}],[\"队列中元素数量\",{\"1\":{\"353\":1}}],[\"队列中元素个数\",{\"1\":{\"352\":1}}],[\"队列实现\",{\"1\":{\"277\":1}}],[\"队列里面存的是下标\",{\"1\":{\"198\":1}}],[\"队列\",{\"0\":{\"196\":1,\"351\":1},\"1\":{\"210\":1}}],[\"永远不会被输出\",{\"1\":{\"195\":2}}],[\"向前缀树中插入字符串\",{\"1\":{\"287\":1}}],[\"向上返回结果\",{\"1\":{\"270\":1}}],[\"向栈顶插入一个元素\",{\"1\":{\"210\":1}}],[\"向栈顶插入一个数\",{\"1\":{\"194\":1}}],[\"向队尾插入一个元素\",{\"1\":{\"210\":1}}],[\"向队尾插入一个数\",{\"1\":{\"197\":1}}],[\"向哈希表中插入一个数\",{\"1\":{\"207\":1}}],[\"向中间移动\",{\"1\":{\"105\":1}}],[\"普通队列\",{\"0\":{\"197\":1},\"1\":{\"350\":1}}],[\"普通栈\",{\"0\":{\"194\":1}}],[\"普通数组\",{\"1\":{\"44\":1}}],[\"栈顶的值\",{\"1\":{\"194\":1}}],[\"栈数组从0开始\",{\"1\":{\"194\":1}}],[\"栈\",{\"0\":{\"193\":1,\"350\":1},\"1\":{\"210\":1}}],[\"双重检测\",{\"1\":{\"382\":1}}],[\"双端队列\",{\"0\":{\"352\":1},\"1\":{\"210\":1,\"350\":1}}],[\"双链表\",{\"0\":{\"192\":1}}],[\"双指针算法\",{\"0\":{\"128\":1}}],[\"任何一个公平组合游戏都可以转化为有向图游戏\",{\"1\":{\"184\":1}}],[\"任何一个合数都能写成几个质数相乘的形式\",{\"1\":{\"159\":1}}],[\"胜负判定也比较复杂\",{\"1\":{\"183\":1}}],[\"整合\",{\"0\":{\"373\":1}}],[\"整合统一平台测的逻辑\",{\"1\":{\"252\":1}}],[\"整理\",{\"1\":{\"341\":1}}],[\"整个堆并不是有序的\",{\"1\":{\"353\":1}}],[\"整个评论服务还会依赖一些外部\",{\"1\":{\"247\":1}}],[\"整个数据的展示都是通过\",{\"1\":{\"247\":1}}],[\"整个有向图游戏g的sg函数值被定义为有向图游戏起点s的sg函数值\",{\"1\":{\"186\":1}}],[\"整局游戏第一个行动的称为先手\",{\"1\":{\"182\":1}}],[\"整数分解\",{\"1\":{\"157\":1}}],[\"整数二分\",{\"0\":{\"112\":1}}],[\"留给后手都是一个必胜状态时\",{\"1\":{\"182\":1}}],[\"留给后手是一个必败状态时\",{\"1\":{\"182\":1}}],[\"必然在\",{\"1\":{\"314\":1}}],[\"必须同名\",{\"1\":{\"365\":1}}],[\"必须实现\",{\"1\":{\"353\":1}}],[\"必须\",{\"1\":{\"336\":1}}],[\"必须要判定\",{\"1\":{\"232\":1}}],[\"必须容量大\",{\"1\":{\"231\":1}}],[\"必须有事务\",{\"1\":{\"231\":1}}],[\"必须首先判断两个数是否相等\",{\"1\":{\"126\":1}}],[\"必败状态\",{\"1\":{\"182\":1}}],[\"必胜状态\",{\"1\":{\"182\":1}}],[\"必胜状态和必败状态\",{\"1\":{\"182\":1}}],[\"跳出这轮循环\",{\"1\":{\"180\":1}}],[\"选择\",{\"1\":{\"313\":1}}],[\"选择的是评论区\",{\"1\":{\"232\":1}}],[\"选用\",{\"1\":{\"232\":1}}],[\"选出右端点最大的\",{\"1\":{\"218\":1}}],[\"选中奇数个集合\",{\"1\":{\"180\":1}}],[\"选中一个集合\",{\"1\":{\"180\":1}}],[\"选中的集合数量\",{\"1\":{\"180\":1}}],[\"选中集合对应质数的乘积\",{\"1\":{\"180\":1}}],[\"选了某个节点就不能选父节点和子节点\",{\"1\":{\"102\":1}}],[\"至少有一个不在\",{\"1\":{\"314\":1}}],[\"至少选中一个集合\",{\"1\":{\"180\":1}}],[\"至少需要进行多少次操作\",{\"1\":{\"94\":1}}],[\"至少需要移动多少次\",{\"1\":{\"66\":1}}],[\"根评论数\",{\"1\":{\"231\":1}}],[\"根节点小于等于左右两个子节点\",{\"1\":{\"205\":1}}],[\"根节点相同\",{\"1\":{\"25\":1}}],[\"根据当前字符获取对应的子节点\",{\"1\":{\"289\":1}}],[\"根据评论区的评论数\",{\"1\":{\"241\":1}}],[\"根据具体问题\",{\"1\":{\"204\":1}}],[\"根据容斥原理\",{\"1\":{\"180\":1}}],[\"卡特兰数\",{\"0\":{\"179\":1}}],[\"方便使用和管理数据\",{\"1\":{\"369\":1}}],[\"方便\",{\"1\":{\"257\":1}}],[\"方便统一和准入平台\",{\"1\":{\"252\":1}}],[\"方法来初始化\",{\"1\":{\"402\":1}}],[\"方法来获取\",{\"1\":{\"401\":1}}],[\"方法来获取配置信息\",{\"1\":{\"390\":1}}],[\"方法来拼接\",{\"1\":{\"343\":1}}],[\"方法时\",{\"1\":{\"388\":1}}],[\"方法会加载\",{\"1\":{\"388\":1}}],[\"方法就可以获取到配置文件中的配置项了\",{\"1\":{\"387\":1}}],[\"方法就是将这些属性放到一个\",{\"1\":{\"386\":1}}],[\"方法创建了一个\",{\"1\":{\"384\":1}}],[\"方法中\",{\"1\":{\"383\":1,\"387\":1}}],[\"方法返回null时\",{\"1\":{\"351\":1}}],[\"方法也相同\",{\"1\":{\"350\":1}}],[\"方法\",{\"1\":{\"178\":1,\"383\":1,\"385\":1,\"386\":1,\"387\":2,\"388\":3,\"395\":1,\"401\":1}}],[\"方程的两边同时乘上一个非00数不改变方程的解\",{\"1\":{\"173\":1}}],[\"方程组中的系数为实数\",{\"1\":{\"173\":1}}],[\"定制排序\",{\"1\":{\"349\":1}}],[\"定理\",{\"1\":{\"177\":1,\"182\":1,\"187\":1}}],[\"定理求组合数\",{\"0\":{\"177\":1}}],[\"定义了一个静态的私有的\",{\"1\":{\"401\":1}}],[\"定义了配置项的名称\",{\"1\":{\"388\":1}}],[\"定义了优先级\",{\"1\":{\"237\":1}}],[\"定义的默认值\",{\"1\":{\"387\":1}}],[\"定义成小根堆的方式\",{\"1\":{\"210\":1}}],[\"定义有向图游戏g\",{\"1\":{\"187\":1}}],[\"定义sg\",{\"1\":{\"186\":1}}],[\"定义mex\",{\"1\":{\"185\":1}}],[\"定义一个小根堆\",{\"1\":{\"141\":1}}],[\"定义一个借位的情况\",{\"1\":{\"116\":1}}],[\"定义一个二维动态数组\",{\"1\":{\"30\":1}}],[\"定义区间为闭区间\",{\"1\":{\"111\":1}}],[\"定义\",{\"1\":{\"49\":1,\"126\":2,\"314\":1,\"326\":1}}],[\"定义时初始化\",{\"1\":{\"30\":1}}],[\"卢卡斯\",{\"0\":{\"177\":1}}],[\"乘积大于n\",{\"1\":{\"180\":1}}],[\"乘任意一个\",{\"1\":{\"176\":1}}],[\"乘法逆元\",{\"1\":{\"176\":1}}],[\"乘法逆元的定义\",{\"1\":{\"176\":1}}],[\"≡\",{\"1\":{\"176\":1}}],[\"费马小定理\",{\"1\":{\"176\":1}}],[\"∗1​=b\",{\"1\":{\"177\":1}}],[\"∗1∗b\",{\"1\":{\"177\":1}}],[\"∗b\",{\"1\":{\"177\":1}}],[\"∗infact\",{\"1\":{\"176\":2}}],[\"∗\",{\"1\":{\"176\":1,\"177\":9}}],[\"∗y\",{\"1\":{\"171\":1}}],[\"未确定阶梯型的行\",{\"1\":{\"173\":1}}],[\"未染色的点\",{\"1\":{\"150\":1}}],[\"未染色\",{\"1\":{\"150\":1}}],[\"适用题型\",{\"1\":{\"175\":1}}],[\"适用于求解包含\",{\"1\":{\"173\":1}}],[\"适合存放任意类型的文件\",{\"1\":{\"369\":1}}],[\"适合稀疏图\",{\"1\":{\"139\":1}}],[\"适合稠密图\",{\"1\":{\"139\":1}}],[\"阶梯型矩阵\",{\"1\":{\"173\":1}}],[\"化为\",{\"1\":{\"173\":1}}],[\"初等行\",{\"1\":{\"173\":1}}],[\"初始的烂橘子\",{\"1\":{\"332\":1}}],[\"初始为前缀树的根节点\",{\"1\":{\"288\":2}}],[\"初始时队列里只有起始点\",{\"1\":{\"143\":1}}],[\"初始值\",{\"1\":{\"95\":1}}],[\"初始最坏情况下一只猫一辆车\",{\"1\":{\"78\":1}}],[\"初始高度为1\",{\"1\":{\"62\":1}}],[\"初始根节点为它自己\",{\"1\":{\"62\":1}}],[\"初始化方法是一个线程安全的方法\",{\"1\":{\"401\":1}}],[\"初始化注册的队列\",{\"1\":{\"397\":1}}],[\"初始化摘除的队列\",{\"1\":{\"397\":1}}],[\"初始化调度任务\",{\"1\":{\"395\":1}}],[\"初始化配置的时候还初始化了一个\",{\"1\":{\"394\":1}}],[\"初始化服务实例的配置\",{\"0\":{\"390\":1},\"1\":{\"392\":1}}],[\"初始化上下文的时序图\",{\"1\":{\"383\":1}}],[\"初始化上下文的时序图如下\",{\"1\":{\"383\":1}}],[\"初始化上下文\",{\"0\":{\"383\":1,\"398\":1,\"402\":1}}],[\"初始化环境的方法是\",{\"1\":{\"382\":1}}],[\"初始化环境和初始化上下文\",{\"1\":{\"382\":1}}],[\"初始化环境时序图\",{\"1\":{\"382\":1}}],[\"初始化环境\",{\"0\":{\"382\":1}}],[\"初始化有两种\",{\"1\":{\"344\":1}}],[\"初始化时间为\",{\"1\":{\"332\":1}}],[\"初始化时间\",{\"1\":{\"331\":1}}],[\"初始化前缀树对象\",{\"1\":{\"287\":1}}],[\"初始化find\",{\"1\":{\"204\":1}}],[\"初始化各个顶点在不同的集合中\",{\"1\":{\"149\":1}}],[\"初始化大于1的区间为最大\",{\"1\":{\"95\":1}}],[\"初始化父亲为它自己\",{\"1\":{\"61\":1}}],[\"初始化\",{\"0\":{\"57\":1,\"393\":1,\"394\":1,\"395\":1},\"1\":{\"49\":1,\"55\":1,\"62\":2,\"105\":1,\"133\":1,\"146\":1,\"191\":1,\"192\":1,\"202\":1,\"203\":1,\"204\":1,\"209\":1,\"288\":1,\"308\":1,\"314\":1,\"394\":1,\"397\":1}}],[\"初始化为它自身\",{\"1\":{\"205\":1}}],[\"初始化为\",{\"1\":{\"43\":1}}],[\"扩展欧几里得\",{\"1\":{\"172\":1}}],[\"扩展欧几里得算法\",{\"0\":{\"170\":1}}],[\"∀i∈\",{\"1\":{\"172\":1}}],[\"事情的初衷\",{\"1\":{\"246\":1}}],[\"事务更新\",{\"1\":{\"257\":1}}],[\"事务加锁\",{\"1\":{\"238\":1}}],[\"事务中间件\",{\"1\":{\"14\":1}}],[\"事实上\",{\"1\":{\"171\":1}}],[\"=1\",{\"1\":{\"171\":1}}],[\"−\",{\"1\":{\"171\":1}}],[\"−1\",{\"1\":{\"67\":1,\"331\":2}}],[\"−10000⩽ai​⩽10000\",{\"1\":{\"50\":1}}],[\"$\",{\"1\":{\"171\":1}}],[\"$gcd\",{\"1\":{\"171\":1}}],[\"​=\",{\"1\":{\"177\":1}}],[\"​=a\",{\"1\":{\"176\":1}}],[\"​\",{\"1\":{\"171\":2,\"176\":1,\"177\":1}}],[\"​​\",{\"1\":{\"50\":1}}],[\"反制面试官\",{\"1\":{\"382\":1}}],[\"反复思考\",{\"1\":{\"246\":1}}],[\"反之则为\",{\"1\":{\"180\":1}}],[\"反之\",{\"1\":{\"171\":1}}],[\"反之为\",{\"1\":{\"169\":1}}],[\"反证法证明\",{\"1\":{\"156\":1}}],[\"倍增的思想\",{\"1\":{\"210\":1}}],[\"倍\",{\"1\":{\"168\":2}}],[\"倍区间的数目\",{\"1\":{\"49\":1}}],[\"倍区间吗\",{\"1\":{\"49\":1}}],[\"倍区间\",{\"1\":{\"49\":1}}],[\"修改后\",{\"1\":{\"382\":1}}],[\"修改任意一个元素\",{\"1\":{\"205\":1}}],[\"修改字符串的长度\",{\"1\":{\"31\":1}}],[\"修正为\",{\"1\":{\"168\":2}}],[\"互质时\",{\"1\":{\"176\":1}}],[\"互质\",{\"1\":{\"168\":1,\"176\":2}}],[\"互质的数的个数被称为欧拉函数\",{\"1\":{\"167\":1}}],[\"互质的充分必要条件是存在整数\",{\"1\":{\"36\":1,\"171\":1}}],[\"ϕ\",{\"1\":{\"167\":2}}],[\"记\",{\"1\":{\"180\":1}}],[\"记为\",{\"1\":{\"167\":1,\"176\":1,\"336\":1}}],[\"记录图中是否有环\",{\"1\":{\"338\":1}}],[\"记录遍历过的节点\",{\"1\":{\"338\":1}}],[\"记录一次dfs经过的节点\",{\"1\":{\"338\":1}}],[\"记录下一层被扩散的烂橘子\",{\"1\":{\"332\":1}}],[\"记录每层烂橘子的数量\",{\"1\":{\"331\":1}}],[\"记录每棵树包含的节点数\",{\"1\":{\"62\":1}}],[\"记录初始岛屿数\",{\"1\":{\"308\":1}}],[\"记录素数个数\",{\"1\":{\"161\":1}}],[\"记录前缀中各个数字个数\",{\"1\":{\"97\":1}}],[\"记录答案\",{\"1\":{\"97\":1}}],[\"记录个数\",{\"1\":{\"50\":1}}],[\"防止缓存击穿\",{\"1\":{\"232\":1}}],[\"防止溢出\",{\"1\":{\"165\":1}}],[\"防止数组越界\",{\"1\":{\"30\":1}}],[\"辗转相除法时间可以忽略不计\",{\"1\":{\"165\":1}}],[\"辗转相除法\",{\"1\":{\"165\":1}}],[\"欧拉函数的定义\",{\"1\":{\"167\":1}}],[\"欧拉函数\",{\"0\":{\"166\":1}}],[\"欧拉筛\",{\"0\":{\"161\":1}}],[\"欧几里得算法\",{\"1\":{\"165\":1}}],[\"约数之和\",{\"1\":{\"164\":2}}],[\"约数个数\",{\"1\":{\"164\":1}}],[\"约数个数和约数之和\",{\"0\":{\"164\":1}}],[\"约数\",{\"0\":{\"162\":1}}],[\"约数枚举\",{\"1\":{\"157\":1}}],[\"避免重复合并操作\",{\"1\":{\"308\":1}}],[\"避免重复筛选\",{\"1\":{\"161\":1}}],[\"避免维护\",{\"1\":{\"306\":1}}],[\"避免使用评论\",{\"1\":{\"258\":1}}],[\"避免每次都重新统计\",{\"1\":{\"258\":1}}],[\"避免依赖\",{\"1\":{\"251\":1}}],[\"避免频繁\",{\"1\":{\"249\":1}}],[\"避免风险数据外泄\",{\"1\":{\"237\":1}}],[\"避免高优先级操作被低优先级操作覆盖\",{\"1\":{\"237\":1}}],[\"避免并发写操作时\",{\"1\":{\"232\":1}}],[\"避免此类极端情况导致的数据缺失\",{\"1\":{\"232\":1}}],[\"避免了并行处理导致的一些数据错乱风险\",{\"1\":{\"229\":1}}],[\"避免和头文件next冲突\",{\"1\":{\"199\":1}}],[\"避免发生边界问题导致死循环\",{\"1\":{\"105\":1}}],[\"内存里设置一个过期时间很短的比如\",{\"1\":{\"261\":1}}],[\"内部运营体系基本都是基于\",{\"1\":{\"251\":1}}],[\"内容如下\",{\"1\":{\"365\":1}}],[\"内容表的主键直接使用评论\",{\"1\":{\"258\":1}}],[\"内容分离\",{\"1\":{\"257\":1}}],[\"内容相关\",{\"1\":{\"240\":1}}],[\"内容的观点\",{\"1\":{\"222\":1}}],[\"内的素数了\",{\"1\":{\"160\":1}}],[\"内有多少个素数\",{\"1\":{\"160\":1}}],[\"上\",{\"1\":{\"395\":1}}],[\"上面可以看到\",{\"1\":{\"387\":1}}],[\"上面查询出来的\",{\"1\":{\"257\":1}}],[\"上启动\",{\"1\":{\"365\":1}}],[\"上边\",{\"1\":{\"308\":1}}],[\"上文提到\",{\"1\":{\"235\":1}}],[\"上浮\",{\"1\":{\"205\":1}}],[\"上了\",{\"1\":{\"160\":1}}],[\"上下左右四个相邻像素中有海洋\",{\"1\":{\"68\":1}}],[\"上下左右\",{\"1\":{\"68\":1}}],[\"解决岛屿题目最常见的就是\",{\"1\":{\"306\":1}}],[\"解决高赞永远高赞的马太效应\",{\"1\":{\"240\":1}}],[\"解决高赞高踩的负面热评问题\",{\"1\":{\"240\":1}}],[\"解决热评的有无问题\",{\"1\":{\"240\":1}}],[\"解决方案\",{\"1\":{\"407\":1}}],[\"解决方案是利用消息队列\",{\"1\":{\"229\":1}}],[\"解决方法是额外使用一个\",{\"1\":{\"62\":1}}],[\"解法\",{\"1\":{\"160\":1}}],[\"剩下的就是质数\",{\"1\":{\"159\":1}}],[\"趋于无穷大时\",{\"1\":{\"159\":1}}],[\"筛素数\",{\"1\":{\"178\":1}}],[\"筛法求出范围内的所有质数\",{\"1\":{\"178\":1}}],[\"筛法求欧拉函数\",{\"0\":{\"168\":1}}],[\"筛法求素数\",{\"0\":{\"158\":1}}],[\"筛掉它的倍数\",{\"1\":{\"159\":1}}],[\"埃氏筛\",{\"0\":{\"159\":1}}],[\"√n\",{\"1\":{\"157\":3}}],[\"素数测试\",{\"1\":{\"157\":1}}],[\"汇总所有\",{\"1\":{\"262\":1}}],[\"汇总\",{\"0\":{\"157\":1}}],[\"试除法求所有约数\",{\"0\":{\"163\":1}}],[\"试除法分解质因数\",{\"0\":{\"156\":1}}],[\"试除法判定质数\",{\"0\":{\"155\":1}}],[\"质数定理\",{\"1\":{\"159\":1}}],[\"质数\",{\"0\":{\"154\":1},\"1\":{\"168\":1}}],[\"图像数据\",{\"1\":{\"368\":1}}],[\"图中共有\",{\"1\":{\"337\":1}}],[\"图中有一个唯一的起点\",{\"1\":{\"184\":1}}],[\"图\",{\"1\":{\"306\":2}}],[\"图示的\",{\"1\":{\"241\":1}}],[\"图片\",{\"1\":{\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"231\":1,\"234\":3,\"241\":2,\"247\":1,\"248\":1,\"257\":2,\"259\":3,\"261\":1,\"262\":1,\"384\":1}}],[\"图书\",{\"1\":{\"222\":1}}],[\"图论\",{\"2\":{\"152\":1,\"290\":1,\"309\":1,\"333\":1,\"339\":1}}],[\"图的拓扑序列是针对于有向图而言的\",{\"1\":{\"137\":1}}],[\"那配置项都配置在哪呢\",{\"1\":{\"387\":1}}],[\"那就可以直接通过这些\",{\"1\":{\"257\":1}}],[\"那就匹配并标记\",{\"1\":{\"151\":1}}],[\"那这个评论就是根评论\",{\"1\":{\"257\":1}}],[\"那为什么不能按照评论维度进行拆分\",{\"1\":{\"238\":1}}],[\"那大量写操作后读操作缓存命中率低的问题如何解决呢\",{\"1\":{\"232\":1}}],[\"那它就是一个质数\",{\"1\":{\"159\":1}}],[\"那么有没有线程安全问题呢\",{\"1\":{\"375\":1}}],[\"那么之前产生的子list将会失效\",{\"1\":{\"347\":1}}],[\"那么就按照数值大小以及字典序排序即可\",{\"1\":{\"349\":1}}],[\"那么就不满足条件\",{\"1\":{\"337\":1}}],[\"那么就是对每个节点计算左右子树的最大高度\",{\"1\":{\"282\":1}}],[\"那么相同的\",{\"1\":{\"261\":1}}],[\"那么相乘会大于\",{\"1\":{\"156\":1}}],[\"那么通过\",{\"1\":{\"257\":1}}],[\"那么如何定义\",{\"1\":{\"234\":1}}],[\"那么异步处理后用户体验是如何保证的呢\",{\"1\":{\"229\":1}}],[\"那么再从头开始查找\",{\"1\":{\"208\":1}}],[\"那么它就是一个完美匹配\",{\"1\":{\"151\":1}}],[\"那么加上自己之后一共有n+1个点\",{\"1\":{\"144\":1}}],[\"那么最短路可能为负无穷\",{\"1\":{\"142\":1}}],[\"那么子节点随意\",{\"1\":{\"102\":1}}],[\"那么称这一段数是两个数列的公共上升子序列\",{\"1\":{\"92\":1}}],[\"那么这个前缀和就能和前面每一个组成一个组合\",{\"1\":{\"49\":1}}],[\"那么题目就是要我们求\",{\"1\":{\"49\":1}}],[\"那么\",{\"1\":{\"49\":2,\"61\":1,\"112\":1,\"159\":1,\"195\":2}}],[\"那么对于任意的整数\",{\"1\":{\"36\":1,\"171\":1}}],[\"出栈一个元素\",{\"1\":{\"350\":1}}],[\"出发的点不算\",{\"1\":{\"151\":1}}],[\"出现了多少次\",{\"1\":{\"112\":1}}],[\"完成文件夹\",{\"1\":{\"370\":1}}],[\"完成热评排序系统的平台化\",{\"1\":{\"241\":1}}],[\"完成各个特征的差异化实现与维护\",{\"1\":{\"241\":1}}],[\"完成一次用户交互\",{\"1\":{\"229\":1}}],[\"完全\",{\"1\":{\"205\":1}}],[\"完全背包\",{\"0\":{\"85\":1}}],[\"完美匹配\",{\"1\":{\"151\":1}}],[\"称为这个图的最大匹配\",{\"1\":{\"151\":1}}],[\"称为正确排列\",{\"1\":{\"67\":1}}],[\"匈牙利算法中只会用到从第一个集合指向第二个集合的边\",{\"1\":{\"151\":1}}],[\"匈牙利算法\",{\"0\":{\"151\":1}}],[\"遍历建好的图\",{\"1\":{\"337\":1}}],[\"遍历整个二维数组\",{\"1\":{\"307\":1,\"308\":1}}],[\"遍历上下左右四个方向\",{\"1\":{\"306\":1}}],[\"遍历\",{\"1\":{\"269\":1}}],[\"遍历所有左端点在l的左边的区间\",{\"1\":{\"218\":1}}],[\"遍历所有点\",{\"1\":{\"150\":1,\"151\":1}}],[\"遍历n个点\",{\"1\":{\"140\":1}}],[\"区分\",{\"1\":{\"150\":1}}],[\"区间覆盖\",{\"0\":{\"218\":1}}],[\"区间分组\",{\"0\":{\"217\":1}}],[\"区间选点\",{\"0\":{\"215\":1}}],[\"区间问题\",{\"0\":{\"214\":1}}],[\"区间筛法\",{\"0\":{\"160\":1}}],[\"区间合并\",{\"0\":{\"130\":1,\"219\":1}}],[\"区间终点\",{\"1\":{\"95\":1}}],[\"区间长度\",{\"1\":{\"95\":1}}],[\"区间dp枚举套路\",{\"1\":{\"95\":1}}],[\"区间dp\",{\"0\":{\"95\":1}}],[\"区间\",{\"1\":{\"42\":1,\"49\":1,\"95\":1}}],[\"染色失败\",{\"1\":{\"150\":1}}],[\"染色可以使用\",{\"1\":{\"150\":1}}],[\"染色法判别二分图\",{\"0\":{\"150\":1}}],[\"性质\",{\"1\":{\"150\":1,\"195\":1}}],[\"权重\",{\"1\":{\"149\":1}}],[\"距离最近的点\",{\"1\":{\"148\":1}}],[\"距离都初始化为无穷大\",{\"1\":{\"140\":1}}],[\"叫做求最小生成树\",{\"1\":{\"147\":1}}],[\"换句话来说\",{\"1\":{\"147\":1}}],[\"换成\",{\"1\":{\"110\":1}}],[\"换成a\",{\"1\":{\"110\":1}}],[\"多租户支持\",{\"1\":{\"370\":1}}],[\"多了一步操作\",{\"1\":{\"257\":1}}],[\"多样化的数据源\",{\"1\":{\"241\":1}}],[\"多个评论的操作相互影响\",{\"1\":{\"238\":1}}],[\"多么真实而实用的算法\",{\"1\":{\"151\":1}}],[\"多源汇最短路\",{\"0\":{\"145\":1}}],[\"多重背包\",{\"0\":{\"86\":1}}],[\"除了通过传统的命令行进行操作之外\",{\"1\":{\"370\":1}}],[\"除了大家点开评论区看到的\",{\"1\":{\"241\":1}}],[\"除了数据安全法所要求的以外\",{\"1\":{\"237\":1}}],[\"除了写热点\",{\"1\":{\"234\":1}}],[\"除了批判性评论之外\",{\"1\":{\"222\":1}}],[\"除了自己\",{\"1\":{\"144\":1}}],[\"除最后一层节点\",{\"1\":{\"205\":1}}],[\"除以\",{\"0\":{\"35\":1},\"1\":{\"177\":1}}],[\"原来的mysql分表架构很快到达存储瓶颈\",{\"1\":{\"231\":1}}],[\"原文链接\",{\"1\":{\"221\":1,\"245\":1,\"255\":1,\"381\":1}}],[\"原理\",{\"1\":{\"144\":1}}],[\"原因是\",{\"1\":{\"142\":1}}],[\"总结\",{\"0\":{\"258\":1,\"409\":1}}],[\"总点数\",{\"1\":{\"144\":1}}],[\"总点数和总边数\",{\"1\":{\"143\":1}}],[\"总的作用是为处于自己上层的应用软件提供运行与开发的环境\",{\"1\":{\"14\":1}}],[\"重命名为\",{\"1\":{\"365\":1}}],[\"重定向到标准输出\",{\"1\":{\"362\":1}}],[\"重定向到\",{\"1\":{\"362\":1}}],[\"重新调整堆\",{\"1\":{\"353\":1}}],[\"重新赋给每个元素的值\",{\"1\":{\"42\":1}}],[\"重复上述步骤\",{\"1\":{\"331\":1}}],[\"重复执行直到队列为空\",{\"1\":{\"143\":1}}],[\"重建时会启用预加载\",{\"1\":{\"229\":1}}],[\"重在提升视频观看体验\",{\"1\":{\"222\":1}}],[\"重载小于运算符\",{\"1\":{\"217\":1}}],[\"重载小于号\",{\"1\":{\"149\":1}}],[\"重载\",{\"1\":{\"211\":1}}],[\"建议使用\",{\"1\":{\"350\":1}}],[\"建议同时指定\",{\"1\":{\"31\":1}}],[\"建堆\",{\"1\":{\"205\":1}}],[\"建立一个队列\",{\"1\":{\"143\":1}}],[\"路径中至少存在两个相同的点\",{\"1\":{\"142\":1}}],[\"路径的定义是从\",{\"1\":{\"100\":1}}],[\"由它们之间边数表示\",{\"1\":{\"281\":1}}],[\"由两名玩家交替行动\",{\"1\":{\"183\":1}}],[\"由抽屉原理一定有两个点相同\",{\"1\":{\"144\":1}}],[\"由抽屉原理\",{\"1\":{\"142\":1}}],[\"由于一般只查询\",{\"1\":{\"257\":1}}],[\"由于排序问题的解决方案是探索型的\",{\"1\":{\"241\":1}}],[\"由于\",{\"1\":{\"241\":1,\"300\":1,\"306\":1}}],[\"由于扫描行数约等于\",{\"1\":{\"241\":1}}],[\"由于评论业务的下游依赖较多\",{\"1\":{\"234\":1}}],[\"由于评论内容是大字段\",{\"1\":{\"231\":1}}],[\"由于大量接口都需要读取评论区基础信息\",{\"1\":{\"234\":1}}],[\"由于上文所述各类\",{\"1\":{\"234\":1}}],[\"由于存在性判定和增量追加不是原子化的\",{\"1\":{\"232\":1}}],[\"由于列表是分页的\",{\"1\":{\"229\":1}}],[\"由于某个点染色成功并不代表整个图就是二分图\",{\"1\":{\"150\":1}}],[\"由于是每个点同时向外出发\",{\"1\":{\"142\":1}}],[\"由于在除法运算中\",{\"1\":{\"118\":1}}],[\"由于全球变暖导致了海面上升\",{\"1\":{\"68\":1}}],[\"``dist\",{\"1\":{\"142\":1}}],[\"影响到下一个点\",{\"1\":{\"142\":1}}],[\"松弛操作\",{\"1\":{\"142\":2}}],[\"次后变为一个式子\",{\"1\":{\"172\":1}}],[\"次之后\",{\"1\":{\"142\":1}}],[\"次\",{\"1\":{\"142\":2,\"177\":1}}],[\"次询问\",{\"1\":{\"93\":1}}],[\"迭代地寻找当前节点的左子节点\",{\"1\":{\"271\":1}}],[\"迭代隔离也是好的\",{\"1\":{\"248\":1}}],[\"迭代\",{\"0\":{\"271\":1,\"277\":1},\"1\":{\"142\":1},\"2\":{\"273\":1,\"279\":1}}],[\"迭代器的++\",{\"1\":{\"210\":1}}],[\"迭代器\",{\"1\":{\"44\":3}}],[\"稀疏图改用\",{\"1\":{\"141\":1}}],[\"稀疏图用邻接表\",{\"1\":{\"140\":1}}],[\"寻找下一个字符\",{\"1\":{\"288\":1}}],[\"寻找距离最小的点\",{\"1\":{\"140\":1}}],[\"寻找两点之间的最大距离\",{\"1\":{\"133\":1}}],[\"访问\",{\"1\":{\"370\":1}}],[\"访问加入集合并标记\",{\"1\":{\"140\":1}}],[\"访问标记\",{\"1\":{\"102\":1}}],[\"逐个遍历\",{\"1\":{\"140\":1}}],[\"逐位压入数组中\",{\"1\":{\"117\":1}}],[\"稠密图用邻接矩阵\",{\"1\":{\"140\":1}}],[\"指定文件路径\",{\"1\":{\"378\":1}}],[\"指定\",{\"1\":{\"362\":1}}],[\"指定数据存放位置\",{\"1\":{\"362\":1}}],[\"指定minio密码\",{\"1\":{\"362\":1}}],[\"指定minio的用户名\",{\"1\":{\"362\":1}}],[\"指定容量的空数组列表\",{\"1\":{\"347\":1}}],[\"指定的部分应该是提前排好序的\",{\"1\":{\"211\":1}}],[\"指定的部分上执行二分查找\",{\"1\":{\"211\":1}}],[\"指定的部分进行快速排序\",{\"1\":{\"211\":1}}],[\"指向它\",{\"1\":{\"344\":2}}],[\"指向\",{\"1\":{\"337\":1}}],[\"指向的下一节点\",{\"1\":{\"191\":1}}],[\"指边相对于点不多\",{\"1\":{\"139\":1}}],[\"指针\",{\"1\":{\"43\":1,\"211\":3}}],[\"点进去看下这个方法做了什么\",{\"1\":{\"382\":1}}],[\"点踩\",{\"1\":{\"223\":1}}],[\"点赞率=点赞数\",{\"1\":{\"241\":1}}],[\"点赞数是一个频繁更新的值\",{\"1\":{\"241\":1}}],[\"点赞高\",{\"1\":{\"240\":1}}],[\"点赞\",{\"1\":{\"223\":1}}],[\"点的数量\",{\"1\":{\"141\":1}}],[\"点数和边数\",{\"1\":{\"140\":1}}],[\"点多\",{\"1\":{\"139\":1}}],[\"点少边比较多\",{\"1\":{\"139\":1}}],[\"点从\",{\"1\":{\"100\":1}}],[\"条边为止\",{\"1\":{\"149\":1}}],[\"条边\",{\"1\":{\"139\":1,\"147\":1}}],[\"头是按指定排序方式的最小元素\",{\"1\":{\"353\":1}}],[\"头尾指针\",{\"1\":{\"137\":1}}],[\"头重脚轻\",{\"1\":{\"59\":1}}],[\"采用数组模拟队列的写法\",{\"1\":{\"137\":1}}],[\"结构如下图所示\",{\"1\":{\"389\":1}}],[\"结构性提升了复杂调用场景下的接口性能下限\",{\"1\":{\"226\":1}}],[\"结构体存储\",{\"1\":{\"149\":1}}],[\"结合上面的加载配置文件的分析\",{\"1\":{\"387\":1}}],[\"结合评论网关层的排序策略路由\",{\"1\":{\"241\":1}}],[\"结合评论的产品功能要求\",{\"1\":{\"231\":1}}],[\"结合各种逻辑算子构成一个规则表达式\",{\"1\":{\"241\":1}}],[\"结合ai和人工\",{\"1\":{\"223\":1}}],[\"结合b站以及其他互联网平台的评论产品特点\",{\"1\":{\"223\":1}}],[\"结束\",{\"1\":{\"200\":1}}],[\"结尾\",{\"1\":{\"200\":1}}],[\"结论\",{\"1\":{\"137\":1,\"156\":1,\"176\":1}}],[\"结果会填充0或false值\",{\"1\":{\"342\":1}}],[\"结果为零\",{\"1\":{\"126\":1}}],[\"结果才为0\",{\"1\":{\"125\":1}}],[\"结果才为1\",{\"1\":{\"125\":1}}],[\"拓扑排序\",{\"0\":{\"137\":1}}],[\"宽度优先遍历\",{\"0\":{\"136\":1}}],[\"无论是标准输出还是错误输出\",{\"1\":{\"362\":1}}],[\"无论如何操作\",{\"1\":{\"182\":1}}],[\"无解\",{\"1\":{\"173\":1}}],[\"无法完成所有课程\",{\"1\":{\"337\":1}}],[\"无法继续向下处理了\",{\"1\":{\"270\":1}}],[\"无法存储上一节点\",{\"1\":{\"191\":1}}],[\"无法移动者判负\",{\"1\":{\"184\":1}}],[\"无法形成最短路\",{\"1\":{\"140\":1}}],[\"无法与\",{\"1\":{\"25\":1}}],[\"无向图\",{\"1\":{\"140\":1}}],[\"无向图是没有拓扑序列的\",{\"1\":{\"137\":1}}],[\"无向图就再写一遍\",{\"1\":{\"133\":1}}],[\"存放字符串池\",{\"1\":{\"344\":1}}],[\"存在\",{\"1\":{\"259\":1}}],[\"存在读放大\",{\"1\":{\"234\":1}}],[\"存在才能增量追加\",{\"1\":{\"232\":1}}],[\"存在乘法逆元的充要条件是\",{\"1\":{\"176\":1}}],[\"存在负权边\",{\"0\":{\"142\":1,\"143\":1},\"1\":{\"139\":1}}],[\"存的是当前加入的边数\",{\"1\":{\"149\":1}}],[\"存的是最小生成树的所有边的权值\",{\"1\":{\"149\":1}}],[\"存入a和b两点之间的距离\",{\"1\":{\"140\":1}}],[\"存边\",{\"1\":{\"133\":1}}],[\"存储桶\",{\"1\":{\"369\":1}}],[\"存储的元数据主要包括对象的描述信息\",{\"1\":{\"369\":1}}],[\"存储和检索数据\",{\"1\":{\"369\":1}}],[\"存储数据的目录路径\",{\"1\":{\"364\":1}}],[\"存储内容包括同一个评论\",{\"1\":{\"232\":1}}],[\"存储设计\",{\"0\":{\"230\":1,\"256\":1}}],[\"存储字符串前k个字母的哈希值\",{\"1\":{\"209\":1}}],[\"存储堆中下标是k的点是第几个插入的\",{\"1\":{\"205\":1}}],[\"存储堆中的值\",{\"1\":{\"205\":1}}],[\"存储第k个插入的点在堆中的位置\",{\"1\":{\"205\":1}}],[\"存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个\",{\"1\":{\"151\":1}}],[\"存储x到p\",{\"1\":{\"204\":1}}],[\"存储x是否被筛掉\",{\"1\":{\"159\":1,\"161\":1,\"168\":1}}],[\"存储当前用到的下标\",{\"1\":{\"200\":1}}],[\"存储以每个节点结尾的单词数量\",{\"1\":{\"200\":1}}],[\"存储树中每个节点的子节点\",{\"1\":{\"200\":1}}],[\"存储形式如下\",{\"1\":{\"200\":1}}],[\"存储节点的next指针\",{\"1\":{\"191\":1}}],[\"存储节点的值\",{\"1\":{\"191\":1}}],[\"存储图和树\",{\"1\":{\"191\":1}}],[\"存储其他点到当前最小生成树的距离\",{\"1\":{\"148\":1}}],[\"存储1到x的最短路中经过的点数\",{\"1\":{\"144\":1}}],[\"存储1到x的最短路距离\",{\"1\":{\"142\":1}}],[\"存储1号点到x的最短距离\",{\"1\":{\"144\":1}}],[\"存储1号点到每个点的最短距离\",{\"1\":{\"140\":1}}],[\"存储所有质数\",{\"1\":{\"178\":1}}],[\"存储所有素数\",{\"1\":{\"159\":1,\"161\":1,\"168\":1}}],[\"存储所有边\",{\"1\":{\"148\":1}}],[\"存储所有点到1号点的距离\",{\"1\":{\"141\":1}}],[\"存储所有待离散化的值\",{\"1\":{\"129\":1}}],[\"存储每个数是否已被筛掉\",{\"1\":{\"178\":1}}],[\"存储每个数的欧拉函数\",{\"1\":{\"168\":1}}],[\"存储每个质数的次数\",{\"1\":{\"178\":1}}],[\"存储每个点的祖宗节点\",{\"1\":{\"202\":1,\"203\":1,\"204\":1}}],[\"存储每个点的最短距离是否已确定\",{\"1\":{\"141\":1}}],[\"存储每个点的最短路是否已经确定\",{\"1\":{\"140\":1}}],[\"存储每个点是否已经在生成树中\",{\"1\":{\"148\":1}}],[\"存储每个点是否在队列中\",{\"1\":{\"143\":1,\"144\":1}}],[\"存储每个点到1号点的最短距离\",{\"1\":{\"143\":1}}],[\"存储每条边\",{\"1\":{\"140\":1}}],[\"存储点i的入度\",{\"1\":{\"137\":1}}],[\"存储这个单链表的头结点\",{\"1\":{\"133\":1}}],[\"存储k所有可以走到的点\",{\"1\":{\"133\":1}}],[\"存储边\",{\"1\":{\"133\":1}}],[\"存储\",{\"1\":{\"115\":1,\"116\":1,\"205\":1,\"209\":2,\"245\":1,\"257\":1,\"370\":1}}],[\"存储变换后的字符串\",{\"1\":{\"67\":1}}],[\"存储目前为止前缀和相同的个数\",{\"1\":{\"49\":1}}],[\"邻接表建图\",{\"1\":{\"338\":1}}],[\"邻接表存储图\",{\"1\":{\"150\":1}}],[\"邻接表存储所有边\",{\"1\":{\"141\":1,\"143\":1,\"144\":1,\"151\":1}}],[\"邻接表\",{\"1\":{\"133\":1,\"141\":1,\"191\":1}}],[\"邻接矩阵初始化为无穷大\",{\"1\":{\"140\":1}}],[\"邻接矩阵\",{\"1\":{\"133\":1,\"148\":1}}],[\"动态扩容的数组\",{\"1\":{\"347\":1}}],[\"动态外露评论\",{\"1\":{\"241\":1}}],[\"动态外露评论等\",{\"1\":{\"240\":1}}],[\"动态\",{\"1\":{\"222\":1}}],[\"动态维护有序序列\",{\"1\":{\"210\":1}}],[\"动态邻接矩阵\",{\"1\":{\"133\":1}}],[\"动态规划\",{\"0\":{\"82\":1},\"1\":{\"2\":1},\"2\":{\"103\":1,\"315\":1}}],[\"去除首尾空白字符\",{\"1\":{\"344\":2}}],[\"去除无效状态的优化写法\",{\"1\":{\"99\":1}}],[\"去查到这一行数据\",{\"1\":{\"257\":1}}],[\"去查必然需要先查到自己的主键\",{\"1\":{\"257\":1}}],[\"去平台业务的逻辑\",{\"1\":{\"247\":1}}],[\"去重\",{\"1\":{\"211\":2}}],[\"去筛合数时\",{\"1\":{\"161\":1}}],[\"去掉重复元素\",{\"1\":{\"129\":1}}],[\"得出每个节点的直径\",{\"1\":{\"282\":1}}],[\"得以复用\",{\"1\":{\"241\":1}}],[\"得看被移数是正还是负\",{\"1\":{\"126\":1}}],[\"得到排序过后的评论\",{\"1\":{\"259\":1}}],[\"得到该位的被除数\",{\"1\":{\"118\":1}}],[\"得到总区间的最小代价\",{\"1\":{\"95\":1}}],[\"得到三个非空子数组\",{\"1\":{\"50\":1}}],[\"正数左补\",{\"1\":{\"126\":1}}],[\"逻辑\",{\"1\":{\"251\":1}}],[\"逻辑运算符和其他运算符都高\",{\"1\":{\"126\":1}}],[\"逻辑右移\",{\"1\":{\"125\":1}}],[\"关闭终端后服务就会停止\",{\"1\":{\"365\":1}}],[\"关闭评论区\",{\"1\":{\"238\":1}}],[\"关注在稳定性\",{\"1\":{\"247\":1}}],[\"关注在业务平台化逻辑上\",{\"1\":{\"247\":1}}],[\"关系类\",{\"1\":{\"231\":1}}],[\"关系运算符\",{\"1\":{\"126\":1}}],[\"关键索引是评论区\",{\"1\":{\"231\":1}}],[\"关联查询条件复杂\",{\"1\":{\"227\":1}}],[\"关于为什么求\",{\"1\":{\"199\":1}}],[\"关于中间件\",{\"1\":{\"14\":1}}],[\"翻转这棵二叉树\",{\"1\":{\"324\":1}}],[\"翻转二叉树\",{\"0\":{\"323\":1},\"1\":{\"323\":1}}],[\"翻转一个数组\",{\"1\":{\"211\":1}}],[\"翻转一个\",{\"1\":{\"211\":1}}],[\"翻转\",{\"1\":{\"211\":1}}],[\"翻转指定位\",{\"1\":{\"126\":1}}],[\"翻译\",{\"1\":{\"49\":1}}],[\"令\",{\"1\":{\"126\":3}}],[\"全部弹出后\",{\"1\":{\"271\":1}}],[\"全部加起来\",{\"1\":{\"96\":1}}],[\"全局并行\",{\"1\":{\"250\":1}}],[\"全量更新时\",{\"1\":{\"241\":1}}],[\"全为\",{\"1\":{\"126\":2}}],[\"算术右移\",{\"1\":{\"125\":1}}],[\"算法步骤\",{\"1\":{\"173\":1}}],[\"算法描述\",{\"1\":{\"151\":1}}],[\"算法结束后\",{\"1\":{\"146\":1}}],[\"算法\",{\"0\":{\"149\":1},\"1\":{\"139\":2}}],[\"算法思路\",{\"1\":{\"108\":1}}],[\"算法和求最近公共祖先\",{\"1\":{\"55\":1}}],[\"算法笔记\",{\"0\":{\"1\":1}}],[\"各种视频\",{\"1\":{\"368\":1}}],[\"各种图片\",{\"1\":{\"368\":1}}],[\"各类静态模型分存在4到5层冗余\",{\"1\":{\"241\":1}}],[\"各级缓存可能有功能上的略微差异\",{\"1\":{\"235\":1}}],[\"各编译器处理方法不一样\",{\"1\":{\"125\":1}}],[\"各二进位全部右移若干位\",{\"1\":{\"125\":1}}],[\"各二进位全部左移若干位\",{\"1\":{\"125\":1}}],[\"各行\",{\"1\":{\"75\":1}}],[\"异步处理\",{\"1\":{\"229\":1}}],[\"异或\",{\"1\":{\"125\":1}}],[\"异常2\",{\"0\":{\"408\":1}}],[\"异常1\",{\"0\":{\"407\":1}}],[\"异常\",{\"1\":{\"31\":1}}],[\"^=\",{\"1\":{\"126\":3,\"182\":1}}],[\"^\",{\"1\":{\"125\":1,\"126\":7,\"182\":3,\"187\":3,\"210\":1}}],[\"描述的是正常\",{\"1\":{\"231\":1}}],[\"描述\",{\"1\":{\"125\":1}}],[\"符号\",{\"1\":{\"125\":1}}],[\"位置没有节点\",{\"1\":{\"288\":2}}],[\"位整数范围内\",{\"1\":{\"172\":1}}],[\"位上的数是否为\",{\"1\":{\"169\":1}}],[\"位数字移动到最后一位\",{\"1\":{\"127\":1}}],[\"位数\",{\"1\":{\"127\":1}}],[\"位进行翻转\",{\"1\":{\"126\":1}}],[\"位设置为\",{\"1\":{\"126\":1}}],[\"位为\",{\"1\":{\"126\":3}}],[\"位\",{\"1\":{\"126\":4,\"127\":1}}],[\"位运算符作用于位\",{\"1\":{\"125\":1}}],[\"位运算符\",{\"0\":{\"125\":1}}],[\"位运算\",{\"0\":{\"124\":1}}],[\"位于应用与操作系统\",{\"1\":{\"14\":1}}],[\"便于直接对余数进行处理\",{\"1\":{\"118\":1}}],[\"÷\",{\"1\":{\"118\":2}}],[\"倒序输出\",{\"1\":{\"117\":1}}],[\"倒序插入\",{\"1\":{\"117\":1}}],[\"倒序存放\",{\"1\":{\"115\":1,\"116\":1}}],[\"低精\",{\"1\":{\"117\":1,\"118\":1}}],[\"低位补0\",{\"1\":{\"125\":1}}],[\"低位变为0\",{\"1\":{\"115\":1}}],[\"低位满10向高位进位\",{\"1\":{\"115\":1}}],[\"×a2xt​=a2x1​+2x2​+\",{\"1\":{\"169\":1}}],[\"×pm​pm​−1​\",{\"1\":{\"167\":1}}],[\"×\",{\"1\":{\"117\":3}}],[\"满足匹配条件\",{\"1\":{\"199\":1}}],[\"满足任意前缀中0的个数都不少于1的个数的序列的数量为\",{\"1\":{\"179\":1}}],[\"满足\",{\"1\":{\"116\":1,\"172\":1}}],[\"压入c数组中\",{\"1\":{\"115\":1}}],[\"压缩路径\",{\"1\":{\"61\":1,\"62\":1}}],[\"进入终端\",{\"1\":{\"364\":1}}],[\"进入到\",{\"1\":{\"364\":1}}],[\"进制数\",{\"1\":{\"209\":1}}],[\"进制的数转化为十进制\",{\"1\":{\"33\":1}}],[\"进行通信的对象\",{\"1\":{\"395\":1}}],[\"进行通信的\",{\"1\":{\"394\":1}}],[\"进行数据读写\",{\"1\":{\"369\":1}}],[\"进行一致性\",{\"1\":{\"262\":1}}],[\"进行缓存的异步构建\",{\"1\":{\"259\":1}}],[\"进行索引的缓存\",{\"1\":{\"259\":1}}],[\"进行运营测的\",{\"1\":{\"251\":1}}],[\"进行同步到\",{\"1\":{\"247\":1}}],[\"进行了隔离\",{\"1\":{\"247\":1}}],[\"进行控制\",{\"1\":{\"232\":1}}],[\"进行\",{\"1\":{\"150\":1}}],[\"进行异或运算\",{\"1\":{\"126\":1}}],[\"进行按位或运算\",{\"1\":{\"126\":1}}],[\"进行按位与运算\",{\"1\":{\"126\":1}}],[\"进位\",{\"1\":{\"115\":1}}],[\"节省时间\",{\"1\":{\"115\":1,\"116\":1}}],[\"节省查找时间\",{\"1\":{\"62\":1}}],[\"加载配置文件小结\",{\"0\":{\"388\":1}}],[\"加载配置文件\",{\"0\":{\"386\":1}}],[\"加载模式\",{\"1\":{\"259\":1}}],[\"加载\",{\"0\":{\"384\":1},\"1\":{\"247\":1}}],[\"加权平均高\",{\"1\":{\"240\":1}}],[\"加1\",{\"1\":{\"199\":1}}],[\"加边法\",{\"1\":{\"149\":1}}],[\"加到集合当中去\",{\"1\":{\"148\":1}}],[\"加入新的一层\",{\"1\":{\"332\":1}}],[\"加入进来\",{\"1\":{\"306\":1}}],[\"加入下一个字符\",{\"1\":{\"288\":1}}],[\"加入到集合中\",{\"1\":{\"149\":1}}],[\"加入到连通块中\",{\"1\":{\"148\":1}}],[\"加入i后更新当前a的值\",{\"1\":{\"79\":1}}],[\"加点法\",{\"1\":{\"148\":1}}],[\"加上\",{\"1\":{\"115\":1,\"116\":1}}],[\"检查它是否轴对称\",{\"1\":{\"293\":1}}],[\"检查x是否满足某种性质\",{\"1\":{\"113\":1}}],[\"检验\",{\"1\":{\"24\":1}}],[\"浮点数二分\",{\"0\":{\"113\":1}}],[\"需使用头文件\",{\"1\":{\"112\":1}}],[\"需要指定存储桶名称和对象键\",{\"1\":{\"378\":1}}],[\"需要指定存储桶的名称\",{\"1\":{\"377\":1}}],[\"需要指出的是\",{\"1\":{\"241\":1}}],[\"需要将其注册为\",{\"1\":{\"365\":1}}],[\"需要先定义好排序规则\",{\"1\":{\"353\":1}}],[\"需要先完成​课程\",{\"1\":{\"337\":1}}],[\"需要用到\",{\"1\":{\"349\":1}}],[\"需要用多重背包的二进制优化方法\",{\"1\":{\"86\":1}}],[\"需要对非核心依赖的\",{\"1\":{\"252\":1}}],[\"需要检索的数据维度比较多\",{\"1\":{\"251\":1}}],[\"需要回放录入到\",{\"1\":{\"251\":1}}],[\"需要处理不同决策的优先级pk\",{\"1\":{\"241\":1}}],[\"需要处理各种细分场景下的差异化需求\",{\"1\":{\"241\":1}}],[\"需要支持较丰富的数据结构\",{\"1\":{\"241\":1}}],[\"需要实现点赞率的近实时计算\",{\"1\":{\"241\":1}}],[\"需要多减去该一级评论的回复数\",{\"1\":{\"231\":1}}],[\"需要级联更新所有的父评论的回复数\",{\"1\":{\"231\":1}}],[\"需要为多个不同的查询场景建立多种索引分片\",{\"1\":{\"227\":1}}],[\"需要保证头结点存在\",{\"1\":{\"191\":1}}],[\"需要借位\",{\"1\":{\"116\":1}}],[\"需要减去序列头以转换为下标\",{\"1\":{\"44\":1}}],[\"改了后\",{\"1\":{\"382\":1}}],[\"改动会影响原数组\",{\"1\":{\"347\":1}}],[\"改造后\",{\"1\":{\"234\":1}}],[\"改成批量写入\",{\"1\":{\"234\":1}}],[\"改\",{\"1\":{\"111\":1}}],[\"简单来说就是\",{\"1\":{\"110\":1}}],[\"简介\",{\"0\":{\"55\":1}}],[\"此外\",{\"1\":{\"232\":1,\"234\":1,\"235\":1,\"241\":3,\"305\":1}}],[\"此时父节点相当于当前节点\",{\"1\":{\"271\":1}}],[\"此时需要读取全部评论的全部特征\",{\"1\":{\"241\":1}}],[\"此时计数可能偏大\",{\"1\":{\"238\":1}}],[\"此时计数可能偏大或偏小\",{\"1\":{\"238\":1}}],[\"此时a事务计数更新的前提被破坏\",{\"1\":{\"238\":1}}],[\"此时告知用户操作失败也没有意义\",{\"1\":{\"238\":1}}],[\"此时可以利用\",{\"1\":{\"232\":1}}],[\"此时也可能出现写放大\",{\"1\":{\"231\":1}}],[\"此时所有数据已准备好\",{\"1\":{\"229\":1}}],[\"此时为了防止死循环\",{\"1\":{\"110\":1}}],[\"此类查询需求\",{\"1\":{\"227\":1}}],[\"此处存放自己写和一些优秀的开源项目\",{\"1\":{\"18\":1}}],[\"此处存放前后端常用框架的笔记\",{\"1\":{\"17\":1}}],[\"此处存放一些程序员相关的资源文件\",{\"1\":{\"19\":1}}],[\"此处存放一些计算机大类的笔记\",{\"1\":{\"7\":1}}],[\"此处存放一些关于\",{\"1\":{\"6\":1}}],[\"此处存放刷题时的思路和笔记\",{\"1\":{\"1\":1}}],[\"划分成\",{\"1\":{\"109\":1,\"110\":1}}],[\"假如修改了常量名称\",{\"1\":{\"384\":1}}],[\"假如有编号为\",{\"1\":{\"57\":1}}],[\"假定节点编号是1~n\",{\"1\":{\"202\":1,\"203\":1,\"204\":1}}],[\"假设当前节点为\",{\"1\":{\"288\":2}}],[\"假设一定存在\",{\"1\":{\"211\":1}}],[\"假设输入都是正数\",{\"1\":{\"157\":1}}],[\"假设目标值在闭区间\",{\"1\":{\"108\":1}}],[\"两节点之间路径的\",{\"1\":{\"281\":1}}],[\"两名玩家交替地把这枚棋子沿有向边进行移动\",{\"1\":{\"184\":1}}],[\"两名玩家轮流行动\",{\"1\":{\"182\":1}}],[\"两人都采取最优策略\",{\"1\":{\"182\":1}}],[\"两点及其权值\",{\"1\":{\"149\":1}}],[\"两重\",{\"1\":{\"142\":1}}],[\"两个实现类\",{\"1\":{\"347\":1,\"349\":1}}],[\"两个字符串的公共子序列是这两个字符串所共同拥有的子序列\",{\"1\":{\"312\":1}}],[\"两个迭代器\",{\"1\":{\"211\":1}}],[\"两个集合\",{\"1\":{\"150\":1}}],[\"两个位相同为0\",{\"1\":{\"125\":1}}],[\"两个位都为0时\",{\"1\":{\"125\":1}}],[\"两个位都为1时\",{\"1\":{\"125\":1}}],[\"两个if把两个数组相同位上的数相加\",{\"1\":{\"115\":1}}],[\"两个整数\",{\"1\":{\"77\":1}}],[\"两边递归\",{\"1\":{\"106\":1}}],[\"确定中间分界点\",{\"1\":{\"106\":1}}],[\"确定分界点\",{\"1\":{\"105\":1,\"106\":1}}],[\"合规性要求\",{\"1\":{\"237\":1}}],[\"合二为一\",{\"1\":{\"106\":1}}],[\"合并岛屿\",{\"1\":{\"308\":1}}],[\"合并a和b所在的两个集合\",{\"1\":{\"203\":1,\"204\":1}}],[\"合并x和y所在的两个集合\",{\"1\":{\"202\":1}}],[\"合并两步后\",{\"1\":{\"127\":1}}],[\"合并区间\",{\"1\":{\"106\":1}}],[\"合并\",{\"0\":{\"59\":1},\"1\":{\"55\":1,\"61\":1,\"62\":1}}],[\"运营后台的检索条件都是组合的\",{\"1\":{\"251\":1}}],[\"运营体系的数据大量都是检索\",{\"1\":{\"247\":1}}],[\"运营精选且带\",{\"1\":{\"240\":1}}],[\"运营人员的数据查询具有\",{\"1\":{\"227\":1}}],[\"运行公开的读\",{\"1\":{\"377\":1}}],[\"运行时异常\",{\"1\":{\"238\":1}}],[\"运行和集成的平台\",{\"1\":{\"14\":1}}],[\"运算符\",{\"1\":{\"211\":2}}],[\"运算符的优先级比算术运算符\",{\"1\":{\"126\":1}}],[\"运算的结果\",{\"1\":{\"186\":1}}],[\"运算\",{\"1\":{\"126\":1}}],[\"运算规则\",{\"1\":{\"125\":1,\"126\":4}}],[\"运用双指针的思想\",{\"1\":{\"106\":1}}],[\"设置了默认值\",{\"1\":{\"386\":1}}],[\"设置该存储桶里面的文件的访问策略\",{\"1\":{\"377\":1}}],[\"设置不同的降级处理\",{\"1\":{\"226\":1}}],[\"设置两个头尾指针\",{\"1\":{\"105\":1}}],[\"设计\",{\"1\":{\"262\":1}}],[\"设计的api需要体现清晰的系统边界\",{\"1\":{\"226\":1}}],[\"设计一套基于视图模型的api\",{\"1\":{\"226\":1}}],[\"设计模式\",{\"0\":{\"13\":1}}],[\"设g1\",{\"1\":{\"187\":1}}],[\"设从x出发共有k条有向边\",{\"1\":{\"186\":1}}],[\"设s表示一个非负整数集合\",{\"1\":{\"185\":1}}],[\"设\",{\"1\":{\"126\":1}}],[\"子评论之间也可以互相评论\",{\"1\":{\"257\":1}}],[\"子评论数等\",{\"1\":{\"231\":1}}],[\"子串长度\",{\"1\":{\"210\":1}}],[\"子问题合并\",{\"1\":{\"105\":2}}],[\"子节点列表\",{\"1\":{\"289\":1}}],[\"子节点不能选\",{\"1\":{\"102\":1}}],[\"子节点依附在根节点上\",{\"1\":{\"61\":1}}],[\"快速集成快速集成使用\",{\"1\":{\"370\":1}}],[\"快速幂模板\",{\"1\":{\"176\":1,\"177\":1}}],[\"快速幂求逆元\",{\"1\":{\"176\":1}}],[\"快速幂\",{\"0\":{\"169\":1}}],[\"快速排序\",{\"0\":{\"105\":1}}],[\"快排这一步不需要操作\",{\"1\":{\"105\":1}}],[\"快排的一般写法如下\",{\"1\":{\"105\":1}}],[\"快排属于分治算法\",{\"1\":{\"105\":1}}],[\"取一个辨识度更高的方法名即可\",{\"1\":{\"384\":1}}],[\"取一个数的指定位\",{\"1\":{\"126\":1}}],[\"取队首元素但不删除\",{\"1\":{\"351\":1}}],[\"取队首元素并删除\",{\"1\":{\"351\":1}}],[\"取模的数用\",{\"1\":{\"209\":1}}],[\"取模加模再取模\",{\"1\":{\"172\":1}}],[\"取这两个值的冲突概率低\",{\"1\":{\"209\":1}}],[\"取走最后一件物品者获胜\",{\"1\":{\"182\":1}}],[\"取走任意多个物品\",{\"1\":{\"182\":1}}],[\"取出当前最外层的烂橘子\",{\"1\":{\"332\":1}}],[\"取出这一层的烂橘子开始遍历\",{\"1\":{\"332\":1}}],[\"取出作为\",{\"1\":{\"143\":1}}],[\"取出b的每一位\",{\"1\":{\"79\":1}}],[\"取反\",{\"1\":{\"125\":1}}],[\"取决于题目对精度的要求\",{\"1\":{\"113\":1}}],[\"取根节点两种方案的最大值\",{\"1\":{\"102\":1}}],[\"说明该节点的子树是空子树\",{\"1\":{\"270\":1}}],[\"说明哪个\",{\"1\":{\"249\":1}}],[\"说明这个字符没有匹配上\",{\"1\":{\"288\":1}}],[\"说明这个数是它的一个约数\",{\"1\":{\"163\":1}}],[\"说明这就是大于\",{\"1\":{\"156\":1}}],[\"说明此时的\",{\"1\":{\"161\":1}}],[\"说明此时遍历到的\",{\"1\":{\"161\":1}}],[\"说明两个顶点已经连通\",{\"1\":{\"149\":1}}],[\"说明图中存在负权回路\",{\"1\":{\"142\":1}}],[\"说明不连通\",{\"1\":{\"140\":1}}],[\"说明存在拓扑序列\",{\"1\":{\"137\":1}}],[\"说明是叶子节点\",{\"1\":{\"102\":1}}],[\"说人话\",{\"1\":{\"49\":1}}],[\"没一开始没有k\",{\"1\":{\"349\":1}}],[\"没找到则返回\",{\"1\":{\"344\":2}}],[\"没找到则返回end\",{\"1\":{\"210\":1}}],[\"没事别叫我\",{\"1\":{\"199\":1}}],[\"没有线程安全问题\",{\"1\":{\"375\":1}}],[\"没有明确结构的数据\",{\"1\":{\"368\":1}}],[\"没有\",{\"1\":{\"257\":1}}],[\"没有入度\",{\"1\":{\"102\":1}}],[\"没有被访问过\",{\"1\":{\"102\":1}}],[\"没有上司的舞会\",{\"0\":{\"102\":1}}],[\"没用过则标记\",{\"1\":{\"79\":1}}],[\"走交替路\",{\"1\":{\"151\":1}}],[\"走过的所有点的情况是\",{\"1\":{\"100\":1}}],[\"走到\",{\"1\":{\"100\":1}}],[\"到本地缓存\",{\"1\":{\"262\":1}}],[\"到这个阶段\",{\"1\":{\"241\":1}}],[\"到\",{\"1\":{\"100\":1,\"159\":1,\"177\":1,\"180\":1,\"336\":1}}],[\"到终点和我说声\",{\"1\":{\"199\":1}}],[\"到终点\",{\"1\":{\"100\":1}}],[\"|\",{\"1\":{\"99\":1,\"125\":1,\"126\":6,\"176\":1,\"210\":1,\"381\":1}}],[\"||\",{\"1\":{\"25\":3,\"79\":3,\"99\":1,\"115\":1,\"117\":1,\"140\":1,\"148\":1,\"151\":1,\"211\":1,\"217\":1,\"295\":1,\"306\":3,\"307\":4,\"338\":1}}],[\"蒙德里安的梦想\",{\"0\":{\"99\":1}}],[\"状态更新等\",{\"1\":{\"362\":1}}],[\"状态\",{\"1\":{\"313\":1}}],[\"状态一致性\",{\"1\":{\"237\":1}}],[\"状态类\",{\"1\":{\"231\":1}}],[\"状态表示\",{\"1\":{\"99\":1}}],[\"状态压缩类dp\",{\"0\":{\"98\":1}}],[\"状态转移方程\",{\"1\":{\"89\":1,\"90\":1,\"91\":1,\"94\":2,\"100\":1,\"102\":1}}],[\"状态转移\",{\"1\":{\"67\":1}}],[\"后依然有序\",{\"0\":{\"412\":1}}],[\"后台服务安装\",{\"0\":{\"365\":1}}],[\"后台启动\",{\"1\":{\"362\":1}}],[\"后台运营管理\",{\"1\":{\"223\":1,\"246\":1}}],[\"后移元素\",{\"1\":{\"347\":1}}],[\"后者则会在栈中创建一个对象引用变量\",{\"1\":{\"344\":1}}],[\"后组成的新字符串\",{\"1\":{\"312\":1}}],[\"后序遍历\",{\"0\":{\"276\":1}}],[\"后续通过注入\",{\"1\":{\"375\":1}}],[\"后续通过调用\",{\"1\":{\"375\":1}}],[\"后续连续的请求\",{\"1\":{\"261\":1}}],[\"后续失败仅仅存在一条\",{\"1\":{\"257\":1}}],[\"后来衍生了更为复杂的热评\",{\"1\":{\"240\":1}}],[\"后进后出\",{\"1\":{\"196\":1}}],[\"后再减\",{\"1\":{\"116\":1}}],[\"后面几行是关键语句\",{\"1\":{\"386\":1}}],[\"后面一位\",{\"1\":{\"112\":1}}],[\"后面例二中将会给出解决方法\",{\"1\":{\"59\":1}}],[\"后缀部分\",{\"1\":{\"97\":1}}],[\"循环将所有节点都作为起点调用一次\",{\"1\":{\"337\":1}}],[\"循环出口\",{\"1\":{\"218\":1}}],[\"循环\",{\"1\":{\"142\":2}}],[\"循环变量i可以表示剩下的数字有多少个\",{\"1\":{\"97\":1}}],[\"循环从1开始\",{\"1\":{\"97\":1}}],[\"边\",{\"1\":{\"142\":1}}],[\"边多\",{\"1\":{\"139\":1}}],[\"边界条件\",{\"1\":{\"97\":1}}],[\"边读边加\",{\"1\":{\"51\":1}}],[\"~x\",{\"1\":{\"127\":1}}],[\"~0\",{\"1\":{\"126\":1}}],[\"~1\",{\"1\":{\"126\":3}}],[\"~\",{\"1\":{\"97\":1,\"100\":1,\"125\":1,\"126\":2,\"156\":1,\"159\":1,\"168\":1,\"180\":2,\"209\":1,\"210\":1,\"211\":4}}],[\"特点\",{\"0\":{\"370\":1}}],[\"特征\",{\"1\":{\"241\":1}}],[\"特性是先进先出\",{\"1\":{\"351\":1}}],[\"特性\",{\"1\":{\"229\":1}}],[\"特判最中间的数\",{\"1\":{\"163\":1}}],[\"特殊\",{\"1\":{\"96\":1}}],[\"特别容易引起集群\",{\"1\":{\"249\":1}}],[\"特别是tidb\",{\"1\":{\"241\":1}}],[\"特别是存在\",{\"1\":{\"238\":1}}],[\"特别是诸如\",{\"1\":{\"232\":1}}],[\"特别是一些依赖的变更\",{\"1\":{\"226\":1}}],[\"特别是应用软件对于系统软件的集中的逻辑\",{\"1\":{\"14\":1}}],[\"特别地\",{\"1\":{\"36\":1,\"171\":1,\"186\":1}}],[\"容易导致服务\",{\"1\":{\"249\":1}}],[\"容易造成db抖动\",{\"1\":{\"229\":1}}],[\"容易造成整个系统的腐化\",{\"1\":{\"226\":1}}],[\"容斥原理\",{\"0\":{\"180\":1}}],[\"容量为0时\",{\"1\":{\"96\":2}}],[\"容器化\",{\"1\":{\"370\":1}}],[\"容器\",{\"1\":{\"363\":1}}],[\"容器的首尾地址\",{\"1\":{\"44\":2}}],[\"容器中以前的内容\",{\"1\":{\"42\":1}}],[\"容器中\",{\"1\":{\"42\":2}}],[\"容器大小\",{\"1\":{\"42\":1}}],[\"朴素并查集\",{\"0\":{\"202\":1}}],[\"朴素筛法\",{\"0\":{\"159\":1}}],[\"朴素prim算法\",{\"0\":{\"148\":1}}],[\"朴素版\",{\"0\":{\"140\":1}}],[\"朴素版的dijkstra算法\",{\"1\":{\"139\":1}}],[\"朴素做法\",{\"1\":{\"96\":1}}],[\"朴素dp写法\",{\"1\":{\"90\":1}}],[\"因子\",{\"1\":{\"241\":1}}],[\"因子机的重难点是需要管理各种数据获取的拓扑关系\",{\"1\":{\"241\":1}}],[\"因子机\",{\"1\":{\"241\":2}}],[\"因此我们对每个节点引入一个标志\",{\"1\":{\"288\":1}}],[\"因此我们针对数据源的特点做了多级缓存\",{\"1\":{\"241\":1}}],[\"因此每个节点最多有\",{\"1\":{\"288\":1}}],[\"因此利用迭代的思想\",{\"1\":{\"271\":1}}],[\"因此做\",{\"1\":{\"262\":1}}],[\"因此必须判定\",{\"1\":{\"259\":1}}],[\"因此只需要迭代查询两次即可\",{\"1\":{\"257\":1}}],[\"因此只有某个点染色失败才能立刻\",{\"1\":{\"150\":1}}],[\"因此系统设计层面需要提供更多元\",{\"1\":{\"241\":1}}],[\"因此在\",{\"1\":{\"241\":1}}],[\"因此按照评论维度进行拆分仍然存在并发事务问题\",{\"1\":{\"238\":1}}],[\"因此该操作是最先感知到读热点存在的\",{\"1\":{\"234\":1}}],[\"因此选用\",{\"1\":{\"232\":1}}],[\"因此结合查询逻辑\",{\"1\":{\"231\":1}}],[\"因此独立设计第3张表\",{\"1\":{\"231\":1}}],[\"因此需要放到消息队列中处理\",{\"1\":{\"229\":1}}],[\"因此需要对\",{\"1\":{\"142\":1}}],[\"因此一般会作为一个独立系统拆分设计\",{\"1\":{\"224\":1}}],[\"因此可以递推的每次乘\",{\"1\":{\"177\":1}}],[\"因此可以用\",{\"1\":{\"126\":1}}],[\"因此最终结果\",{\"1\":{\"168\":1}}],[\"因此不仅需要将基数\",{\"1\":{\"168\":1}}],[\"因此前导0在数组前面\",{\"1\":{\"118\":1}}],[\"因此\",{\"1\":{\"96\":1,\"161\":1,\"168\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":2,\"234\":1,\"242\":1,\"353\":1}}],[\"因为自己就包含了注册表信息\",{\"1\":{\"395\":1}}],[\"因为在集群环境中\",{\"1\":{\"394\":1}}],[\"因为常量的定义都是大写\",{\"1\":{\"384\":1}}],[\"因为它们是本来就有的\",{\"1\":{\"331\":1}}],[\"因为烂橘子不止一个\",{\"1\":{\"331\":1}}],[\"因为是从\",{\"1\":{\"308\":1}}],[\"因为是倒序数组\",{\"1\":{\"116\":1}}],[\"因为遍历图是需要\",{\"1\":{\"306\":1}}],[\"因为本题要求高度平衡\",{\"1\":{\"300\":1}}],[\"因为本质是一样的\",{\"1\":{\"199\":1}}],[\"因为字符串中只存在小写字母\",{\"1\":{\"288\":1}}],[\"因为底层的\",{\"1\":{\"262\":1}}],[\"因为产品形态上只存在\",{\"1\":{\"257\":1}}],[\"因为上文提到\",{\"1\":{\"238\":1}}],[\"因为发评的异步处理端到端延迟基本在2s以内\",{\"1\":{\"229\":1}}],[\"因为存的都是英文字母\",{\"1\":{\"200\":1}}],[\"因为围棋交战双方分别只能落黑子和白子\",{\"1\":{\"183\":1}}],[\"因为从\",{\"1\":{\"177\":1}}],[\"因为我们是从小到大遍历的\",{\"1\":{\"161\":1}}],[\"因为每次模拟匹配的预定情况都是不一样的所以每轮模拟都要初始化\",{\"1\":{\"151\":1}}],[\"因为你要去问的都是男孩子\",{\"1\":{\"151\":1}}],[\"因为再给边排序的时候是按照边的权重进行排序的\",{\"1\":{\"149\":1}}],[\"因为\",{\"1\":{\"126\":1,\"160\":1,\"171\":1,\"259\":1,\"308\":1,\"314\":1,\"350\":1}}],[\"因为剩下的这部分一定是大于前面的\",{\"1\":{\"106\":1}}],[\"因为零是起点\",{\"1\":{\"100\":1}}],[\"因为要求最小值\",{\"1\":{\"100\":1}}],[\"因为数据范围是从0开始的\",{\"1\":{\"51\":1}}],[\"因为r最大可取到10^9\",{\"1\":{\"51\":1}}],[\"因为题目的内存限制\",{\"1\":{\"51\":1}}],[\"因为当\",{\"1\":{\"49\":1}}],[\"恰好拼成\",{\"1\":{\"96\":1}}],[\"恰好不重不漏地分布在这\",{\"1\":{\"67\":1}}],[\"计数器维护\",{\"1\":{\"241\":1}}],[\"计数冗余同步至其他系统\",{\"1\":{\"238\":1}}],[\"计数不一致的根源\",{\"1\":{\"238\":1}}],[\"计数类\",{\"1\":{\"231\":1}}],[\"计数类dp\",{\"0\":{\"96\":1}}],[\"计算出探测数据项的单机qps热点阈值\",{\"1\":{\"234\":1}}],[\"计算相应的热点条件阈值呢\",{\"1\":{\"234\":1}}],[\"计算子串\",{\"1\":{\"209\":1}}],[\"计算公式如下\",{\"1\":{\"180\":1}}],[\"计算起始点经过队头到其他点的距离是否变短\",{\"1\":{\"143\":1}}],[\"计算结果可能为负数\",{\"1\":{\"116\":1}}],[\"计算结果时就要加上这一个\",{\"1\":{\"49\":1}}],[\"计算它们的差\",{\"1\":{\"116\":1}}],[\"计算它们的和\",{\"1\":{\"115\":1}}],[\"计算\",{\"1\":{\"109\":1,\"110\":1}}],[\"计算两个数的和\",{\"1\":{\"43\":1}}],[\"计算机网络\",{\"0\":{\"10\":1},\"1\":{\"7\":1}}],[\"计算机\",{\"0\":{\"7\":1}}],[\"替换占位符\",{\"1\":{\"344\":1}}],[\"替换\",{\"1\":{\"94\":1}}],[\"替换掉第一个大于或等于这个数字的那个数\",{\"1\":{\"90\":1}}],[\"删除失败会抛出异常\",{\"1\":{\"377\":1}}],[\"删除最后元素\",{\"1\":{\"347\":1}}],[\"删除最后元素为o\",{\"1\":{\"347\":1}}],[\"删除最小值\",{\"1\":{\"205\":1}}],[\"删除位于index的元素\",{\"1\":{\"347\":1}}],[\"删除等\",{\"1\":{\"247\":1}}],[\"删除等可见性状态\",{\"1\":{\"231\":1}}],[\"删除二级评论时\",{\"1\":{\"238\":1}}],[\"删除一级评论时\",{\"1\":{\"238\":1}}],[\"删除评论等\",{\"1\":{\"228\":1}}],[\"删除评论\",{\"1\":{\"223\":1,\"246\":1}}],[\"删除这个迭代器\",{\"1\":{\"210\":1}}],[\"删除所有x\",{\"1\":{\"210\":1}}],[\"删除任意一个元素\",{\"1\":{\"205\":1}}],[\"删除第k个点\",{\"1\":{\"192\":1}}],[\"删除前导0\",{\"1\":{\"116\":1,\"117\":1,\"118\":1}}],[\"删除\",{\"1\":{\"94\":1,\"223\":1,\"246\":1}}],[\"删除或替换算作一次操作\",{\"1\":{\"93\":1}}],[\"奶牛半懂不懂\",{\"1\":{\"92\":1}}],[\"再来看下第二行代码\",{\"1\":{\"395\":1}}],[\"再也不怕被问\",{\"1\":{\"382\":1}}],[\"再返回处理上一层找到的节点\",{\"1\":{\"271\":1}}],[\"再处理这个节点\",{\"1\":{\"270\":1}}],[\"再进一步\",{\"1\":{\"261\":1}}],[\"再进行更新生成树\",{\"1\":{\"148\":1}}],[\"再读取存储\",{\"1\":{\"249\":1}}],[\"再读db\",{\"1\":{\"229\":1}}],[\"再通过业务主键更新业务数据层\",{\"1\":{\"247\":1}}],[\"再往大做可以是一个评论中台\",{\"1\":{\"246\":1}}],[\"再者\",{\"1\":{\"231\":1}}],[\"再次继续匹配\",{\"1\":{\"199\":1}}],[\"再更新\",{\"1\":{\"148\":1}}],[\"再把\",{\"1\":{\"148\":1}}],[\"再建立一个数组\",{\"1\":{\"143\":1}}],[\"再建立一个数组记录起始点到所有点的最短路径\",{\"1\":{\"143\":1}}],[\"再看个位是几\",{\"1\":{\"127\":1}}],[\"再按\",{\"1\":{\"126\":1}}],[\"再枚举左端点\",{\"1\":{\"95\":1}}],[\"再接下来\",{\"1\":{\"93\":1}}],[\"再让他们研究了最长公共子序列\",{\"1\":{\"92\":1}}],[\"再从地图右下角枚举边长为\",{\"1\":{\"51\":1}}],[\"熊大妈的奶牛在小沐沐的熏陶下开始研究信息题目\",{\"1\":{\"92\":1}}],[\"模块\",{\"1\":{\"247\":1}}],[\"模式\",{\"1\":{\"229\":1,\"249\":1}}],[\"模拟堆栈\",{\"1\":{\"90\":1}}],[\"模板代码如下\",{\"1\":{\"95\":1}}],[\"模板代码\",{\"1\":{\"93\":1}}],[\"模板\",{\"0\":{\"2\":1,\"62\":1},\"2\":{\"103\":1,\"131\":1,\"152\":1,\"188\":1,\"212\":1,\"220\":1}}],[\"单机情况下\",{\"1\":{\"395\":1}}],[\"单机\",{\"1\":{\"395\":1}}],[\"单例的时候\",{\"1\":{\"387\":1}}],[\"单例的实现方法用的是\",{\"1\":{\"382\":1}}],[\"单例中\",{\"1\":{\"386\":1,\"387\":1}}],[\"单进程自适应发现热点\",{\"1\":{\"262\":1}}],[\"单个页面只有二级列表\",{\"1\":{\"231\":1}}],[\"单个评论列表\",{\"1\":{\"229\":1}}],[\"单词查找树\",{\"1\":{\"200\":1}}],[\"单调栈\",{\"0\":{\"195\":1}}],[\"单调队列\",{\"0\":{\"198\":1,\"320\":1},\"2\":{\"322\":1}}],[\"单调队列思维\",{\"1\":{\"90\":1}}],[\"单调队列写法\",{\"1\":{\"90\":1}}],[\"单链表只能存储当前节点的值和指向下一节点的指针\",{\"1\":{\"191\":1}}],[\"单链表\",{\"0\":{\"191\":1}}],[\"单源最短路\",{\"0\":{\"139\":1}}],[\"单位字节\",{\"1\":{\"31\":3}}],[\"三张表\",{\"1\":{\"257\":1}}],[\"三重循环\",{\"1\":{\"146\":1}}],[\"三\",{\"0\":{\"409\":1},\"1\":{\"90\":1}}],[\"三个实现类\",{\"1\":{\"348\":1}}],[\"三个数的位数可能都不一样\",{\"1\":{\"79\":1}}],[\"三个数\",{\"1\":{\"79\":1}}],[\"三个子数组内各元素之和都相等\",{\"1\":{\"50\":1}}],[\"组合\",{\"1\":{\"227\":1}}],[\"组装到各个评论卡片之中\",{\"1\":{\"226\":1}}],[\"组询问\",{\"1\":{\"177\":1}}],[\"组成的的二维网格\",{\"1\":{\"305\":1}}],[\"组成的\",{\"1\":{\"250\":1}}],[\"组成的字符串中查找最长的\",{\"1\":{\"32\":1}}],[\"组成一个\",{\"1\":{\"231\":1}}],[\"组成最小生成树\",{\"1\":{\"149\":1}}],[\"组物品和一个容量是\",{\"1\":{\"87\":1}}],[\"≤100\",{\"1\":{\"86\":1}}],[\"件物品\",{\"1\":{\"84\":1,\"85\":1,\"86\":1}}],[\"更容易辨识\",{\"1\":{\"384\":1}}],[\"更简洁的写法\",{\"1\":{\"332\":1}}],[\"更进一步的\",{\"1\":{\"261\":1}}],[\"更可以来一个段子\",{\"1\":{\"242\":1}}],[\"更易扩展的工程化能力\",{\"1\":{\"241\":1}}],[\"更加不容易出现评论区维度的热点\",{\"1\":{\"238\":1}}],[\"更多嵌套层次\",{\"1\":{\"231\":1}}],[\"更像是饭后甜点\",{\"1\":{\"222\":1}}],[\"更新最长路径\",{\"1\":{\"283\":1}}],[\"更新最短距离\",{\"1\":{\"100\":1}}],[\"更新频率\",{\"1\":{\"241\":1}}],[\"更新区间\",{\"1\":{\"219\":1}}],[\"更新端点和遍历的区间\",{\"1\":{\"218\":1}}],[\"更新右端点\",{\"1\":{\"215\":1}}],[\"更新t\",{\"1\":{\"148\":1}}],[\"更新其他点到集合的距离\",{\"1\":{\"148\":1}}],[\"更新\",{\"1\":{\"143\":1}}],[\"更新两点之间的最短距离\",{\"1\":{\"142\":1}}],[\"更新第一个点到起点的最短距离\",{\"1\":{\"140\":1}}],[\"更新完一个子节点\",{\"1\":{\"102\":1}}],[\"更新前缀计数器\",{\"1\":{\"97\":1}}],[\"更新c\",{\"1\":{\"79\":1}}],[\"更平衡一些\",{\"1\":{\"62\":1}}],[\"带入等式中看是否成立\",{\"1\":{\"79\":1}}],[\"带分数中\",{\"1\":{\"79\":1}}],[\"枚举当前状态的每一位\",{\"1\":{\"180\":1}}],[\"枚举每一列c\",{\"1\":{\"173\":1}}],[\"枚举分割点\",{\"1\":{\"95\":1}}],[\"枚举起点\",{\"1\":{\"95\":1}}],[\"枚举从1\",{\"1\":{\"180\":1}}],[\"枚举从\",{\"1\":{\"95\":1}}],[\"枚举a\",{\"1\":{\"79\":1}}],[\"枚举c\",{\"1\":{\"79\":1}}],[\"枚举\",{\"1\":{\"79\":1,\"159\":1}}],[\"枚举位数\",{\"1\":{\"79\":1}}],[\"枚举全排列\",{\"1\":{\"79\":1}}],[\"步骤\",{\"1\":{\"79\":1,\"178\":1,\"198\":1}}],[\"种表示法\",{\"1\":{\"79\":1}}],[\"类中的\",{\"1\":{\"387\":1}}],[\"类中定义的\",{\"1\":{\"387\":1}}],[\"类中\",{\"1\":{\"383\":1}}],[\"类在\",{\"1\":{\"350\":1}}],[\"类的效率更高\",{\"1\":{\"343\":1}}],[\"类却要调用一个\",{\"1\":{\"343\":1}}],[\"类使用\",{\"1\":{\"343\":1}}],[\"类用来表示内容可变的字符串\",{\"1\":{\"343\":1}}],[\"类用来表示那些创建后就不会再改变的字符串\",{\"1\":{\"343\":1}}],[\"类\",{\"1\":{\"287\":1,\"350\":2,\"357\":1}}],[\"类似于\",{\"1\":{\"357\":1}}],[\"类似于栈中的先进后出\",{\"1\":{\"271\":1}}],[\"类似的图存储思路\",{\"1\":{\"257\":1}}],[\"类似这样的带分数\",{\"1\":{\"79\":1}}],[\"类型的\",{\"1\":{\"387\":1}}],[\"类型的对象不止包含字符串\",{\"1\":{\"31\":1}}],[\"类型转换\",{\"1\":{\"344\":1}}],[\"类型\",{\"1\":{\"31\":1,\"232\":2}}],[\"类型对象所能包含的最大字符数\",{\"1\":{\"31\":1}}],[\"类型对象最多包含的字符数\",{\"1\":{\"31\":1}}],[\"类型对象中的字符个数\",{\"1\":{\"31\":1}}],[\"美元\",{\"1\":{\"78\":1}}],[\"翰翰和达达就要付\",{\"1\":{\"78\":1}}],[\"翰翰和达达只好花钱让它们坐索道下山\",{\"1\":{\"78\":1}}],[\"翰翰和达达饲养了\",{\"1\":{\"78\":1}}],[\"呜咕>\",{\"1\":{\"78\":1}}],[\"经过一分钟\",{\"1\":{\"332\":1}}],[\"经过若干操作变为\",{\"1\":{\"94\":1}}],[\"经历了千辛万苦\",{\"1\":{\"78\":1}}],[\"经验\",{\"2\":{\"47\":1}}],[\"小结\",{\"0\":{\"392\":1}}],[\"小的合并到大的中\",{\"1\":{\"219\":1}}],[\"小的数\",{\"1\":{\"195\":1}}],[\"小于号\",{\"1\":{\"211\":2}}],[\"小于eps视为0\",{\"1\":{\"173\":1}}],[\"小技巧\",{\"1\":{\"209\":1}}],[\"小方格的种类数\",{\"1\":{\"99\":1}}],[\"小沐沐要你来告诉奶牛什么是最长公共上升子序列\",{\"1\":{\"92\":1}}],[\"小沐沐说\",{\"1\":{\"92\":1}}],[\"小沐沐先让奶牛研究了最长上升子序列\",{\"1\":{\"92\":1}}],[\"小猫们终于爬上了山顶\",{\"1\":{\"78\":1}}],[\"小猫们要去爬山\",{\"1\":{\"78\":1}}],[\"小树接在大树下面\",{\"1\":{\"62\":1}}],[\"剪枝\",{\"1\":{\"77\":1}}],[\"⩽25\",{\"1\":{\"77\":1}}],[\"排列\",{\"1\":{\"299\":1}}],[\"排序方式\",{\"1\":{\"259\":1}}],[\"排序等\",{\"1\":{\"247\":1}}],[\"排序策略\",{\"1\":{\"241\":1}}],[\"排序过程可解释等等\",{\"1\":{\"241\":1}}],[\"排序我们往往都希望是个性化的\",{\"1\":{\"241\":1}}],[\"排序很像\",{\"1\":{\"241\":1}}],[\"排序\",{\"1\":{\"210\":1,\"211\":2,\"349\":1}}],[\"排在\",{\"1\":{\"77\":1}}],[\"排成一排\",{\"1\":{\"69\":1}}],[\"依赖其他\",{\"1\":{\"252\":1}}],[\"依赖服务多\",{\"1\":{\"226\":1}}],[\"依次遍历每个区间\",{\"1\":{\"218\":1}}],[\"依次经过非匹配边\",{\"1\":{\"151\":1}}],[\"依次枚举第一个集合中的每个点能否匹配第二个集合中的点\",{\"1\":{\"151\":1}}],[\"依次枚举\",{\"1\":{\"112\":1}}],[\"依次枚举每个分支\",{\"1\":{\"76\":1}}],[\"依照科学家的预测\",{\"1\":{\"68\":1}}],[\"标记走过\",{\"1\":{\"338\":1}}],[\"标记了\",{\"1\":{\"337\":1}}],[\"标记当前节点搜索时遍历过的节点\",{\"1\":{\"337\":1}}],[\"标记当前节点对应一个完整字符串\",{\"1\":{\"288\":1}}],[\"标记所有走过的点\",{\"1\":{\"337\":1}}],[\"标记变成烂橘子\",{\"1\":{\"332\":2}}],[\"标记是否尾节点\",{\"1\":{\"289\":1}}],[\"标记是否使用过\",{\"1\":{\"76\":1}}],[\"标记最近有一个人投递了同一个\",{\"1\":{\"261\":1}}],[\"标记\",{\"1\":{\"161\":1}}],[\"标记点是否在队列中\",{\"1\":{\"143\":1}}],[\"标记为已加入到集合中\",{\"1\":{\"140\":1}}],[\"标记为0\",{\"1\":{\"116\":1}}],[\"标记为1\",{\"1\":{\"116\":1}}],[\"标号\",{\"1\":{\"100\":1}}],[\"标准兼容\",{\"1\":{\"370\":1}}],[\"标准库函数\",{\"1\":{\"31\":1}}],[\"标准件\",{\"1\":{\"14\":1}}],[\"字典树\",{\"2\":{\"291\":1}}],[\"字典序\",{\"1\":{\"210\":1}}],[\"字典序较小的排在前面\",{\"1\":{\"76\":1,\"77\":1}}],[\"字数加权\",{\"1\":{\"240\":1}}],[\"字段捞出\",{\"1\":{\"257\":1}}],[\"字段大部分都是增量更新\",{\"1\":{\"238\":1}}],[\"字段\",{\"1\":{\"231\":1}}],[\"字符矩阵\",{\"1\":{\"68\":1}}],[\"字符串比较必须能用equals\",{\"1\":{\"344\":1}}],[\"字符串分为两类\",{\"1\":{\"343\":1}}],[\"字符串中的每个字符都有两种\",{\"1\":{\"313\":1}}],[\"字符串中只包含小写字母\",{\"1\":{\"93\":1}}],[\"字符串哈希\",{\"0\":{\"209\":1}}],[\"字符串以\",{\"1\":{\"200\":1}}],[\"字符串\",{\"0\":{\"31\":1,\"343\":1},\"1\":{\"210\":1}}],[\"首先会拼接默认的配置文件\",{\"1\":{\"386\":1}}],[\"首先遍历左子树\",{\"1\":{\"269\":1}}],[\"首先在设计一个评论系统之前\",{\"1\":{\"245\":1}}],[\"首先是引入了自适应的冷却算法\",{\"1\":{\"241\":1}}],[\"首先是评论表\",{\"1\":{\"231\":1}}],[\"首先是c端的发评接口会返回展示新评论所需的数据内容\",{\"1\":{\"229\":1}}],[\"首先预处理出所有阶乘取模的余数fact\",{\"1\":{\"176\":1}}],[\"首先\",{\"1\":{\"76\":1,\"77\":1,\"234\":1,\"386\":1}}],[\"把里面的配置项都放到一个\",{\"1\":{\"388\":1}}],[\"把岛屿\",{\"1\":{\"306\":1}}],[\"把二维数组中的每个格子看做\",{\"1\":{\"306\":1}}],[\"把单表变宽预处理好\",{\"1\":{\"251\":1}}],[\"把对存储的直接冲击\",{\"1\":{\"250\":1}}],[\"把数据拿出来返回\",{\"1\":{\"249\":1}}],[\"把相应的依赖划分为强依赖\",{\"1\":{\"235\":1}}],[\"把相加后的结果除以10求余\",{\"1\":{\"115\":1}}],[\"把一个数组去重\",{\"1\":{\"211\":1}}],[\"把一个\",{\"1\":{\"211\":2}}],[\"把一个方程的若干倍加到另一个方程上去\",{\"1\":{\"173\":1}}],[\"把第k位取反\",{\"1\":{\"210\":1}}],[\"把所有位变成0\",{\"1\":{\"210\":1}}],[\"把所有位置成1\",{\"1\":{\"210\":1}}],[\"把每个局面看成图中的一个节点\",{\"1\":{\"184\":1}}],[\"把游戏过程中面临的状态称为局面\",{\"1\":{\"182\":1}}],[\"把这个岛屿\",{\"1\":{\"306\":1}}],[\"把这个让给我好吧\",{\"1\":{\"151\":1}}],[\"把这一行换到最上面\",{\"1\":{\"173\":1}}],[\"把某行的若干倍加到另一行上去\",{\"1\":{\"173\":1}}],[\"把某一行乘一个非00的数\",{\"1\":{\"173\":1}}],[\"把找到的符合条件的点的长度加上\",{\"1\":{\"148\":1}}],[\"把b加入\",{\"1\":{\"143\":1}}],[\"把集合选\",{\"1\":{\"96\":1}}],[\"把\",{\"1\":{\"76\":1,\"262\":1}}],[\"从相邻节点拷贝注册信息\",{\"0\":{\"404\":1}}],[\"从堆栈的顶部返回元素的位置\",{\"1\":{\"350\":1}}],[\"从初始的\",{\"1\":{\"331\":1}}],[\"从根节点依次开始匹配每个字符\",{\"1\":{\"289\":1}}],[\"从根节点出发到任一个节点都是一个前缀\",{\"1\":{\"288\":1}}],[\"从根节点开始构造这个word对应的路径节点\",{\"1\":{\"289\":1}}],[\"从根节点开始\",{\"1\":{\"269\":1}}],[\"从数据写入主线程中剥离\",{\"1\":{\"234\":1}}],[\"从db读取到内容之后反写缓存\",{\"1\":{\"229\":1}}],[\"从而提高系统的可靠性和容错能力\",{\"1\":{\"370\":1}}],[\"从而不断扩散直到没有新鲜橘子或者无法扩散\",{\"1\":{\"331\":1}}],[\"从而把基础能力和业务能力剥离\",{\"1\":{\"247\":1}}],[\"从而具备了水平扩容能力\",{\"1\":{\"231\":1}}],[\"从而更好地满足各类用户的需求\",{\"1\":{\"222\":1}}],[\"从而便于删除前导0\",{\"1\":{\"118\":1}}],[\"从大到小排序需要加入第三个参数\",{\"1\":{\"211\":1}}],[\"从大到小排序\",{\"1\":{\"211\":1}}],[\"从0开始\",{\"1\":{\"199\":1}}],[\"从00\",{\"1\":{\"97\":1}}],[\"从队头弹出一个数\",{\"1\":{\"197\":1}}],[\"从栈顶弹出一个数\",{\"1\":{\"194\":1}}],[\"从一个未匹配路出发\",{\"1\":{\"151\":1}}],[\"从一个未匹配点出发\",{\"1\":{\"151\":1}}],[\"从高位到低位运算\",{\"1\":{\"118\":1}}],[\"从小到大枚举n的所有约数对里面比较小的那一个\",{\"1\":{\"163\":1}}],[\"从小到大枚举所有的质数\",{\"1\":{\"159\":1}}],[\"从小到大判断\",{\"1\":{\"163\":1}}],[\"从小到大尝试\",{\"1\":{\"156\":1}}],[\"从小到大遍历\",{\"1\":{\"155\":1,\"161\":1}}],[\"从小到大依次枚举每组边\",{\"1\":{\"149\":1}}],[\"从小到大\",{\"1\":{\"115\":1,\"116\":1}}],[\"从头开始遍历\",{\"1\":{\"106\":1}}],[\"从1\",{\"1\":{\"97\":1}}],[\"从下往上遍历\",{\"1\":{\"89\":1}}],[\"从上往下遍历\",{\"1\":{\"89\":1}}],[\"从顶部出发\",{\"1\":{\"89\":1}}],[\"从start开始枚举剩下的可选数字\",{\"1\":{\"77\":1}}],[\"从\",{\"1\":{\"75\":1,\"77\":1,\"79\":1,\"159\":1,\"249\":1,\"314\":1}}],[\"共\",{\"1\":{\"168\":1}}],[\"共一行\",{\"1\":{\"69\":1,\"127\":1}}],[\"共有多少种不同的截断方法\",{\"1\":{\"50\":1}}],[\"照片保证第\",{\"1\":{\"68\":1}}],[\"照片中有多少岛屿会被完全淹没\",{\"1\":{\"68\":1}}],[\"构建minioclient对象\",{\"1\":{\"375\":1}}],[\"构建缓存\",{\"1\":{\"261\":1}}],[\"构建依附关系\",{\"1\":{\"61\":1}}],[\"构造函数主要做了以下事情\",{\"1\":{\"397\":1}}],[\"构造函数中调用了\",{\"1\":{\"388\":1}}],[\"构造器模式\",{\"1\":{\"391\":1}}],[\"构造服务实例\",{\"0\":{\"391\":1}}],[\"构造实例信息管理器\",{\"0\":{\"389\":1}}],[\"构造方法会调用\",{\"1\":{\"385\":1}}],[\"构造状态转移方程\",{\"1\":{\"95\":1}}],[\"构造成\",{\"1\":{\"79\":1}}],[\"构造成一个整数和一个分数\",{\"1\":{\"79\":1}}],[\"构成的\",{\"1\":{\"68\":1}}],[\"列表去批量查询评论内容了\",{\"1\":{\"259\":1}}],[\"列表\",{\"0\":{\"347\":1},\"1\":{\"259\":1}}],[\"列表后\",{\"1\":{\"237\":1}}],[\"列出容量计算的数学公式\",{\"1\":{\"234\":1}}],[\"列col\",{\"1\":{\"173\":1}}],[\"列的状态是\",{\"1\":{\"99\":1}}],[\"列的像素都是海洋\",{\"1\":{\"68\":1}}],[\"列\",{\"1\":{\"68\":2,\"173\":1}}],[\"具备水平扩容的弹性\",{\"1\":{\"235\":1}}],[\"具体的代码在\",{\"1\":{\"387\":1}}],[\"具体地\",{\"1\":{\"370\":1}}],[\"具体方法是\",{\"1\":{\"184\":1}}],[\"具体步骤\",{\"1\":{\"142\":1}}],[\"具体问题的逻辑\",{\"1\":{\"128\":1}}],[\"具体来说如果一块陆地像素与海洋相邻\",{\"1\":{\"68\":1}}],[\"具有相同结构和节点值的子树\",{\"1\":{\"24\":1}}],[\"科学家预测未来几十年\",{\"1\":{\"68\":1}}],[\"座岛屿\",{\"1\":{\"68\":1}}],[\"像素的照片\",{\"1\":{\"68\":1}}],[\"找不到则返回最后一个元素的下标+1\",{\"1\":{\"211\":1}}],[\"找不到解决方案则输出\",{\"1\":{\"67\":1}}],[\"找出滑动窗口中的最大值\",{\"1\":{\"198\":1}}],[\"找出每个数左边离它最近的比它大\",{\"1\":{\"195\":1}}],[\"找右端点\",{\"1\":{\"110\":1}}],[\"找左端点\",{\"1\":{\"109\":1}}],[\"找到这个启动类\",{\"1\":{\"382\":1}}],[\"找到后处理并弹出\",{\"1\":{\"271\":1}}],[\"找到记录的\",{\"1\":{\"251\":1}}],[\"找到每一个数左边离他最近的比它小的数\",{\"1\":{\"195\":1}}],[\"找到绝对值最大的行\",{\"1\":{\"173\":1}}],[\"找到当前列绝对值最大的一行\",{\"1\":{\"173\":1}}],[\"找到最小整数解\",{\"1\":{\"172\":1}}],[\"找到该点赋给\",{\"1\":{\"148\":1}}],[\"找到不在集合当中的最小的点\",{\"1\":{\"148\":1}}],[\"找到一个未加入集合且距离最近的点\",{\"1\":{\"140\":1}}],[\"找到与起点最近的且未确定最短路径的点\",{\"1\":{\"140\":1}}],[\"找到第一个大于等于x的位置\",{\"1\":{\"129\":1}}],[\"找到j的根节点\",{\"1\":{\"59\":1}}],[\"找到i的根节点\",{\"1\":{\"59\":1}}],[\"恢复现场\",{\"1\":{\"67\":1,\"76\":1,\"77\":1,\"338\":1}}],[\"变得不可使用\",{\"1\":{\"347\":1}}],[\"变长数组\",{\"1\":{\"210\":1}}],[\"变换\",{\"1\":{\"173\":1}}],[\"变换串\",{\"1\":{\"67\":1}}],[\"变\",{\"1\":{\"126\":2}}],[\"变成b\",{\"1\":{\"94\":1}}],[\"变为\",{\"1\":{\"94\":1}}],[\"变量定义成了\",{\"1\":{\"382\":1}}],[\"变量\",{\"1\":{\"43\":2,\"384\":1,\"401\":1}}],[\"包含\",{\"1\":{\"127\":1}}],[\"包含前导零\",{\"1\":{\"97\":1}}],[\"包含两个用空格隔开的整数\",{\"1\":{\"78\":1}}],[\"包含一个由字符\",{\"1\":{\"68\":1}}],[\"包含一个整数\",{\"1\":{\"67\":1,\"69\":1}}],[\"包括但不限于\",{\"1\":{\"368\":1}}],[\"包括但不限于书籍\",{\"1\":{\"19\":1}}],[\"包括一些已有的在线\",{\"1\":{\"241\":1}}],[\"包括算法和策略的快速迭代\",{\"1\":{\"241\":1}}],[\"包括算法题\",{\"1\":{\"1\":1}}],[\"包括缓存\",{\"1\":{\"237\":1}}],[\"包括\",{\"1\":{\"231\":1,\"344\":1}}],[\"包括评论\",{\"1\":{\"231\":1}}],[\"包括总评论数\",{\"1\":{\"231\":1}}],[\"包括发布人\",{\"1\":{\"231\":1}}],[\"包括送审\",{\"1\":{\"229\":1}}],[\"包括负权边\",{\"1\":{\"142\":1}}],[\"包括编程语言\",{\"1\":{\"7\":1}}],[\"交由它来管理\",{\"1\":{\"392\":1}}],[\"交由其他的线程池并发执行\",{\"1\":{\"234\":1}}],[\"交替路\",{\"1\":{\"151\":1}}],[\"交换两个点\",{\"1\":{\"205\":1}}],[\"交换两个方程的位置\",{\"1\":{\"173\":1}}],[\"交换两个数\",{\"1\":{\"126\":1}}],[\"交换某两行\",{\"1\":{\"173\":1}}],[\"交换位置\",{\"1\":{\"67\":1}}],[\"交换过程如下\",{\"1\":{\"67\":1}}],[\"交互器将立即终止\",{\"1\":{\"37\":1}}],[\"交互题\",{\"0\":{\"37\":1}}],[\"示例\",{\"1\":{\"391\":1}}],[\"示例中图形就可以通过让\",{\"1\":{\"67\":1}}],[\"示例代码\",{\"1\":{\"61\":1,\"62\":1}}],[\"右对左\",{\"1\":{\"295\":1}}],[\"右子树的深度\",{\"1\":{\"276\":1}}],[\"右儿子相比最小的元素\",{\"1\":{\"205\":1}}],[\"右儿子是2x\",{\"1\":{\"205\":1}}],[\"右边\",{\"1\":{\"308\":1}}],[\"右边丢弃\",{\"1\":{\"126\":1}}],[\"右边补0\",{\"1\":{\"126\":1}}],[\"右补0\",{\"1\":{\"126\":1}}],[\"右移\",{\"1\":{\"125\":1,\"126\":2,\"127\":1}}],[\"右移和\",{\"1\":{\"105\":1}}],[\"右半边剩下的\",{\"1\":{\"106\":1}}],[\"右端点\",{\"1\":{\"95\":1}}],[\"右三个方向的数字交换成功得到正确排列\",{\"1\":{\"67\":1}}],[\"右四个方向之一的数字交换\",{\"1\":{\"67\":1}}],[\"右任意一个方向移动一个位置\",{\"1\":{\"66\":1}}],[\"左边\",{\"1\":{\"308\":1}}],[\"左边的二进制位丢弃\",{\"1\":{\"126\":1}}],[\"左对右\",{\"1\":{\"295\":1}}],[\"左子树的深度\",{\"1\":{\"276\":1}}],[\"左补\",{\"1\":{\"126\":2}}],[\"左半边剩下的\",{\"1\":{\"106\":1}}],[\"左半边的子集\",{\"1\":{\"84\":1}}],[\"左移2位\",{\"1\":{\"126\":1}}],[\"左移\",{\"1\":{\"105\":1,\"125\":1,\"126\":2}}],[\"左\",{\"1\":{\"66\":1,\"67\":1}}],[\"左闭右开\",{\"1\":{\"42\":1}}],[\"下载\",{\"1\":{\"364\":1,\"365\":1}}],[\"下载安装包\",{\"1\":{\"362\":1}}],[\"下边\",{\"1\":{\"308\":1}}],[\"下放到消息队列\",{\"1\":{\"250\":1}}],[\"下标从\",{\"1\":{\"205\":1}}],[\"下标从1开始\",{\"1\":{\"199\":1}}],[\"下标从1开始存\",{\"1\":{\"93\":1}}],[\"下家\",{\"1\":{\"151\":1}}],[\"下\",{\"1\":{\"66\":1,\"67\":2}}],[\"下面看题中完整的写法\",{\"1\":{\"62\":1}}],[\"下面有\",{\"1\":{\"61\":1}}],[\"已简化\",{\"1\":{\"231\":1}}],[\"已访问\",{\"1\":{\"102\":1}}],[\"已知该人每次可以向上\",{\"1\":{\"66\":1}}],[\"已路径压缩\",{\"0\":{\"58\":1}}],[\"处理所有的拷贝操作到其他节点\",{\"1\":{\"397\":1}}],[\"处理注册相关的流程\",{\"0\":{\"396\":1}}],[\"处理之前的回源消息也是类似的思路\",{\"1\":{\"250\":1}}],[\"处理发评论请求是无法实现这种串行的\",{\"1\":{\"229\":1}}],[\"处的数字为\",{\"1\":{\"66\":1}}],[\"处和\",{\"1\":{\"66\":1}}],[\"处\",{\"1\":{\"66\":2}}],[\"有十分完善的官方文档\",{\"1\":{\"370\":1}}],[\"有温度\",{\"1\":{\"242\":1}}],[\"有知识\",{\"1\":{\"242\":1}}],[\"有趣的交流环境\",{\"1\":{\"242\":1}}],[\"有害评论被删除后\",{\"1\":{\"237\":1}}],[\"有序\",{\"1\":{\"229\":1,\"356\":1}}],[\"有两个基本且重要的特征\",{\"1\":{\"231\":1}}],[\"有两个指针\",{\"1\":{\"192\":1}}],[\"有两个参数\",{\"1\":{\"42\":1}}],[\"有一个大小为\",{\"1\":{\"318\":1}}],[\"有一个线程去\",{\"1\":{\"261\":1}}],[\"有一个1\",{\"1\":{\"180\":1}}],[\"有一个人位于左上角\",{\"1\":{\"66\":1}}],[\"有唯一解\",{\"1\":{\"173\":1}}],[\"有无穷多组解\",{\"1\":{\"173\":1}}],[\"有向图游戏的某个局面必败\",{\"1\":{\"187\":1}}],[\"有向图游戏的某个局面必胜\",{\"1\":{\"187\":1}}],[\"有向图游戏的和的sg函数值等于它包含的各个子游戏sg函数值的异或和\",{\"1\":{\"187\":1}}],[\"有向图游戏的和\",{\"0\":{\"187\":1}}],[\"有向图游戏\",{\"0\":{\"184\":1}}],[\"有向图\",{\"1\":{\"140\":1}}],[\"有向无环图被称为拓扑图\",{\"1\":{\"137\":1}}],[\"有的补0\",{\"1\":{\"125\":1}}],[\"有的补符号位\",{\"1\":{\"125\":1}}],[\"有符号数\",{\"1\":{\"125\":1}}],[\"有\",{\"1\":{\"79\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"177\":1}}],[\"或竖直方向上相邻的陆地连接形成\",{\"1\":{\"305\":1}}],[\"或指针\",{\"1\":{\"211\":3}}],[\"或\",{\"1\":{\"66\":2,\"111\":1,\"125\":1,\"150\":1,\"209\":1,\"369\":1}}],[\"或者是字符串\",{\"1\":{\"349\":1}}],[\"或者说\",{\"1\":{\"287\":1}}],[\"或者有状态层\",{\"1\":{\"250\":1}}],[\"或者高于多少等级的用户才能发表评论\",{\"1\":{\"246\":1}}],[\"或者用更复杂的锁实现\",{\"1\":{\"229\":1}}],[\"或者重载\",{\"1\":{\"211\":1}}],[\"或者\",{\"1\":{\"43\":1,\"62\":1,\"109\":1,\"110\":1,\"126\":1,\"249\":1}}],[\"或者c++中的\",{\"1\":{\"37\":1}}],[\"或者问题用完了\",{\"1\":{\"37\":1}}],[\"比方说先审后发或者先发后审\",{\"1\":{\"246\":1}}],[\"比较左右两半边\",{\"1\":{\"106\":1}}],[\"比较高度\",{\"1\":{\"62\":1}}],[\"比如上面的是\",{\"1\":{\"387\":1}}],[\"比如上面评论图红框里的就是根评论\",{\"1\":{\"257\":1}}],[\"比如获取\",{\"1\":{\"384\":1}}],[\"比如社交评论\",{\"1\":{\"368\":1}}],[\"比如根节点就是记录了字符串首个位置\",{\"1\":{\"288\":1}}],[\"比如是不是根评论\",{\"1\":{\"257\":1}}],[\"比如两个服务互相调用\",{\"1\":{\"247\":1}}],[\"比如发布评论用户等级限定\",{\"1\":{\"252\":1}}],[\"比如发布\",{\"1\":{\"247\":1}}],[\"比如访问账号服务进行等级判定\",{\"1\":{\"247\":1}}],[\"比如在漫画\",{\"1\":{\"246\":1}}],[\"比如评论总数等\",{\"1\":{\"257\":1}}],[\"比如评论区所有的评论都没有赞\",{\"1\":{\"241\":1}}],[\"比如评论列表\",{\"1\":{\"229\":1}}],[\"比如围棋\",{\"1\":{\"183\":1}}],[\"比如归并排序中合并两个有序序列的操作\",{\"1\":{\"128\":1}}],[\"比如将数\",{\"1\":{\"126\":2}}],[\"比如取数\",{\"1\":{\"126\":1}}],[\"比如我们可以将多个参数整合为一个结构体传递到函数内部\",{\"1\":{\"45\":1}}],[\"比如\",{\"1\":{\"31\":1,\"49\":1,\"126\":2,\"127\":1,\"195\":1,\"257\":3,\"337\":1}}],[\"扁平化处理\",{\"1\":{\"62\":1}}],[\"将集群中的\",{\"1\":{\"402\":1}}],[\"将集群节点的\",{\"1\":{\"402\":1}}],[\"将集合的所有元素设置为\",{\"1\":{\"356\":1}}],[\"将配置文件中的配置项放到\",{\"1\":{\"387\":1}}],[\"将业务数据存储在云上\",{\"1\":{\"369\":1}}],[\"将元素添加到队尾\",{\"1\":{\"352\":1}}],[\"将元素添加到队首\",{\"1\":{\"352\":1}}],[\"将元素e放在index位置\",{\"1\":{\"347\":1}}],[\"将关联映射中的值改为新值\",{\"1\":{\"349\":1}}],[\"将数组列表的存储容量削减到其当前大小\",{\"1\":{\"347\":1}}],[\"将数字\",{\"1\":{\"69\":1}}],[\"将已知编码的byte\",{\"1\":{\"344\":1}}],[\"将char\",{\"1\":{\"344\":1}}],[\"将该字符串对应的系统变量转换为integer\",{\"1\":{\"344\":1}}],[\"将该行的第一个数变成\",{\"1\":{\"173\":1}}],[\"将任意基本类型或引用类型转换为字符串\",{\"1\":{\"344\":1}}],[\"将初始的烂橘子入队\",{\"1\":{\"332\":1}}],[\"将bfs过程提取为单独的一个方法\",{\"1\":{\"332\":1}}],[\"将每层的扩散情况都加入队列\",{\"1\":{\"331\":1}}],[\"将每次移动的最大值保存在\",{\"1\":{\"319\":1}}],[\"将以\",{\"1\":{\"326\":1}}],[\"将遍历过的陆地淹没\",{\"1\":{\"306\":1}}],[\"将有序数组转换为二叉搜索树\",{\"0\":{\"298\":1},\"1\":{\"298\":1}}],[\"将评论区的所有操作\",{\"1\":{\"238\":1}}],[\"将单个评论区内的发评串行处理\",{\"1\":{\"229\":1}}],[\"将其转换\",{\"1\":{\"226\":1}}],[\"将其等价转换\",{\"1\":{\"172\":1}}],[\"将新的区间放入ans数组中\",{\"1\":{\"219\":1}}],[\"将指定线段区间完全覆盖\",{\"1\":{\"218\":1}}],[\"将第k位变成v\",{\"1\":{\"210\":1}}],[\"将当前字符添加到当前节点对应的子节点位置\",{\"1\":{\"289\":1}}],[\"将当前元素加入到队尾\",{\"1\":{\"198\":1}}],[\"将当前元素加入队尾\",{\"1\":{\"198\":1}}],[\"将当前行的首位变成1\",{\"1\":{\"173\":1}}],[\"将下标是k的点后面的点删掉\",{\"1\":{\"191\":1}}],[\"将下面所有行的当且列的值变成\",{\"1\":{\"173\":1}}],[\"将头结点删除\",{\"1\":{\"191\":1}}],[\"将绝对值最大的行换到最顶端\",{\"1\":{\"173\":1}}],[\"将这\",{\"1\":{\"172\":1}}],[\"将这一位相减后的结果压入c中\",{\"1\":{\"116\":1}}],[\"将连通块逐渐扩大\",{\"1\":{\"148\":1}}],[\"将所有的值添加到给定的集合中\",{\"1\":{\"356\":1}}],[\"将所有点分成\",{\"1\":{\"150\":1}}],[\"将所有存在交集的区间合并\",{\"1\":{\"130\":1}}],[\"将所有值排序\",{\"1\":{\"129\":1}}],[\"将前导0置于尾部\",{\"1\":{\"118\":1}}],[\"将上次的余数×10再加上当前位的数字\",{\"1\":{\"118\":1}}],[\"将问题转变成统计数列中\",{\"1\":{\"112\":1}}],[\"将模板\",{\"1\":{\"110\":1}}],[\"将临时序列放入原序列中\",{\"1\":{\"106\":1}}],[\"将小的放入一个临时序列\",{\"1\":{\"106\":1}}],[\"将整个序列均分为两部分\",{\"1\":{\"106\":1}}],[\"将字符串转换为char\",{\"1\":{\"344\":1}}],[\"将字符串转换为boolean类型\",{\"1\":{\"344\":1}}],[\"将字符串转换为int类型\",{\"1\":{\"344\":1}}],[\"将字符串看成\",{\"1\":{\"209\":1}}],[\"将字符串\",{\"1\":{\"94\":2}}],[\"将会有很多种排列方法\",{\"1\":{\"69\":1}}],[\"将a串变为b串\",{\"1\":{\"67\":1}}],[\"将\",{\"1\":{\"62\":1,\"67\":1,\"79\":2,\"94\":1,\"126\":2,\"169\":1,\"365\":1,\"375\":1,\"392\":1,\"395\":1}}],[\"将一个对象拆分成\",{\"1\":{\"370\":1}}],[\"将一个容器中重复的元素删除\",{\"1\":{\"210\":1}}],[\"将一个新的节点x插入下标是k的后面\",{\"1\":{\"191\":1}}],[\"将一个数的各二进制位全部右移若干位\",{\"1\":{\"126\":1}}],[\"将一个运算对象的各二进制位全部左移若干位\",{\"1\":{\"126\":1}}],[\"将一个\",{\"1\":{\"33\":1}}],[\"高性能\",{\"1\":{\"369\":1,\"370\":1}}],[\"高并发的热点处理实践\",{\"1\":{\"234\":1,\"242\":1}}],[\"高吞吐的调用做异步化\",{\"1\":{\"229\":1}}],[\"高斯消元适用解法\",{\"1\":{\"173\":1}}],[\"高斯消元\",{\"0\":{\"173\":1}}],[\"高位补0\",{\"1\":{\"125\":1}}],[\"高位丢弃\",{\"1\":{\"125\":1}}],[\"高位在后面\",{\"1\":{\"116\":1}}],[\"高精\",{\"1\":{\"117\":1,\"118\":1}}],[\"高精度乘低精度模板\",{\"1\":{\"178\":1}}],[\"高精度整数除法\",{\"0\":{\"118\":1}}],[\"高精度整数乘法\",{\"0\":{\"117\":1}}],[\"高精度减法\",{\"0\":{\"116\":1}}],[\"高精度加法\",{\"0\":{\"115\":1}}],[\"高精度算法\",{\"0\":{\"114\":1}}],[\"高度小的接在高的下面\",{\"1\":{\"62\":1}}],[\"高度小一些的树接到大一些的树下面\",{\"1\":{\"62\":1}}],[\"高度数组\",{\"1\":{\"62\":1}}],[\"高度\",{\"1\":{\"62\":1}}],[\"高效地开发和集成复杂的应用软件\",{\"1\":{\"14\":1}}],[\"树深度\",{\"1\":{\"276\":1}}],[\"树又称字典树\",{\"1\":{\"200\":1}}],[\"树与图的遍历\",{\"0\":{\"134\":1}}],[\"树与图的存储\",{\"0\":{\"133\":1}}],[\"树形dp\",{\"0\":{\"101\":1}}],[\"树的结构\",{\"1\":{\"288\":1}}],[\"树的高度\",{\"1\":{\"149\":1,\"202\":1}}],[\"树的高度最坏情况下可能变成\",{\"1\":{\"62\":1}}],[\"树的根\",{\"1\":{\"102\":1}}],[\"树的根节点从0开始\",{\"1\":{\"43\":1}}],[\"树\",{\"1\":{\"62\":1}}],[\"其全部oldchar都替换成newchar\",{\"1\":{\"344\":1}}],[\"其创建的对象将直接放置到堆中\",{\"1\":{\"344\":1}}],[\"其长度为end或end\",{\"1\":{\"342\":1}}],[\"其实就是加载这个文件\",{\"1\":{\"386\":1}}],[\"其实就是把二叉树上的每个节点的左右子节点都交换一下\",{\"1\":{\"325\":1}}],[\"其实隐式地维护了一个栈结构\",{\"1\":{\"271\":1}}],[\"其实关键在于\",{\"1\":{\"62\":1}}],[\"其回复也等价于全部删除\",{\"1\":{\"231\":1}}],[\"其他地方想获取\",{\"1\":{\"401\":1}}],[\"其他地方想要获取上下文\",{\"1\":{\"401\":1}}],[\"其他的都是一些统计信息等等\",{\"1\":{\"257\":1}}],[\"其他\",{\"0\":{\"403\":1},\"1\":{\"231\":1}}],[\"其余为o\",{\"1\":{\"347\":1}}],[\"其余所有的数字依次跟着变化\",{\"1\":{\"173\":1}}],[\"其余位为\",{\"1\":{\"126\":3}}],[\"其表达式为\",{\"1\":{\"127\":1}}],[\"其更新操作是\",{\"1\":{\"109\":1,\"110\":1}}],[\"其位数和棋盘的行数一致\",{\"1\":{\"99\":1}}],[\"其次在全量打分排序阶段\",{\"1\":{\"241\":1}}],[\"其次是评论区表\",{\"1\":{\"231\":1}}],[\"其次\",{\"1\":{\"76\":1,\"77\":1}}],[\"其时间复杂度就是树的高度\",{\"1\":{\"62\":1}}],[\"其中的数据实时性\",{\"1\":{\"241\":1}}],[\"其中的第\",{\"1\":{\"127\":1}}],[\"其中最核心的是发布类接口以及列表类接口\",{\"1\":{\"226\":1}}],[\"其中元素已经按\",{\"1\":{\"299\":1}}],[\"其中元素\",{\"1\":{\"205\":1}}],[\"其中任意两条边都不依附于同一个顶点\",{\"1\":{\"151\":1}}],[\"其中一个作为分界点\",{\"1\":{\"105\":1}}],[\"其中i为数字个数\",{\"1\":{\"97\":2}}],[\"其中第\",{\"1\":{\"78\":1}}],[\"其中\",{\"1\":{\"43\":1,\"66\":1,\"68\":1,\"99\":1,\"127\":1,\"177\":1,\"257\":1,\"336\":1,\"364\":1}}],[\"洛谷\",{\"0\":{\"62\":1}}],[\"询问是否存在依附关系\",{\"1\":{\"61\":1}}],[\"查看栈顶元素\",{\"1\":{\"350\":1}}],[\"查找字典树是否包含word前缀\",{\"1\":{\"289\":1}}],[\"查找前缀\",{\"1\":{\"288\":1}}],[\"查找每个键值对的元素\",{\"1\":{\"210\":1}}],[\"查找一个数\",{\"1\":{\"210\":1}}],[\"查找父节点\",{\"1\":{\"62\":1}}],[\"查找根节点\",{\"1\":{\"61\":1}}],[\"查询快\",{\"1\":{\"347\":1}}],[\"查询还需要回表\",{\"1\":{\"258\":1}}],[\"查询性能也天差万别\",{\"1\":{\"241\":1}}],[\"查询压力也会非常大\",{\"1\":{\"241\":1}}],[\"查询xxx评论基础信息\",{\"1\":{\"232\":1}}],[\"查询xxx评论列表\",{\"1\":{\"232\":1}}],[\"查询时间序一级评论列表\",{\"1\":{\"231\":1}}],[\"查询评论区基础信息\",{\"1\":{\"231\":1,\"232\":1}}],[\"查询字符串出现的次数\",{\"1\":{\"200\":1}}],[\"查询一定要进行路径压缩\",{\"1\":{\"58\":1}}],[\"查询\",{\"0\":{\"58\":1},\"1\":{\"55\":1,\"241\":1}}],[\"父评论等\",{\"1\":{\"231\":1}}],[\"父节点为它自己\",{\"1\":{\"149\":1}}],[\"父节点设置为自己\",{\"1\":{\"57\":1}}],[\"父亲数组\",{\"1\":{\"61\":1,\"62\":1}}],[\"亲戚关系\",{\"0\":{\"61\":1}}],[\"例题二\",{\"1\":{\"127\":1}}],[\"例题一\",{\"1\":{\"127\":1}}],[\"例题\",{\"0\":{\"127\":1}}],[\"例如自动补完和拼写检查\",{\"1\":{\"287\":1}}],[\"例如排序提权\",{\"1\":{\"241\":1}}],[\"例如单个\",{\"1\":{\"241\":1}}],[\"例如视频表的评论数\",{\"1\":{\"238\":1}}],[\"例如依据评论的状态来做评论区的计数更新\",{\"1\":{\"238\":1}}],[\"例如评论计数\",{\"1\":{\"238\":1}}],[\"例如评论点赞点踩\",{\"1\":{\"238\":1}}],[\"例如评论列表的露出\",{\"1\":{\"237\":1}}],[\"例如审核删除的有害评论\",{\"1\":{\"237\":1}}],[\"例如查询评论列表\",{\"1\":{\"228\":1}}],[\"例如在批量查询评论发布人的粉丝勋章数据之后\",{\"1\":{\"226\":1}}],[\"例如up主点赞等\",{\"1\":{\"231\":1}}],[\"例如up主点赞\",{\"1\":{\"223\":1}}],[\"例如表情\",{\"1\":{\"223\":1}}],[\"例如音乐会\",{\"1\":{\"222\":1}}],[\"例如电影\",{\"1\":{\"222\":1}}],[\"例如求长度\",{\"1\":{\"128\":1}}],[\"例如求\",{\"1\":{\"127\":1}}],[\"例如上图中的海域未来会变成如下样子\",{\"1\":{\"68\":1}}],[\"例如上图就有\",{\"1\":{\"68\":1}}],[\"例如\",{\"1\":{\"67\":3,\"77\":1,\"115\":1,\"116\":1,\"126\":2,\"210\":1,\"237\":1,\"312\":1,\"336\":1}}],[\"例如超过\",{\"1\":{\"31\":1}}],[\"例二\",{\"0\":{\"62\":1},\"1\":{\"112\":1}}],[\"例一\",{\"0\":{\"61\":1}}],[\"典例分析\",{\"0\":{\"60\":1}}],[\"粗暴的把\",{\"1\":{\"59\":1}}],[\"基于接口的方式\",{\"1\":{\"384\":1}}],[\"基于前缀树结构\",{\"1\":{\"288\":1}}],[\"基于\",{\"1\":{\"257\":1,\"368\":1,\"370\":1}}],[\"基于用户正负样本投票的\",{\"1\":{\"240\":1}}],[\"基于这种冗余设计\",{\"1\":{\"238\":1}}],[\"基于安全\",{\"1\":{\"229\":1}}],[\"基于平衡二叉树\",{\"1\":{\"210\":1}}],[\"基础功能模块\",{\"0\":{\"223\":1}}],[\"基础算法\",{\"0\":{\"104\":1},\"1\":{\"2\":1}}],[\"基本类型的最大值和最小值\",{\"0\":{\"358\":1}}],[\"基本不会修改\",{\"1\":{\"231\":1}}],[\"基本思路\",{\"1\":{\"169\":1}}],[\"基本步骤\",{\"1\":{\"143\":1}}],[\"基本模板\",{\"0\":{\"56\":1}}],[\"基本操作主要有\",{\"1\":{\"55\":1}}],[\"等各种复杂工作负载以及成为\",{\"1\":{\"370\":1}}],[\"等于\",{\"1\":{\"276\":1}}],[\"等数据\",{\"1\":{\"251\":1}}],[\"等效替代\",{\"1\":{\"172\":1}}],[\"等\",{\"1\":{\"55\":1,\"231\":1,\"232\":1,\"240\":1,\"247\":1,\"257\":1,\"369\":2}}],[\"等价于~\",{\"1\":{\"210\":1}}],[\"等价于\",{\"1\":{\"49\":1}}],[\"但对于数据传输的安全性和及时性有较高要求的业务来说\",{\"1\":{\"369\":1}}],[\"但关闭会话服务会停止\",{\"1\":{\"362\":1}}],[\"但最好使用\",{\"1\":{\"350\":1}}],[\"但不建议这么做\",{\"1\":{\"352\":1}}],[\"但不能添加任何元素\",{\"1\":{\"349\":1}}],[\"但不能不取\",{\"1\":{\"182\":1}}],[\"但不要对其进行改动\",{\"1\":{\"347\":1}}],[\"但从index开始从后往前找\",{\"1\":{\"344\":1}}],[\"但从index开始找\",{\"1\":{\"344\":1}}],[\"但其实\",{\"1\":{\"343\":1}}],[\"但其有一个缺点\",{\"1\":{\"51\":1}}],[\"但要注意\",{\"1\":{\"331\":1}}],[\"但\",{\"1\":{\"312\":1}}],[\"但评论往往不会如此激进\",{\"1\":{\"241\":1}}],[\"但也有一点根本性差异\",{\"1\":{\"241\":1}}],[\"但都能保障用户的基础体验\",{\"1\":{\"235\":1}}],[\"但随着b站社区破圈起量\",{\"1\":{\"231\":1}}],[\"但由于部分缓存数据项的重建代价较高\",{\"1\":{\"229\":1}}],[\"但城建的棋类游戏\",{\"1\":{\"183\":1}}],[\"但归并排序的核心在这一步骤\",{\"1\":{\"105\":1}}],[\"但是如果是自定义的实体类对象\",{\"1\":{\"349\":1}}],[\"但是热点\",{\"1\":{\"262\":1}}],[\"但是\",{\"1\":{\"251\":1}}],[\"但是架构层次来说\",{\"1\":{\"248\":1}}],[\"但是评论区的计数更新操作\",{\"1\":{\"231\":1}}],[\"但是需要提供极高的可用性与性能吞吐\",{\"1\":{\"228\":1}}],[\"但是由于业务数据量较大\",{\"1\":{\"227\":1}}],[\"但是疲倦的它们再也不想徒步走下山了\",{\"1\":{\"78\":1}}],[\"但是不一定\",{\"1\":{\"62\":1}}],[\"但是有可能出现\",{\"1\":{\"59\":1}}],[\"但地图没有这么大\",{\"1\":{\"51\":1}}],[\"递推式\",{\"1\":{\"175\":1}}],[\"递推法求组合数\",{\"0\":{\"175\":1}}],[\"递推求出二维前缀和\",{\"1\":{\"51\":1}}],[\"递归遍历\",{\"1\":{\"338\":1}}],[\"递归地交换每个节点的左右子树\",{\"1\":{\"325\":1}}],[\"递归的构建左子树与右子树\",{\"1\":{\"301\":1}}],[\"递归的终止情况\",{\"1\":{\"105\":1}}],[\"递归过程\",{\"1\":{\"294\":1}}],[\"递归返回即可\",{\"1\":{\"282\":1}}],[\"递归实现\",{\"1\":{\"276\":1}}],[\"递归结束条件\",{\"1\":{\"294\":1}}],[\"递归结束\",{\"1\":{\"270\":1}}],[\"递归终点\",{\"1\":{\"270\":1}}],[\"递归边界使某数变成了0\",{\"1\":{\"165\":1}}],[\"递归排序\",{\"1\":{\"106\":1}}],[\"递归处理子问题\",{\"1\":{\"105\":2}}],[\"递归从后往前更新\",{\"1\":{\"102\":1}}],[\"递归出口\",{\"1\":{\"58\":1}}],[\"递归\",{\"0\":{\"270\":1,\"276\":1},\"1\":{\"43\":1,\"165\":1},\"2\":{\"28\":1,\"81\":1,\"273\":1,\"279\":1,\"285\":1,\"297\":1,\"328\":1}}],[\"递归左右子树\",{\"1\":{\"25\":1}}],[\"递归相关题型\",{\"0\":{\"74\":1},\"1\":{\"3\":1}}],[\"坐标和价值\",{\"1\":{\"51\":1}}],[\"坐标\",{\"1\":{\"51\":1}}],[\"行row\",{\"1\":{\"173\":1}}],[\"行包含两个整数\",{\"1\":{\"172\":1}}],[\"行包含整数\",{\"1\":{\"172\":1}}],[\"行的整数表示第\",{\"1\":{\"78\":1}}],[\"行询问\",{\"1\":{\"61\":1}}],[\"行有\",{\"1\":{\"61\":1}}],[\"行\",{\"1\":{\"51\":1,\"62\":1,\"66\":1,\"68\":3,\"78\":2,\"93\":3,\"172\":1}}],[\"行每行包含一个整数\",{\"1\":{\"49\":1}}],[\"接受一个集合容器\",{\"1\":{\"347\":1}}],[\"接口里面定义很多\",{\"1\":{\"387\":1}}],[\"接口的\",{\"1\":{\"387\":1}}],[\"接口协议\",{\"1\":{\"370\":1}}],[\"接口实际上扩展自\",{\"1\":{\"352\":1}}],[\"接口\",{\"1\":{\"349\":3,\"351\":2,\"353\":2,\"369\":1,\"388\":1}}],[\"接口或者是\",{\"1\":{\"349\":1}}],[\"接口错误导致用户操作失败\",{\"1\":{\"238\":1}}],[\"接口qps与cpu\",{\"1\":{\"234\":1}}],[\"接下来\",{\"1\":{\"51\":1,\"62\":1,\"66\":1,\"93\":1,\"337\":1}}],[\"接收参数\",{\"1\":{\"44\":2}}],[\"轴平行\",{\"1\":{\"51\":1}}],[\"激光炸弹的投放是通过卫星定位的\",{\"1\":{\"51\":1}}],[\"每隔一定时间\",{\"1\":{\"402\":1}}],[\"每调用一次就会创建一个新的对象\",{\"1\":{\"344\":1}}],[\"每有一个新鲜橘子被腐烂\",{\"1\":{\"331\":1}}],[\"每分钟\",{\"1\":{\"330\":1}}],[\"每走过一个节点\",{\"1\":{\"307\":1}}],[\"每发现一个新岛屿\",{\"1\":{\"306\":1}}],[\"每一层的节点并不是直接存储了某个字符\",{\"1\":{\"288\":1}}],[\"每遍历一层时间+1\",{\"1\":{\"332\":1}}],[\"每遍历一层\",{\"1\":{\"277\":1}}],[\"每\",{\"1\":{\"172\":1}}],[\"每组询问给定三个整数\",{\"1\":{\"177\":1}}],[\"每组物品有若干个\",{\"1\":{\"87\":1}}],[\"每组数据包括三个整数\",{\"1\":{\"51\":1}}],[\"每件物品有有限个\",{\"1\":{\"86\":1}}],[\"每件物品只能使用无限次\",{\"1\":{\"85\":1}}],[\"每件物品只能使用一次\",{\"1\":{\"84\":1}}],[\"每辆车所搭载的重量\",{\"1\":{\"78\":1}}],[\"每辆缆车上的小猫的重量之和不能超过\",{\"1\":{\"78\":1}}],[\"每只猫的重量\",{\"1\":{\"78\":1}}],[\"每租用一辆缆车\",{\"1\":{\"78\":1}}],[\"每个\",{\"1\":{\"375\":1}}],[\"每个对象都包含了数据本身以及元数据\",{\"1\":{\"369\":1}}],[\"每个对字符串进行的单个字符的插入\",{\"1\":{\"93\":1}}],[\"每个烂橘子都会去扩散腐烂周边的新鲜橘子\",{\"1\":{\"331\":1}}],[\"每个单元格可以有以下三个值之一\",{\"1\":{\"330\":1}}],[\"每个搜索到的\",{\"1\":{\"307\":1}}],[\"每个人看到的都不相同\",{\"1\":{\"241\":1}}],[\"每个人只有两种状态\",{\"1\":{\"102\":1}}],[\"每个正整数都能够以唯一的方式表示成它的质因数的乘积\",{\"1\":{\"156\":1}}],[\"每个数都要用到且只出现一次\",{\"1\":{\"79\":1}}],[\"每个方案占一行\",{\"1\":{\"69\":1}}],[\"每个目标都有一个价值\",{\"1\":{\"51\":1}}],[\"每行一个整数\",{\"1\":{\"78\":1}}],[\"每行\",{\"1\":{\"76\":1,\"77\":1}}],[\"每行输出一个整数作为结果\",{\"1\":{\"93\":1}}],[\"每行输出一种方案\",{\"1\":{\"75\":1}}],[\"每行输入一组数据\",{\"1\":{\"51\":1}}],[\"每行包含一个字符串和一个整数\",{\"1\":{\"93\":1}}],[\"每行包含一个字符串\",{\"1\":{\"93\":1}}],[\"每行包含一个大写字母\",{\"1\":{\"62\":1}}],[\"每行包含\",{\"1\":{\"66\":1}}],[\"每行包含三个整数\",{\"1\":{\"62\":1}}],[\"每行为\",{\"1\":{\"61\":1}}],[\"每行有两个数\",{\"1\":{\"61\":1}}],[\"每次遇到一个岛屿中的陆地\",{\"1\":{\"306\":1}}],[\"每次可以移动一步\",{\"1\":{\"184\":1}}],[\"每次可以任选一堆\",{\"1\":{\"182\":1}}],[\"每次异或操作\",{\"1\":{\"182\":1}}],[\"每次都让较大的数对较小数取模\",{\"1\":{\"165\":1}}],[\"每次将\",{\"1\":{\"150\":1}}],[\"每次将区间长度缩小一半\",{\"1\":{\"108\":1}}],[\"每次迭代选择一条不在集合内的权值最短的边\",{\"1\":{\"149\":1}}],[\"每次迭代找到不在连通块中的距离最近的点\",{\"1\":{\"148\":1}}],[\"每次循环遍历所有边\",{\"1\":{\"142\":1}}],[\"每次循环都先将\",{\"1\":{\"105\":1}}],[\"每次备份一下\",{\"1\":{\"142\":1}}],[\"每次只需判断答案是否需要更新\",{\"1\":{\"111\":1}}],[\"每次比较\",{\"1\":{\"106\":1}}],[\"每次询问给出一个字符串和一个操作次数上限\",{\"1\":{\"93\":1}}],[\"每次递归的同时也对\",{\"1\":{\"79\":1}}],[\"每次当第三段符合时\",{\"1\":{\"50\":1}}],[\"每次前缀和都取模\",{\"1\":{\"49\":1}}],[\"每次用\",{\"1\":{\"49\":1}}],[\"地图上有\",{\"1\":{\"51\":1}}],[\"都有一个\",{\"1\":{\"387\":1}}],[\"都有一行输出\",{\"1\":{\"62\":1}}],[\"都是实现了一个接口\",{\"1\":{\"390\":1}}],[\"都是空的\",{\"1\":{\"387\":1}}],[\"都是由男孩子指向女孩子\",{\"1\":{\"151\":1}}],[\"都改掉\",{\"1\":{\"384\":1}}],[\"都会被写入到同一个日志文件中\",{\"1\":{\"362\":1}}],[\"都会被写入到这个日志文件中\",{\"1\":{\"362\":1}}],[\"都会被重新标记为\",{\"1\":{\"307\":1}}],[\"都会影响到彼此对方\",{\"1\":{\"347\":1}}],[\"都会输掉游戏\",{\"1\":{\"182\":1}}],[\"都要用\",{\"1\":{\"306\":1}}],[\"都为空指针返回\",{\"1\":{\"294\":1}}],[\"都具有非常强的头部效应\",{\"1\":{\"242\":1}}],[\"都采用删除缓存而非直接更新的方式\",{\"1\":{\"232\":1}}],[\"都采取最优策略行动时游戏的结果\",{\"1\":{\"182\":1}}],[\"都可以是\",{\"1\":{\"210\":1}}],[\"都加上第一段符合的个数即可\",{\"1\":{\"50\":1}}],[\"都符合条件\",{\"1\":{\"50\":1}}],[\"都一定是\",{\"1\":{\"36\":1,\"171\":1}}],[\"先来看第一步\",{\"1\":{\"382\":1}}],[\"先修课程对\",{\"1\":{\"336\":1}}],[\"先修课程按数组\",{\"1\":{\"336\":1}}],[\"先学习课程\",{\"1\":{\"336\":1}}],[\"先翻转左右子树\",{\"1\":{\"326\":1}}],[\"先处理这个节点的左子树\",{\"1\":{\"270\":1}}],[\"先成功\",{\"1\":{\"257\":1}}],[\"先看一张\",{\"1\":{\"257\":1}}],[\"先读取缓存\",{\"1\":{\"249\":1}}],[\"先读缓存\",{\"1\":{\"229\":1}}],[\"先理解业务背后的本质\",{\"1\":{\"246\":1}}],[\"先做内存合并再更新\",{\"1\":{\"234\":1}}],[\"先进先出\",{\"1\":{\"196\":1}}],[\"先进后出\",{\"1\":{\"193\":1}}],[\"先存值\",{\"1\":{\"191\":1}}],[\"先手走不到任何一个必败状态\",{\"1\":{\"182\":1}}],[\"先手\",{\"1\":{\"182\":1}}],[\"先手可以走到某一个必败状态\",{\"1\":{\"182\":1}}],[\"先手进行\",{\"1\":{\"182\":1}}],[\"先整除再乘\",{\"1\":{\"167\":1}}],[\"先累加\",{\"1\":{\"148\":1}}],[\"先把所有距离初始化为正无穷\",{\"1\":{\"148\":1}}],[\"先把第\",{\"1\":{\"127\":1}}],[\"先对数列排序\",{\"1\":{\"112\":1}}],[\"先递归再合并\",{\"1\":{\"106\":1}}],[\"先枚举长度\",{\"1\":{\"95\":1}}],[\"先后与右\",{\"1\":{\"67\":1}}],[\"先判断范围和条件\",{\"1\":{\"306\":1}}],[\"先判断第一段是否符合\",{\"1\":{\"50\":1}}],[\"先判断如果\",{\"1\":{\"50\":1}}],[\"先预处理前缀和\",{\"1\":{\"50\":1}}],[\"所具备的商业化价值也是需要持续探索的\",{\"1\":{\"242\":1}}],[\"所谓二叉树的直径\",{\"1\":{\"282\":1}}],[\"所谓架构上的补充\",{\"1\":{\"229\":1}}],[\"所谓采取最优策略是指\",{\"1\":{\"182\":1}}],[\"所含匹配边数最多的匹配\",{\"1\":{\"151\":1}}],[\"所得即为商在这一位的数字\",{\"1\":{\"118\":1}}],[\"所有节点均不为空\",{\"1\":{\"205\":1}}],[\"所有数的个数为各个集合的并集\",{\"1\":{\"180\":1}}],[\"所有的因子可以构成一个有向无环图\",{\"1\":{\"241\":1}}],[\"所有的顶点都是匹配点\",{\"1\":{\"151\":1}}],[\"所有的区间\",{\"1\":{\"95\":1}}],[\"所有边\",{\"1\":{\"142\":1,\"150\":1}}],[\"所有边权都是正数\",{\"1\":{\"139\":1}}],[\"所有将a\",{\"1\":{\"94\":1}}],[\"所有测试点满足\",{\"1\":{\"50\":1}}],[\"所在的目录\",{\"1\":{\"364\":1}}],[\"所在的集合合并\",{\"1\":{\"62\":1}}],[\"所在目录下启动\",{\"1\":{\"362\":1}}],[\"所在树的根节点下面\",{\"1\":{\"59\":1}}],[\"所在树的根节点接到\",{\"1\":{\"59\":1}}],[\"所以我们可以知道\",{\"1\":{\"387\":1}}],[\"所以基于对象的形式\",{\"1\":{\"369\":1}}],[\"所以不可能完成所有课程\",{\"1\":{\"337\":1}}],[\"所以最后要返回\",{\"1\":{\"331\":1}}],[\"所以每次扩散需要考虑每一层\",{\"1\":{\"331\":1}}],[\"所以可以优化为每次只搜\",{\"1\":{\"308\":1}}],[\"所以可以用str\",{\"1\":{\"200\":1}}],[\"所以只要把经过的位置都设置为\",{\"1\":{\"306\":1}}],[\"所以选择序列的中间值作为根节点\",{\"1\":{\"300\":1}}],[\"所以本题等同于根据中序遍历的序列建立二叉搜索树\",{\"1\":{\"300\":1}}],[\"所以直接每次新增评论的时候就把相应字段\",{\"1\":{\"257\":1}}],[\"所以平台扩展的能力\",{\"1\":{\"252\":1}}],[\"所以在回源的逻辑里\",{\"1\":{\"249\":1}}],[\"所以缓存会超前加载\",{\"1\":{\"249\":1}}],[\"所以idx从2开始\",{\"1\":{\"192\":1}}],[\"所以是乘\",{\"1\":{\"177\":1}}],[\"所以有\",{\"1\":{\"171\":1}}],[\"所以此时应该退出循环\",{\"1\":{\"161\":1}}],[\"所以先预处理好\",{\"1\":{\"160\":1}}],[\"所以这里只用存一个方向的边\",{\"1\":{\"151\":1}}],[\"所以存边的时候\",{\"1\":{\"151\":1}}],[\"所以存在环\",{\"1\":{\"144\":1}}],[\"所以需要将其翻转\",{\"1\":{\"118\":1}}],[\"所以从后遍历\",{\"1\":{\"116\":1}}],[\"所以一直更新根就行了\",{\"1\":{\"102\":1}}],[\"所以f\",{\"1\":{\"100\":1}}],[\"所以初始化为无穷大\",{\"1\":{\"100\":1}}],[\"所以他们想知道\",{\"1\":{\"78\":1}}],[\"所以要用一个\",{\"1\":{\"337\":1}}],[\"所以要减一\",{\"1\":{\"314\":1}}],[\"所以要\",{\"1\":{\"49\":1}}],[\"所以\",{\"1\":{\"31\":1,\"161\":1,\"171\":1,\"250\":1,\"337\":1}}],[\"请求预过滤\",{\"1\":{\"235\":1}}],[\"请你判断是否可能完成所有课程的学习\",{\"1\":{\"336\":1}}],[\"请你将其转换为一棵\",{\"1\":{\"299\":1}}],[\"请你实现\",{\"1\":{\"287\":1}}],[\"请你选择尽量少的区间\",{\"1\":{\"218\":1}}],[\"请你在数轴上选择尽量少的点\",{\"1\":{\"215\":1}}],[\"请你输出\",{\"1\":{\"177\":1}}],[\"请你求出数列中每个数的二进制表示中\",{\"1\":{\"127\":1}}],[\"请你求出\",{\"1\":{\"96\":1,\"180\":1}}],[\"请你求出给定的\",{\"1\":{\"93\":1}}],[\"请你求出得到正确排列至少需要进行多少次交换\",{\"1\":{\"67\":1}}],[\"请你按照字典序将所有的排列方法输出\",{\"1\":{\"69\":1}}],[\"请你计算网格中岛屿的数量\",{\"1\":{\"305\":1}}],[\"请你计算\",{\"1\":{\"68\":1}}],[\"请写一个程序\",{\"1\":{\"61\":1}}],[\"请问\",{\"1\":{\"50\":1,\"66\":1}}],[\"请打印\",{\"1\":{\"37\":2}}],[\"不建议把null添加到队列中\",{\"1\":{\"351\":1}}],[\"不仅有队列\",{\"1\":{\"350\":1}}],[\"不推荐\",{\"1\":{\"344\":1}}],[\"不可变字符串\",{\"1\":{\"343\":1}}],[\"不为\",{\"1\":{\"257\":1}}],[\"不为空\",{\"1\":{\"143\":1}}],[\"不要做需求的翻译机\",{\"1\":{\"246\":1}}],[\"不管其是存放的数据块还是奇偶校验块\",{\"1\":{\"370\":1}}],[\"不管是氛围还是商业\",{\"1\":{\"242\":1}}],[\"不管热评的算法如何变化\",{\"1\":{\"241\":1}}],[\"不容易出错\",{\"1\":{\"238\":1}}],[\"不值得用户重试\",{\"1\":{\"238\":1}}],[\"不对用户暴露用户无法处理和不值得处理的错误\",{\"1\":{\"238\":1}}],[\"不会影响用户体验\",{\"1\":{\"229\":1}}],[\"不支持\",{\"1\":{\"210\":1}}],[\"不满足条件\",{\"1\":{\"183\":1}}],[\"不能被其他普通运营人员\",{\"1\":{\"237\":1}}],[\"不能行动的玩家判负\",{\"1\":{\"183\":1}}],[\"不能开到\",{\"1\":{\"51\":1}}],[\"不存在\",{\"1\":{\"172\":1}}],[\"不一定是\",{\"1\":{\"150\":1}}],[\"不包括自己\",{\"1\":{\"144\":1}}],[\"不包含前导零\",{\"1\":{\"97\":1}}],[\"不包含\",{\"1\":{\"79\":1}}],[\"不是\",{\"1\":{\"161\":1,\"168\":1,\"176\":1,\"312\":1}}],[\"不是起点\",{\"1\":{\"148\":1}}],[\"不是一定\",{\"1\":{\"142\":1}}],[\"不是c语言的内置数据类型\",{\"1\":{\"31\":1}}],[\"不需要创建\",{\"1\":{\"377\":1}}],[\"不需要再搜了\",{\"1\":{\"308\":1}}],[\"不需要再跟别的前缀和组合\",{\"1\":{\"49\":1}}],[\"不需要初始化dist数组\",{\"1\":{\"144\":1}}],[\"不需要借位\",{\"1\":{\"116\":1}}],[\"不用全部遍历\",{\"1\":{\"115\":1,\"116\":1}}],[\"不含前导0\",{\"1\":{\"115\":1,\"116\":1,\"117\":1,\"118\":1}}],[\"不重不漏地经过每个点恰好一次\",{\"1\":{\"100\":1}}],[\"不重复不遗漏地组成带分数表示的全部种数\",{\"1\":{\"79\":1}}],[\"不过都被注释了\",{\"1\":{\"386\":1}}],[\"不过\",{\"1\":{\"92\":1}}],[\"不连续\",{\"0\":{\"91\":1}}],[\"不同规则的决策叠加作用\",{\"1\":{\"241\":1}}],[\"不同\",{\"1\":{\"226\":1,\"370\":1}}],[\"不同颜色\",{\"1\":{\"150\":1}}],[\"不同为\",{\"1\":{\"126\":1}}],[\"不同为1\",{\"1\":{\"125\":1}}],[\"不同位置的数字一样的数对算不同的数对\",{\"1\":{\"112\":1}}],[\"不同方案\",{\"1\":{\"75\":1}}],[\"不同目标可能在同一位置\",{\"1\":{\"51\":1}}],[\"不妨称为\",{\"1\":{\"62\":1}}],[\"不断二分递归建立左子树和右子树\",{\"1\":{\"300\":1}}],[\"不断向上寻找最初的根节点\",{\"1\":{\"61\":1}}],[\"不断往上查找祖先\",{\"1\":{\"58\":1}}],[\"不然大概率会超时\",{\"1\":{\"58\":1}}],[\"然后放到注册表里面\",{\"1\":{\"402\":1}}],[\"然后想要获取上下文的就调用\",{\"1\":{\"401\":1}}],[\"然后停止执行过期应用\",{\"1\":{\"397\":1}}],[\"然后还创建了一个实例信息的副本\",{\"1\":{\"395\":1}}],[\"然后交给\",{\"1\":{\"388\":1}}],[\"然后交换左右子节点\",{\"1\":{\"326\":1}}],[\"然后这些配置项统一都交给\",{\"1\":{\"386\":1}}],[\"然后获取环境的配置文件的配置项并覆盖之前的默认配置项\",{\"1\":{\"386\":1}}],[\"然后获取默认配置文件的配置项\",{\"1\":{\"386\":1}}],[\"然后查看字符串池中是否存在\",{\"1\":{\"344\":1}}],[\"然后递归更新\",{\"1\":{\"289\":1}}],[\"然后更新\",{\"1\":{\"288\":1}}],[\"然后在遍历左子树的时候\",{\"1\":{\"269\":1}}],[\"然后在排序分计算阶段根据召回结果实现这样的效果\",{\"1\":{\"241\":1}}],[\"然后访问根节点\",{\"1\":{\"269\":2}}],[\"然后其他的线程直接从这个缓存里拿数据即可\",{\"1\":{\"261\":1}}],[\"然后它们都会去\",{\"1\":{\"261\":1}}],[\"然后批量返回\",{\"1\":{\"261\":1}}],[\"然后就可以通过评论\",{\"1\":{\"259\":1}}],[\"然后再拼接当前环境的配置文件\",{\"1\":{\"386\":1}}],[\"然后再调用\",{\"1\":{\"386\":1}}],[\"然后再判断图中是否存在环\",{\"1\":{\"337\":1}}],[\"然后再通过\",{\"1\":{\"257\":1}}],[\"然后再加载个性化信息\",{\"1\":{\"234\":1}}],[\"然后再加上现在的前缀和\",{\"1\":{\"49\":1}}],[\"然后导入到\",{\"1\":{\"251\":1}}],[\"然后消息堆积\",{\"1\":{\"250\":1}}],[\"然后发送一条消息给\",{\"1\":{\"249\":1}}],[\"然后通过迭代细分场景下的召回策略\",{\"1\":{\"241\":1}}],[\"然后\",{\"1\":{\"177\":1,\"234\":1,\"386\":1}}],[\"然后重复\",{\"1\":{\"165\":1}}],[\"然后删去它们的所有的倍数\",{\"1\":{\"159\":1}}],[\"然后将\",{\"1\":{\"126\":3}}],[\"然后判断\",{\"1\":{\"105\":1}}],[\"然后每次都\",{\"1\":{\"79\":1}}],[\"然后我们再求其前缀和\",{\"1\":{\"51\":1}}],[\"然后从\",{\"1\":{\"50\":1,\"160\":1}}],[\"然后从标准输入中输入响应\",{\"1\":{\"37\":1}}],[\"前两行是设置环境名称\",{\"1\":{\"386\":1}}],[\"前台启动\",{\"1\":{\"362\":1}}],[\"前者是\",{\"1\":{\"344\":1}}],[\"前需要做一个异构的\",{\"1\":{\"251\":1}}],[\"前置依赖较多的可以流水线调用\",{\"1\":{\"226\":1}}],[\"前置知识\",{\"1\":{\"173\":1}}],[\"前提\",{\"1\":{\"116\":1}}],[\"前缀不存在退出查找\",{\"1\":{\"288\":1}}],[\"前缀树\",{\"0\":{\"286\":1},\"1\":{\"286\":1,\"287\":1}}],[\"前缀部分\",{\"1\":{\"97\":1}}],[\"前缀和与差分\",{\"0\":{\"119\":1}}],[\"前缀和的值\",{\"1\":{\"49\":1}}],[\"前缀和\",{\"1\":{\"49\":2},\"2\":{\"53\":1}}],[\"前缀和相关题型\",{\"0\":{\"48\":1},\"1\":{\"3\":1}}],[\"前\",{\"1\":{\"96\":2}}],[\"前面\",{\"1\":{\"77\":1}}],[\"前面有几个\",{\"1\":{\"49\":1}}],[\"前六个测试点满足\",{\"1\":{\"50\":1}}],[\"相对而言评论文本更长\",{\"1\":{\"222\":1}}],[\"相关概念\",{\"1\":{\"151\":1}}],[\"相当于文件\",{\"1\":{\"375\":1}}],[\"相当于存放文件的顶层文件夹\",{\"1\":{\"375\":1}}],[\"相当于存在两个相邻的点染成了相同的颜色\",{\"1\":{\"150\":1}}],[\"相当于给了key在map中的一个初试值\",{\"1\":{\"349\":1}}],[\"相当于返回原数组的一个片段\",{\"1\":{\"347\":1}}],[\"相当于是每次考虑合并两个式子\",{\"1\":{\"172\":1}}],[\"相当于该数除以\",{\"1\":{\"126\":1}}],[\"相当于该数乘以\",{\"1\":{\"126\":1}}],[\"相当于结构体\",{\"1\":{\"45\":1}}],[\"相异或值不变\",{\"1\":{\"126\":1}}],[\"相同返回true\",{\"1\":{\"344\":1}}],[\"相同\",{\"1\":{\"211\":1}}],[\"相同数量级的数即可\",{\"1\":{\"142\":1}}],[\"相同为\",{\"1\":{\"126\":1}}],[\"相同的个数\",{\"1\":{\"49\":1}}],[\"相邻两个数用一个空格隔开\",{\"1\":{\"77\":1}}],[\"相邻两个数用恰好\",{\"1\":{\"75\":1}}],[\"相等\",{\"1\":{\"49\":1}}],[\"来一份\",{\"1\":{\"409\":1}}],[\"来获取\",{\"1\":{\"401\":1}}],[\"来获取配置项的值\",{\"1\":{\"394\":1}}],[\"来管理集群节点的生命周期\",{\"1\":{\"399\":1}}],[\"来管理\",{\"1\":{\"386\":1,\"388\":1}}],[\"来加载配置文件\",{\"1\":{\"386\":1}}],[\"来看下怎么实现的\",{\"1\":{\"387\":1}}],[\"来看下\",{\"1\":{\"386\":1}}],[\"来进行分片\",{\"1\":{\"262\":1}}],[\"来做加速完全足够\",{\"1\":{\"259\":1}}],[\"来做多条件组合检索\",{\"1\":{\"251\":1}}],[\"来完成的\",{\"1\":{\"251\":1}}],[\"来介绍该系统的功能\",{\"1\":{\"245\":1}}],[\"来实现差异化评论排序的平衡\",{\"1\":{\"241\":1}}],[\"来承担这部分策略探索型业务\",{\"1\":{\"241\":1}}],[\"来支撑热评列表的读写\",{\"1\":{\"241\":1}}],[\"来执行分页查询\",{\"1\":{\"241\":1}}],[\"来验证相应的热点配置与代码实现是符合预期的\",{\"1\":{\"234\":1}}],[\"来解决\",{\"1\":{\"127\":1}}],[\"来判断是否需要开始调度执行发送心跳\",{\"1\":{\"395\":1}}],[\"来判断是否需要开始调度执行刷新注册表信息\",{\"1\":{\"395\":1}}],[\"来判断\",{\"1\":{\"126\":1}}],[\"来决定\",{\"1\":{\"126\":1}}],[\"来存储每个元素的父节点\",{\"1\":{\"57\":1}}],[\"来递加\",{\"1\":{\"49\":1}}],[\"来求出\",{\"1\":{\"49\":1}}],[\"用到了单例模式\",{\"1\":{\"401\":1}}],[\"用到了设计模式中的\",{\"1\":{\"391\":1}}],[\"用构造器模式初始化服务实例\",{\"1\":{\"392\":1}}],[\"用作云原生应用程序的主要存储\",{\"1\":{\"370\":1}}],[\"用作堆栈而不是\",{\"1\":{\"350\":1}}],[\"用newvalue替换所有等于oldvalue的元素\",{\"1\":{\"356\":1}}],[\"用法同\",{\"1\":{\"350\":1}}],[\"用法与\",{\"1\":{\"211\":1}}],[\"用指定的字符串连接字符串数组\",{\"1\":{\"344\":1}}],[\"用数组\",{\"1\":{\"337\":2}}],[\"用于删除指定存储桶中的对象\",{\"1\":{\"378\":1}}],[\"用于删除一个已存在的存储桶\",{\"1\":{\"377\":1}}],[\"用于列出指定存储桶中的所有对象\",{\"1\":{\"378\":1}}],[\"用于列出用户有权访问的所有存储桶\",{\"1\":{\"377\":1}}],[\"用于从指定的存储桶中下载文件\",{\"1\":{\"378\":1}}],[\"用于生成一个对象\",{\"1\":{\"378\":1}}],[\"用于检查指定的对象\",{\"1\":{\"378\":1}}],[\"用于检查指定的存储桶是否存在\",{\"1\":{\"377\":1}}],[\"用于上传文件到指定的存储桶\",{\"1\":{\"378\":1}}],[\"用于创建一个新的存储桶\",{\"1\":{\"377\":1}}],[\"用于将命令放到后台执行\",{\"1\":{\"362\":1}}],[\"用于运行另一个命令在后台\",{\"1\":{\"362\":1}}],[\"用于高效地存储和检索字符串数据集中的键\",{\"1\":{\"287\":1}}],[\"用于求解方程\",{\"1\":{\"171\":1}}],[\"用户名和密码都可以省略\",{\"1\":{\"362\":1}}],[\"用户访问了第一页\",{\"1\":{\"249\":1}}],[\"用户可以在这里看到自己喜欢的评论内容\",{\"1\":{\"242\":1}}],[\"用户等级加权等等\",{\"1\":{\"240\":1}}],[\"用户不满意的评论被顶到热评前排等问题均可能引发舆情问题\",{\"1\":{\"238\":1}}],[\"用户删除\",{\"1\":{\"223\":1,\"246\":1}}],[\"用单例工厂\",{\"1\":{\"386\":1}}],[\"用单线程解决分布式无状态服务的共性问题\",{\"1\":{\"229\":1}}],[\"用单调队列来优化\",{\"1\":{\"198\":1}}],[\"用一个小根堆来维护所有组的右端点\",{\"1\":{\"217\":1}}],[\"用一个一维数组存储树\",{\"1\":{\"205\":1}}],[\"用高精度乘法将所有质因子相乘\",{\"1\":{\"178\":2}}],[\"用高精度乘法把所有质因子乘上\",{\"1\":{\"178\":1}}],[\"用高精度相乘即可\",{\"1\":{\"178\":1}}],[\"用当前行将下面所有的列消成0\",{\"1\":{\"173\":1}}],[\"用初等行变换\",{\"1\":{\"173\":3}}],[\"用扩展欧几里得算法找出一组解\",{\"1\":{\"172\":1}}],[\"用上面的公式定义求\",{\"1\":{\"167\":1}}],[\"用两个指针\",{\"1\":{\"313\":1}}],[\"用两个指针维护一段区间\",{\"1\":{\"128\":1}}],[\"用两数之积除以他们的最大公约数可得最小公倍数\",{\"1\":{\"165\":1}}],[\"用最小质因子去筛合数\",{\"1\":{\"161\":1}}],[\"用质数把其所有的倍数都筛掉\",{\"1\":{\"159\":1}}],[\"用队列来存储\",{\"1\":{\"143\":1}}],[\"用t更新其他点的距离\",{\"1\":{\"140\":1}}],[\"用途\",{\"0\":{\"126\":1}}],[\"用的数字个数+1\",{\"1\":{\"79\":1}}],[\"用了几个数\",{\"1\":{\"79\":2}}],[\"用过则不合法\",{\"1\":{\"79\":1}}],[\"用来持有上下文\",{\"1\":{\"401\":1}}],[\"用来将自己本地的\",{\"1\":{\"395\":1}}],[\"用来跟其他\",{\"1\":{\"394\":1}}],[\"用来处理\",{\"1\":{\"370\":1}}],[\"用来查找小于等于\",{\"1\":{\"110\":1}}],[\"用来查找大于等于\",{\"1\":{\"110\":1}}],[\"用来表示哪一行的小方块是横着放的\",{\"1\":{\"99\":1}}],[\"用来表示一个迷宫\",{\"1\":{\"66\":1}}],[\"用来判断\",{\"1\":{\"41\":1}}],[\"用这种写法不过是略微优化了一下\",{\"1\":{\"62\":1}}],[\"用整数\",{\"1\":{\"51\":1}}],[\"用\",{\"1\":{\"49\":1,\"79\":1,\"117\":1,\"118\":1,\"127\":1,\"148\":1,\"150\":1,\"169\":1,\"176\":1,\"210\":1}}],[\"就更新\",{\"1\":{\"402\":1}}],[\"就通过\",{\"1\":{\"401\":2}}],[\"就调用副本的\",{\"1\":{\"395\":1}}],[\"就调用对应的\",{\"1\":{\"388\":1}}],[\"就会从缓存里面这个默认值\",{\"1\":{\"386\":1}}],[\"就要付出较高的公网带宽传输成本\",{\"1\":{\"369\":1}}],[\"就要加入队列并标记为\",{\"1\":{\"307\":1}}],[\"就需要自己自定义排序方式\",{\"1\":{\"349\":1}}],[\"就不用遍历了\",{\"1\":{\"338\":1}}],[\"就不是公平组合游戏\",{\"1\":{\"183\":1}}],[\"就不是用最小质因子去更新了\",{\"1\":{\"161\":1}}],[\"就意味着有橘子永远不会腐烂\",{\"1\":{\"331\":1}}],[\"就把\",{\"1\":{\"331\":1}}],[\"就把k改为l\",{\"1\":{\"192\":1}}],[\"就可以起到不走回头路的作用\",{\"1\":{\"306\":1}}],[\"就可以把埃氏筛法运用在\",{\"1\":{\"160\":1}}],[\"就用\",{\"1\":{\"306\":1}}],[\"就代表热度高\",{\"1\":{\"240\":3}}],[\"就删去了所有的合数\",{\"1\":{\"159\":1}}],[\"就将这条边加入集合中\",{\"1\":{\"149\":1}}],[\"就得到了最短路径\",{\"1\":{\"143\":1}}],[\"就说明存在一条长度是n+1的最短路径\",{\"1\":{\"142\":1}}],[\"就交换位置\",{\"1\":{\"205\":1}}],[\"就交换\",{\"1\":{\"105\":1}}],[\"就返回祖先\",{\"1\":{\"58\":1}}],[\"就是获取配置管理类的一个单例\",{\"1\":{\"382\":1}}],[\"就是根节点的左右子树的最大深度之和\",{\"1\":{\"282\":1}}],[\"就是根据各种要素排序的得分\",{\"1\":{\"259\":1}}],[\"就是根评论\",{\"1\":{\"257\":1}}],[\"就是回复的评论\",{\"1\":{\"257\":1}}],[\"就是评论\",{\"1\":{\"257\":1,\"259\":1}}],[\"就是读请求未命中缓存穿透到db\",{\"1\":{\"229\":1}}],[\"就是判断\",{\"1\":{\"169\":1}}],[\"就是一个质因数\",{\"1\":{\"159\":1}}],[\"就是\",{\"1\":{\"150\":1,\"161\":1}}],[\"就是给定一个无向图\",{\"1\":{\"147\":1}}],[\"就是奇数\",{\"1\":{\"126\":1}}],[\"就是偶数\",{\"1\":{\"126\":1}}],[\"就是其爆炸范围\",{\"1\":{\"51\":1}}],[\"就是区间\",{\"1\":{\"49\":1}}],[\"就默认添加此选项\",{\"1\":{\"43\":1}}],[\"代替\",{\"1\":{\"126\":1,\"238\":1}}],[\"代表腐烂的橘子\",{\"1\":{\"330\":1}}],[\"代表新鲜橘子\",{\"1\":{\"330\":1}}],[\"代表空单元格\",{\"1\":{\"330\":1}}],[\"代表一张海域照片\",{\"1\":{\"68\":1}}],[\"代表一颗炸弹最多能炸掉地图上目标的总价值数目\",{\"1\":{\"51\":1}}],[\"代表\",{\"1\":{\"49\":1}}],[\"代码段\",{\"1\":{\"116\":1}}],[\"代码如下\",{\"1\":{\"115\":1,\"117\":1,\"118\":1,\"127\":2}}],[\"代码\",{\"0\":{\"283\":1,\"289\":1,\"295\":1,\"301\":1,\"314\":1,\"326\":1,\"332\":1,\"338\":1},\"1\":{\"25\":1,\"49\":1,\"50\":1,\"51\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"92\":1,\"94\":1,\"95\":1,\"270\":1,\"271\":1,\"276\":1,\"277\":1,\"306\":1,\"308\":1,\"319\":1,\"394\":1}}],[\"输入的参数是pair或者迭代器\",{\"1\":{\"210\":1}}],[\"输入一个迭代器\",{\"1\":{\"210\":1}}],[\"输入一个整数\",{\"1\":{\"75\":1}}],[\"输入是一个数x\",{\"1\":{\"210\":1}}],[\"输入\",{\"1\":{\"178\":1}}],[\"输入占一行\",{\"1\":{\"67\":1}}],[\"输入样例3\",{\"1\":{\"50\":1}}],[\"输入样例2\",{\"1\":{\"50\":1,\"68\":1,\"79\":1}}],[\"输入样例1\",{\"1\":{\"50\":1,\"68\":1,\"79\":1}}],[\"输入样例\",{\"1\":{\"49\":1,\"51\":1,\"61\":1,\"62\":1,\"66\":1,\"67\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"92\":1}}],[\"输入格式\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"61\":1,\"62\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"92\":1,\"93\":1,\"127\":1,\"172\":1}}],[\"输出选择的点的最小数量\",{\"1\":{\"215\":1}}],[\"输出以0开始的匹配子串的首字母下标\",{\"1\":{\"199\":1}}],[\"输出最小非负整数\",{\"1\":{\"172\":1}}],[\"输出i的s次幂\",{\"1\":{\"156\":1}}],[\"输出即可\",{\"1\":{\"156\":1}}],[\"输出如下\",{\"1\":{\"127\":1}}],[\"输出共\",{\"1\":{\"93\":1}}],[\"输出输入数字用数码\",{\"1\":{\"79\":1}}],[\"输出方案\",{\"1\":{\"76\":1}}],[\"输出所有可能的次序\",{\"1\":{\"76\":1}}],[\"输出所有可能的选择方案\",{\"1\":{\"75\":1,\"77\":1}}],[\"输出空行\",{\"1\":{\"75\":1}}],[\"输出占一行\",{\"1\":{\"67\":1}}],[\"输出一行\",{\"1\":{\"61\":1}}],[\"输出一个正整数\",{\"1\":{\"51\":1}}],[\"输出一个整数\",{\"1\":{\"49\":1,\"50\":1,\"66\":1,\"78\":1,\"92\":1}}],[\"输出样例3\",{\"1\":{\"50\":1}}],[\"输出样例2\",{\"1\":{\"50\":1,\"68\":1,\"79\":1}}],[\"输出样例1\",{\"1\":{\"50\":1,\"68\":1,\"79\":1}}],[\"输出样例\",{\"1\":{\"49\":1,\"51\":1,\"61\":1,\"62\":1,\"66\":1,\"67\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"92\":1}}],[\"输出格式\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"61\":1,\"62\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"92\":1,\"93\":1,\"127\":1,\"172\":1}}],[\"输出\",{\"1\":{\"31\":2,\"50\":1,\"62\":1}}],[\"输出不会被截断\",{\"1\":{\"31\":1}}],[\"输出时\",{\"1\":{\"31\":1}}],[\"你的终端或\",{\"1\":{\"362\":1}}],[\"你的程序将得到一个判断错误的答案\",{\"1\":{\"37\":1}}],[\"你需要先完成课程\",{\"1\":{\"336\":1}}],[\"你需要完成合并和查询操作\",{\"1\":{\"62\":1}}],[\"你这个学期必须选修\",{\"1\":{\"336\":1}}],[\"你只可以看到在滑动窗口内的\",{\"1\":{\"318\":1}}],[\"你可以继续执行其他命令\",{\"1\":{\"362\":1}}],[\"你可以假设该网格的四条边均被水包围\",{\"1\":{\"305\":1}}],[\"你可能会用到的一些插件\",{\"1\":{\"265\":1}}],[\"你有没有备胎\",{\"1\":{\"151\":1}}],[\"你有一张某海域\",{\"1\":{\"68\":1}}],[\"你就去问问她男朋友\",{\"1\":{\"151\":1}}],[\"你能求出数列中总共有多少个\",{\"1\":{\"49\":1}}],[\"jetty\",{\"1\":{\"408\":1}}],[\"jpg\",{\"1\":{\"378\":9}}],[\"jbods\",{\"1\":{\"370\":1}}],[\"json串\",{\"1\":{\"377\":1}}],[\"json\",{\"1\":{\"357\":1}}],[\"jvm\",{\"1\":{\"343\":1}}],[\"join\",{\"1\":{\"251\":1,\"344\":2}}],[\"joiner\",{\"1\":{\"251\":1}}],[\"job\",{\"0\":{\"229\":1},\"1\":{\"229\":2,\"241\":2,\"247\":2,\"249\":1,\"261\":1}}],[\"juejin\",{\"1\":{\"242\":1}}],[\"j表示第几个区间\",{\"1\":{\"218\":1}}],[\"j表示走到哪一个点\",{\"1\":{\"100\":1}}],[\"j走到哪了呀\",{\"1\":{\"199\":1}}],[\"j+1\",{\"1\":{\"199\":1}}],[\"j++\",{\"1\":{\"51\":2,\"66\":1,\"84\":1,\"85\":2,\"86\":1,\"87\":2,\"89\":3,\"90\":1,\"91\":1,\"92\":1,\"93\":2,\"94\":2,\"97\":3,\"100\":2,\"106\":3,\"128\":1,\"146\":2,\"148\":2,\"161\":1,\"175\":1,\"180\":1,\"199\":2,\"218\":1,\"306\":1,\"307\":1,\"308\":2,\"314\":1,\"332\":2}}],[\"j−i\",{\"1\":{\"96\":1}}],[\"j\",{\"1\":{\"49\":1,\"51\":16,\"59\":3,\"61\":2,\"62\":4,\"66\":3,\"84\":14,\"85\":13,\"86\":25,\"87\":22,\"89\":19,\"90\":6,\"91\":16,\"92\":9,\"93\":16,\"94\":27,\"95\":16,\"96\":28,\"97\":12,\"99\":18,\"100\":14,\"105\":14,\"106\":8,\"121\":1,\"128\":4,\"135\":3,\"136\":4,\"137\":3,\"140\":12,\"141\":5,\"142\":6,\"143\":6,\"144\":8,\"146\":10,\"148\":10,\"150\":4,\"151\":6,\"159\":4,\"160\":9,\"161\":15,\"168\":20,\"173\":10,\"175\":7,\"177\":4,\"178\":8,\"180\":5,\"199\":20,\"218\":5,\"306\":13,\"307\":7,\"308\":16,\"313\":4,\"314\":14,\"332\":16}}],[\"javafx\",{\"0\":{\"357\":1}}],[\"java中的\",{\"1\":{\"37\":1}}],[\"java\",{\"0\":{\"355\":1,\"356\":1,\"423\":1},\"1\":{\"6\":1,\"341\":1,\"344\":1,\"350\":2,\"357\":1,\"370\":2,\"382\":3,\"383\":1},\"2\":{\"359\":1}}],[\"k8s\",{\"1\":{\"370\":1}}],[\"kv\",{\"1\":{\"257\":1,\"258\":1}}],[\"kafka\",{\"1\":{\"249\":1,\"250\":3,\"259\":2,\"261\":4}}],[\"kong\",{\"1\":{\"247\":1}}],[\"keys\",{\"1\":{\"349\":1}}],[\"keyset\",{\"1\":{\"349\":2}}],[\"key\",{\"1\":{\"210\":1,\"232\":2,\"241\":1,\"249\":1,\"251\":2,\"259\":2,\"261\":2,\"262\":5,\"349\":7}}],[\"kmp\",{\"0\":{\"199\":1}}],[\"k指向的下一节点指向新节点\",{\"1\":{\"191\":1}}],[\"k2\",{\"1\":{\"172\":2}}],[\"k1\",{\"1\":{\"172\":7}}],[\"k表示走到j这个点之前\",{\"1\":{\"100\":1}}],[\"k++\",{\"1\":{\"86\":2,\"87\":2,\"95\":2,\"97\":3,\"100\":1,\"106\":4,\"146\":1,\"208\":1,\"307\":1,\"332\":1}}],[\"k辆车\",{\"1\":{\"78\":1}}],[\"kruskal\",{\"0\":{\"149\":1},\"1\":{\"55\":1,\"149\":1}}],[\"k==0\",{\"1\":{\"49\":1}}],[\"k⩽1000001⩽ai​⩽100000\",{\"1\":{\"49\":1}}],[\"k\",{\"1\":{\"49\":16,\"67\":5,\"78\":8,\"86\":22,\"87\":10,\"95\":8,\"97\":12,\"99\":2,\"100\":7,\"106\":1,\"110\":1,\"126\":2,\"127\":9,\"133\":1,\"146\":4,\"161\":1,\"169\":9,\"176\":4,\"177\":4,\"191\":6,\"192\":11,\"205\":8,\"207\":5,\"208\":6,\"209\":2,\"210\":3,\"307\":4,\"318\":2,\"319\":4,\"332\":4,\"349\":5}}],[\"之前\",{\"1\":{\"337\":2}}],[\"之后使用小顶堆计算\",{\"1\":{\"262\":1}}],[\"之后统计所有未过期的\",{\"1\":{\"262\":1}}],[\"之后根据\",{\"1\":{\"257\":1}}],[\"之后事务更新其他表\",{\"1\":{\"257\":1}}],[\"之后再在\",{\"1\":{\"249\":1}}],[\"之后的尾迭代器\",{\"1\":{\"211\":1}}],[\"之后用\",{\"1\":{\"161\":1}}],[\"之间的数据是相互隔离的\",{\"1\":{\"375\":1}}],[\"之间的所有数字中\",{\"1\":{\"97\":1}}],[\"之间的顺序任意\",{\"1\":{\"75\":1}}],[\"之间的转化\",{\"0\":{\"39\":1}}],[\"之和是\",{\"1\":{\"49\":1}}],[\"给这个列表记录一个长度\",{\"1\":{\"238\":1}}],[\"给以\",{\"1\":{\"123\":1}}],[\"给区间\",{\"1\":{\"122\":1}}],[\"给出\",{\"1\":{\"336\":1}}],[\"给出一串数以及一个数字\",{\"1\":{\"112\":1}}],[\"给出了一些亲戚关系\",{\"1\":{\"61\":1}}],[\"给父亲更新\",{\"1\":{\"102\":1}}],[\"给定n堆物品\",{\"1\":{\"182\":1}}],[\"给定n个0和n个1\",{\"1\":{\"179\":1}}],[\"给定整数\",{\"1\":{\"160\":1}}],[\"给定一张\",{\"1\":{\"100\":1}}],[\"给定一个二叉树\",{\"1\":{\"275\":1}}],[\"给定一个二叉树的根节点\",{\"1\":{\"269\":1}}],[\"给定一个序列\",{\"1\":{\"195\":1}}],[\"给定一个有向无环图\",{\"1\":{\"184\":1}}],[\"给定一个包含\",{\"1\":{\"173\":1}}],[\"给定一个如下图所示的数字三角形\",{\"1\":{\"89\":1}}],[\"给定一个整数\",{\"1\":{\"69\":1,\"180\":1}}],[\"给定一个\",{\"1\":{\"66\":1}}],[\"给定一个长度为\",{\"1\":{\"49\":1,\"50\":1,\"127\":1}}],[\"给定两个非负整数\",{\"1\":{\"117\":1,\"118\":1}}],[\"给定两个正整数\",{\"1\":{\"115\":1,\"116\":1,\"175\":1}}],[\"给定两个整数\",{\"1\":{\"97\":1}}],[\"给定两个字符串\",{\"1\":{\"94\":1,\"312\":1}}],[\"给定两个长度分别为\",{\"1\":{\"91\":1}}],[\"给定\",{\"1\":{\"93\":1,\"172\":1,\"177\":1,\"215\":1,\"217\":1,\"218\":1}}],[\"给你一个由\",{\"1\":{\"305\":1}}],[\"给你一个整数数组\",{\"1\":{\"299\":1,\"318\":1}}],[\"给你一个二叉树的根节点\",{\"1\":{\"293\":1}}],[\"给你一个初始网格\",{\"1\":{\"67\":1}}],[\"给你一棵二叉树的根节点\",{\"1\":{\"281\":1,\"324\":1}}],[\"给你两棵二叉树\",{\"1\":{\"24\":1}}],[\"题目意思是说\",{\"1\":{\"79\":1}}],[\"题目描述\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"62\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"112\":1}}],[\"题是比较简单的一道模板题\",{\"1\":{\"62\":1}}],[\"题意\",{\"0\":{\"24\":1,\"269\":1,\"275\":1,\"281\":1,\"287\":1,\"293\":1,\"299\":1,\"305\":1,\"312\":1,\"318\":1,\"324\":1,\"330\":1,\"336\":1}}],[\"同步的过程会消耗时间\",{\"1\":{\"350\":1}}],[\"同步失败则直接导致最终不一致\",{\"1\":{\"238\":1}}],[\"同上\",{\"1\":{\"344\":3}}],[\"同样的\",{\"1\":{\"395\":1}}],[\"同样首先遍历左子节点的左子树\",{\"1\":{\"269\":1}}],[\"同样减少了对\",{\"1\":{\"261\":1}}],[\"同进程只交给一个人去获取\",{\"1\":{\"261\":1}}],[\"同加法一样处理进位\",{\"1\":{\"117\":1}}],[\"同理再处理该节点和该节点的右子节点\",{\"1\":{\"271\":1}}],[\"同理队尾\",{\"1\":{\"197\":1}}],[\"同理\",{\"1\":{\"115\":1,\"116\":1}}],[\"同一层级的可以并发调用\",{\"1\":{\"226\":1}}],[\"同一组内的物品最多只能选一个\",{\"1\":{\"87\":1}}],[\"同一行内的数升序排列\",{\"1\":{\"77\":1}}],[\"同一行内的数必须升序排列\",{\"1\":{\"75\":1}}],[\"同一行相邻两个数用一个空格隔开\",{\"1\":{\"76\":1}}],[\"同\",{\"1\":{\"45\":1}}],[\"同时节点的标志位还必须为\",{\"1\":{\"288\":1}}],[\"同时这个租约\",{\"1\":{\"261\":1}}],[\"同时需要在\",{\"1\":{\"247\":1}}],[\"同时支持配置并行度\",{\"1\":{\"234\":1}}],[\"同时做好安全校验和流量控制\",{\"1\":{\"226\":1}}],[\"同时\",{\"1\":{\"182\":1,\"229\":2,\"251\":1,\"257\":1}}],[\"同时不捕获其他变量\",{\"1\":{\"43\":1}}],[\"同时还能够为该应用程序提供相关的服务的软件\",{\"1\":{\"14\":1}}],[\"创建上下文的持有者\",{\"0\":{\"401\":1}}],[\"创建这个对象时\",{\"1\":{\"390\":1}}],[\"创建了一个支持\",{\"1\":{\"395\":1}}],[\"创建了一个支持缓存刷新的线程池\",{\"1\":{\"395\":1}}],[\"创建了一个支持心跳检测的线程池\",{\"1\":{\"395\":1}}],[\"创建了一个支持任务调度的线程池\",{\"1\":{\"395\":1}}],[\"创建了一个\",{\"1\":{\"390\":1,\"395\":1,\"397\":1,\"399\":1,\"400\":1,\"401\":1}}],[\"创建一个\",{\"1\":{\"388\":1}}],[\"创建默认的\",{\"0\":{\"385\":1}}],[\"创建存储桶的时候\",{\"1\":{\"377\":1}}],[\"创建对象\",{\"1\":{\"345\":1}}],[\"创建方式二\",{\"1\":{\"45\":1}}],[\"创建方式一\",{\"1\":{\"45\":1}}],[\"创建\",{\"1\":{\"45\":1,\"395\":1}}],[\"最简单的\",{\"1\":{\"362\":1}}],[\"最简单的合并就是像下面这样\",{\"1\":{\"59\":1}}],[\"最终岛屿的数量就是并查集中连通分量的数目\",{\"1\":{\"308\":1}}],[\"最终岛屿的数量就是进行广度优先搜索的次数\",{\"1\":{\"307\":1}}],[\"最终岛屿的数量就是每次发现新岛屿的次数\",{\"1\":{\"306\":1}}],[\"最终结果为\",{\"1\":{\"168\":1}}],[\"最典型的案例就是缓存的更新\",{\"1\":{\"229\":1}}],[\"最多有26个\",{\"1\":{\"200\":1}}],[\"最坏情况下的时间复杂度为\",{\"1\":{\"165\":1}}],[\"最坏情况下\",{\"1\":{\"143\":1}}],[\"最坏情况为\",{\"1\":{\"139\":1}}],[\"最低位一定为\",{\"1\":{\"126\":1}}],[\"最小\",{\"1\":{\"353\":1}}],[\"最小可用原则对外提供数据\",{\"1\":{\"226\":1}}],[\"最小生成树所有边的长度之和\",{\"1\":{\"148\":1}}],[\"最小生成树就是将\",{\"1\":{\"147\":1}}],[\"最小生成树问题\",{\"0\":{\"147\":1}}],[\"最小的最大\",{\"1\":{\"111\":1}}],[\"最小值\",{\"1\":{\"44\":2,\"198\":1}}],[\"最小值下标\",{\"1\":{\"44\":2}}],[\"最后返回上一层\",{\"1\":{\"271\":1}}],[\"最后返回c数组\",{\"1\":{\"115\":1,\"116\":1}}],[\"最后找到的节点处理完后\",{\"1\":{\"271\":1}}],[\"最后处理这个节点的右子树\",{\"1\":{\"270\":1}}],[\"最后遍历左子节点的右子树\",{\"1\":{\"269\":1}}],[\"最后访问右子树\",{\"1\":{\"269\":1}}],[\"最后交由\",{\"1\":{\"251\":1}}],[\"最后通过热点压测\",{\"1\":{\"234\":1}}],[\"最后剩下的式子就满足我们的答案\",{\"1\":{\"172\":1}}],[\"最后剩下的就是区间\",{\"1\":{\"160\":1}}],[\"最后将整个图连通起来\",{\"1\":{\"148\":1}}],[\"最后一个元素\",{\"1\":{\"348\":1}}],[\"最后一个节点的isend置为true\",{\"1\":{\"289\":1}}],[\"最后一个访问到的一定是根\",{\"1\":{\"102\":1}}],[\"最后一层节点从左向右排列\",{\"1\":{\"205\":1}}],[\"最后一次出现的位置的\",{\"1\":{\"112\":1}}],[\"最后根据分界点分别递归左右两部分\",{\"1\":{\"105\":1}}],[\"最后判断\",{\"1\":{\"79\":1}}],[\"最短路问题\",{\"0\":{\"138\":1}}],[\"最短hamilton路径\",{\"0\":{\"100\":1}}],[\"最短编辑距离\",{\"0\":{\"94\":1}}],[\"最长公共上升子序列\",{\"0\":{\"92\":1}}],[\"最长公共子序列\",{\"0\":{\"91\":1,\"311\":1},\"1\":{\"311\":1}}],[\"最长上升子序列\",{\"0\":{\"90\":1}}],[\"最大\",{\"1\":{\"353\":1}}],[\"最大深度\",{\"1\":{\"275\":1}}],[\"最大不相交区间数量\",{\"0\":{\"216\":1}}],[\"最大公约数与最小公倍数\",{\"0\":{\"165\":1}}],[\"最大匹配\",{\"1\":{\"151\":1}}],[\"最大的最小\",{\"1\":{\"111\":1}}],[\"最大的总价值\",{\"1\":{\"84\":1}}],[\"最大价值是多少\",{\"1\":{\"84\":1,\"85\":1}}],[\"最大值\",{\"1\":{\"44\":2,\"276\":1}}],[\"最大值下标\",{\"1\":{\"44\":2}}],[\"最少需要付多少美元才能把这\",{\"1\":{\"78\":1}}],[\"最初最小生成树的边数为\",{\"1\":{\"149\":1}}],[\"最初\",{\"1\":{\"66\":1}}],[\"最值元素的值\",{\"1\":{\"44\":1}}],[\"最值元素的地址\",{\"1\":{\"44\":1}}],[\"分钟\",{\"1\":{\"397\":1}}],[\"分钟开始\",{\"1\":{\"331\":1}}],[\"分成了\",{\"1\":{\"257\":3}}],[\"分成子问题\",{\"1\":{\"105\":2}}],[\"分页\",{\"1\":{\"247\":1}}],[\"分片\",{\"1\":{\"232\":1}}],[\"分享链接\",{\"1\":{\"223\":1}}],[\"分为两步\",{\"1\":{\"382\":1}}],[\"分为两个步骤\",{\"1\":{\"226\":1}}],[\"分为两种情况\",{\"1\":{\"168\":1}}],[\"分为两大类\",{\"1\":{\"139\":1}}],[\"分解质因数的方式比较好用\",{\"1\":{\"178\":1}}],[\"分解质因数法求组合数\",{\"0\":{\"178\":1}}],[\"分解质因数\",{\"1\":{\"167\":1}}],[\"分治算法都有三步\",{\"1\":{\"105\":1}}],[\"分组背包\",{\"0\":{\"87\":1}}],[\"分数不考虑约分的情况\",{\"1\":{\"79\":1}}],[\"分别保存了对应基本类型的最大值与最小值\",{\"1\":{\"358\":1}}],[\"分别到达节点y1\",{\"1\":{\"186\":1}}],[\"分别适用于不同情况\",{\"1\":{\"108\":1}}],[\"分别出现且只出现一次\",{\"1\":{\"79\":1}}],[\"分别代表目标的\",{\"1\":{\"51\":1}}],[\"分别代表地图上的目标数目和正方形包含的横纵位置数量\",{\"1\":{\"51\":1}}],[\"分别用来求最大元素和最小元素的值\",{\"1\":{\"44\":1}}],[\"分别用来求最大元素和最小元素的位置\",{\"1\":{\"44\":1}}],[\"分布式计算中间件等\",{\"1\":{\"14\":1}}],[\"分布式应用软件借助这种软件在不同的技术之间共享资源\",{\"1\":{\"14\":1}}],[\"url\",{\"1\":{\"386\":1,\"402\":2}}],[\"use\",{\"1\":{\"395\":2}}],[\"user\",{\"1\":{\"375\":1}}],[\"user=admin\",{\"1\":{\"362\":2}}],[\"using\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"61\":1,\"62\":1,\"66\":1,\"67\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"84\":1,\"85\":1,\"86\":3,\"87\":2,\"89\":1,\"90\":3,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"99\":1,\"100\":1,\"102\":1,\"112\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"127\":2,\"140\":1,\"148\":1,\"149\":1,\"164\":1,\"172\":1,\"180\":1,\"182\":1,\"199\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1}}],[\"util\",{\"0\":{\"355\":1,\"356\":1,\"357\":1}}],[\"utf\",{\"1\":{\"344\":3}}],[\"u3000\",{\"1\":{\"344\":1}}],[\"ull\",{\"1\":{\"209\":4}}],[\"uploadobjectargs\",{\"1\":{\"378\":1}}],[\"uploadobject\",{\"1\":{\"378\":1}}],[\"up主与用户的\",{\"1\":{\"240\":1}}],[\"up主回复\",{\"1\":{\"223\":1}}],[\"up主删除等\",{\"1\":{\"223\":1}}],[\"up主每天都会发布海量的视频\",{\"1\":{\"222\":1}}],[\"up\",{\"1\":{\"205\":4}}],[\"upper\",{\"1\":{\"112\":3,\"210\":4,\"211\":3}}],[\"u表示当前节点\",{\"1\":{\"150\":1}}],[\"u表示第几位\",{\"1\":{\"77\":1}}],[\"u只猫\",{\"1\":{\"78\":1}}],[\"unsigned\",{\"1\":{\"209\":2}}],[\"uninstall\",{\"1\":{\"365\":1}}],[\"unix\",{\"1\":{\"362\":1}}],[\"unique\",{\"1\":{\"129\":1,\"210\":1,\"211\":3}}],[\"union\",{\"1\":{\"55\":1,\"59\":1,\"61\":2,\"62\":4,\"149\":2,\"202\":1,\"308\":3}}],[\"unordered\",{\"1\":{\"67\":1,\"164\":1,\"210\":4}}],[\"u\",{\"1\":{\"43\":6,\"69\":4,\"75\":8,\"76\":5,\"77\":6,\"78\":8,\"79\":7,\"102\":16,\"133\":11,\"135\":4,\"150\":3,\"200\":7,\"204\":2,\"205\":17}}],[\"捕获\",{\"1\":{\"43\":1}}],[\"让他们保持同步\",{\"1\":{\"397\":1}}],[\"让\",{\"1\":{\"43\":1}}],[\"按gbk转换\",{\"1\":{\"344\":1}}],[\"按gbk编码转换\",{\"1\":{\"344\":1}}],[\"按utf\",{\"1\":{\"344\":3}}],[\"按系统默认编码转换\",{\"1\":{\"344\":1}}],[\"按顺序遍历\",{\"1\":{\"308\":1}}],[\"按照中序遍历的过程\",{\"1\":{\"270\":1}}],[\"按照消息反压的思路\",{\"1\":{\"250\":1}}],[\"按照安全等级划分服务\",{\"1\":{\"247\":1}}],[\"按照分层设计的原则拆分为3个部分\",{\"1\":{\"241\":1}}],[\"按照点赞率排序\",{\"1\":{\"241\":1}}],[\"按照点赞绝对值排序\",{\"1\":{\"241\":1}}],[\"按照正负样本加权平均的\",{\"1\":{\"241\":1}}],[\"按照时间\",{\"1\":{\"223\":1,\"246\":1}}],[\"按照从小到大的顺序输出所有方案\",{\"1\":{\"76\":1,\"77\":1}}],[\"按左端点排序\",{\"1\":{\"219\":1}}],[\"按左端点从小到大排序\",{\"1\":{\"217\":1}}],[\"按右端点从小到大排序\",{\"1\":{\"215\":1}}],[\"按字典序\",{\"1\":{\"210\":1}}],[\"按字典序输出所有排列方案\",{\"1\":{\"69\":1}}],[\"按快排的从小到大的顺序遍历每条边\",{\"1\":{\"149\":1}}],[\"按位取反\",{\"1\":{\"126\":1}}],[\"按位异或\",{\"1\":{\"126\":1}}],[\"按位或\",{\"1\":{\"126\":1}}],[\"按位与\",{\"1\":{\"126\":1}}],[\"按值捕获\",{\"1\":{\"43\":2}}],[\"按引用捕获\",{\"1\":{\"43\":1}}],[\"空表示不捕获任何变量\",{\"1\":{\"43\":1}}],[\">1\",{\"1\":{\"156\":1}}],[\">b\",{\"1\":{\"133\":1,\"142\":1}}],[\">=0\",{\"1\":{\"97\":1}}],[\">=\",{\"1\":{\"62\":2,\"66\":2,\"67\":2,\"78\":1,\"79\":2,\"84\":1,\"85\":1,\"86\":3,\"87\":3,\"89\":2,\"96\":1,\"105\":1,\"106\":1,\"109\":1,\"110\":1,\"115\":5,\"116\":12,\"117\":4,\"118\":4,\"127\":1,\"129\":1,\"144\":1,\"173\":3,\"217\":1,\"218\":1,\"306\":2,\"307\":2,\"332\":2}}],[\">\",{\"1\":{\"43\":3,\"76\":1,\"77\":1,\"86\":1,\"90\":1,\"92\":1,\"105\":2,\"113\":1,\"116\":5,\"117\":1,\"118\":2,\"133\":3,\"140\":1,\"141\":1,\"142\":3,\"143\":2,\"144\":1,\"148\":1,\"156\":1,\"164\":1,\"167\":1,\"173\":3,\"180\":1,\"194\":1,\"211\":1,\"215\":1,\"301\":1,\"331\":1,\"332\":5,\"338\":1,\"344\":2,\"362\":2,\"365\":1,\"377\":1,\"378\":1}}],[\">>=\",{\"1\":{\"169\":1,\"176\":1,\"177\":1,\"205\":1}}],[\">>\",{\"0\":{\"41\":1},\"1\":{\"41\":1,\"49\":3,\"50\":2,\"51\":5,\"61\":6,\"62\":5,\"66\":3,\"67\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":2,\"78\":3,\"79\":1,\"84\":4,\"85\":4,\"86\":15,\"87\":10,\"89\":2,\"90\":7,\"91\":4,\"92\":3,\"93\":5,\"94\":4,\"95\":2,\"96\":1,\"97\":2,\"99\":3,\"100\":3,\"102\":1,\"106\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":3,\"115\":2,\"116\":2,\"117\":2,\"118\":2,\"125\":1,\"126\":2,\"127\":5,\"129\":1,\"133\":2,\"140\":5,\"148\":5,\"164\":2,\"177\":4,\"180\":4,\"182\":2,\"199\":4,\"210\":1,\"215\":3,\"216\":3,\"217\":3,\"218\":5,\"219\":3}}],[\"表面上拼接字符串时\",{\"1\":{\"343\":1}}],[\"表里有一些统计字段\",{\"1\":{\"258\":1}}],[\"表里捞出来一堆\",{\"1\":{\"257\":1}}],[\"表找到根评论列表\",{\"1\":{\"257\":1}}],[\"表还有自己的自增主键的话\",{\"1\":{\"257\":1}}],[\"表了\",{\"1\":{\"257\":1}}],[\"表都有主键\",{\"1\":{\"257\":1}}],[\"表的\",{\"1\":{\"257\":1}}],[\"表的两部分字段\",{\"1\":{\"232\":1}}],[\"表和\",{\"1\":{\"232\":1}}],[\"表示存储桶是否存在\",{\"1\":{\"377\":1}}],[\"表示键值对\",{\"1\":{\"357\":1}}],[\"表示两个元素需要更换位置\",{\"1\":{\"353\":1}}],[\"表示泛型\",{\"1\":{\"347\":1}}],[\"表示出现了环\",{\"1\":{\"338\":1}}],[\"表示回到了起点\",{\"1\":{\"337\":1}}],[\"表示如果要学习课程\",{\"1\":{\"336\":1}}],[\"表示一个完整的字符串\",{\"1\":{\"289\":1}}],[\"表示一次询问中满足条件的字符串个数\",{\"1\":{\"93\":1}}],[\"表示一次询问\",{\"1\":{\"93\":1}}],[\"表示该节点是否为字符串的结尾\",{\"1\":{\"288\":1}}],[\"表示大小\",{\"1\":{\"205\":1}}],[\"表示堆\",{\"1\":{\"205\":1}}],[\"表示祖宗节点所在集合中的点的数量\",{\"1\":{\"203\":1}}],[\"表示队头\",{\"1\":{\"197\":1}}],[\"表示节点的右指针\",{\"1\":{\"192\":1}}],[\"表示节点的左指针\",{\"1\":{\"192\":1}}],[\"表示节点的值\",{\"1\":{\"192\":1}}],[\"表示每个点的颜色\",{\"1\":{\"150\":1}}],[\"表示a到b的距离\",{\"1\":{\"146\":1}}],[\"表示1号点已经被遍历过\",{\"1\":{\"136\":1}}],[\"表示点j已经被遍历过\",{\"1\":{\"136\":1}}],[\"表示点u已经被遍历过\",{\"1\":{\"135\":1}}],[\"表示点数\",{\"1\":{\"134\":1,\"137\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":1}}],[\"表示边数\",{\"1\":{\"134\":1,\"137\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":1}}],[\"表示补码\",{\"1\":{\"127\":1}}],[\"表示整个数列\",{\"1\":{\"127\":1}}],[\"表示精度\",{\"1\":{\"113\":1}}],[\"表示所有点都走过了\",{\"1\":{\"100\":1}}],[\"表示从a个苹果中选b个的方案数\",{\"1\":{\"175\":1}}],[\"表示从\",{\"1\":{\"100\":1}}],[\"表示从左上角移动至右下角的最少移动次数\",{\"1\":{\"66\":1}}],[\"表示当前摆到第\",{\"1\":{\"99\":1}}],[\"表示前\",{\"1\":{\"96\":1}}],[\"表示给定的字符串\",{\"1\":{\"93\":1}}],[\"表示最长公共上升子序列的长度\",{\"1\":{\"92\":1}}],[\"表示最少需要多少美元\",{\"1\":{\"78\":1}}],[\"表示最少交换次数\",{\"1\":{\"67\":1}}],[\"表示数列\",{\"1\":{\"92\":3}}],[\"表示总体积是i的情况下\",{\"1\":{\"84\":1,\"85\":1}}],[\"表示陆地\",{\"1\":{\"68\":2}}],[\"表示海洋\",{\"1\":{\"68\":2}}],[\"表示变换到某个字符串时需要的交换次数\",{\"1\":{\"67\":1}}],[\"表示完整的二维数组迷宫\",{\"1\":{\"66\":1}}],[\"表示不可通过的墙壁\",{\"1\":{\"66\":1}}],[\"表示可以走的路\",{\"1\":{\"66\":1}}],[\"表示共有\",{\"1\":{\"62\":1}}],[\"表示询问\",{\"1\":{\"61\":1}}],[\"表示\",{\"1\":{\"61\":1,\"117\":1,\"118\":1,\"150\":1,\"176\":1,\"336\":1}}],[\"表示目标在地图上的位置\",{\"1\":{\"51\":1}}],[\"表示截断方法数量\",{\"1\":{\"50\":1}}],[\"表示这个前缀和的值\",{\"1\":{\"49\":1}}],[\"表示第二个集合中的每个点是否已经被遍历过\",{\"1\":{\"151\":1}}],[\"表示第\",{\"1\":{\"49\":1}}],[\"表示捕获当前类中的\",{\"1\":{\"43\":1}}],[\"表示捕获外部作用域中所有变量\",{\"1\":{\"43\":2}}],[\"表示按值捕获外部作用域中所有变量\",{\"1\":{\"43\":1}}],[\"表示size\",{\"1\":{\"40\":1}}],[\"表达式\",{\"1\":{\"43\":1}}],[\"表达式拥有和当前类成员函数同样的访问权限\",{\"1\":{\"43\":1}}],[\"表达式的语法形式可简单归纳如下\",{\"1\":{\"43\":1}}],[\"表达式定义了一个匿名函数\",{\"1\":{\"43\":1}}],[\"二元组\",{\"1\":{\"357\":1}}],[\"二叉搜索树\",{\"1\":{\"299\":1}}],[\"二叉树的直径\",{\"0\":{\"280\":1},\"1\":{\"280\":1}}],[\"二叉树的最大深度\",{\"0\":{\"274\":1},\"1\":{\"274\":1}}],[\"二叉树的\",{\"1\":{\"269\":1,\"275\":1,\"281\":1}}],[\"二叉树的中序遍历\",{\"0\":{\"268\":1},\"1\":{\"268\":1}}],[\"二叉树\",{\"1\":{\"24\":1,\"205\":1},\"2\":{\"28\":1,\"273\":1,\"279\":1,\"285\":1,\"297\":1,\"303\":1,\"328\":1}}],[\"二级列表\",{\"1\":{\"257\":1}}],[\"二是数据组装\",{\"1\":{\"226\":1}}],[\"二是基于评论系统做二次开发或存在业务关联的其他业务后端\",{\"1\":{\"226\":1}}],[\"二进制中1的个数\",{\"1\":{\"127\":1}}],[\"二分\",{\"1\":{\"211\":1}}],[\"二分图\",{\"1\":{\"150\":2}}],[\"二分求出x对应的离散化的值\",{\"1\":{\"129\":1}}],[\"二分答案可以用来处理\",{\"1\":{\"111\":1}}],[\"二分答案模板\",{\"0\":{\"111\":1}}],[\"二分模板一共有两个\",{\"1\":{\"108\":1}}],[\"二分查找算法模板\",{\"0\":{\"108\":1}}],[\"二分算法\",{\"0\":{\"107\":1}}],[\"二分写法\",{\"1\":{\"90\":1}}],[\"二\",{\"0\":{\"383\":1},\"1\":{\"87\":1,\"90\":1}}],[\"二维差分\",{\"0\":{\"123\":1}}],[\"二维前缀和\",{\"0\":{\"121\":1}}],[\"二维会爆栈\",{\"1\":{\"51\":1}}],[\"二维\",{\"1\":{\"42\":1,\"84\":1,\"85\":1}}],[\"第i堆物品有ai个\",{\"1\":{\"182\":1}}],[\"第i行j列格子左上部分所有元素的和\",{\"1\":{\"121\":1}}],[\"第三步\",{\"1\":{\"105\":1}}],[\"第三行包含\",{\"1\":{\"92\":1}}],[\"第三维枚举决策\",{\"1\":{\"83\":1}}],[\"第三段\",{\"1\":{\"50\":1}}],[\"第\",{\"1\":{\"68\":3,\"78\":2,\"172\":2}}],[\"第二层节点就是记录了字符串索引\",{\"1\":{\"288\":1}}],[\"第二个元素\",{\"1\":{\"210\":1}}],[\"第二个行动的称为后手\",{\"1\":{\"182\":1}}],[\"第二行输出所求余数\",{\"1\":{\"118\":1}}],[\"第二行包含\",{\"1\":{\"50\":1,\"92\":1,\"127\":1}}],[\"第二步调用了\",{\"1\":{\"383\":1}}],[\"第二步\",{\"1\":{\"105\":1}}],[\"第二维枚举起点\",{\"1\":{\"95\":1}}],[\"第二维枚举体积\",{\"1\":{\"83\":1}}],[\"第二种写法\",{\"1\":{\"86\":1,\"87\":1}}],[\"第二种用法\",{\"1\":{\"42\":1}}],[\"第二部分是以\",{\"1\":{\"61\":1}}],[\"第一个元素\",{\"1\":{\"210\":1}}],[\"第一次出现的位置\",{\"1\":{\"112\":1}}],[\"第一次循环不能有0\",{\"1\":{\"97\":1}}],[\"第一步就是加载配置文件\",{\"1\":{\"383\":1}}],[\"第一步\",{\"1\":{\"105\":1}}],[\"第一维通常是枚举区间长度\",{\"1\":{\"95\":1}}],[\"第一维枚举物品\",{\"1\":{\"83\":1}}],[\"第一种写法\",{\"1\":{\"86\":1,\"87\":1}}],[\"第一种用法\",{\"1\":{\"42\":1}}],[\"第一部分是以\",{\"1\":{\"61\":1}}],[\"第一行又是初始化了一个配置\",{\"1\":{\"394\":1}}],[\"第一行输出所求的商\",{\"1\":{\"118\":1}}],[\"第一行输入正整数\",{\"1\":{\"51\":1}}],[\"第一行包含一个整数\",{\"1\":{\"68\":1,\"92\":1}}],[\"第一行包含整数\",{\"1\":{\"50\":1,\"127\":1}}],[\"第一行包含两个整数\",{\"1\":{\"49\":1,\"62\":1,\"66\":1,\"93\":1}}],[\"第一段\",{\"1\":{\"50\":1}}],[\"个奇偶校验块\",{\"1\":{\"370\":1}}],[\"个节点\",{\"1\":{\"337\":1}}],[\"个方向上相邻\",{\"1\":{\"330\":1}}],[\"个方程\",{\"1\":{\"173\":2}}],[\"个子节点\",{\"1\":{\"288\":1}}],[\"个闭区间\",{\"1\":{\"218\":1}}],[\"个链表\",{\"1\":{\"191\":1}}],[\"个不同的质数\",{\"1\":{\"180\":1}}],[\"个未知数的多元线性方程组\",{\"1\":{\"173\":1}}],[\"个未知数的线性方程组\",{\"1\":{\"173\":1}}],[\"个式子合并\",{\"1\":{\"172\":1}}],[\"个质数\",{\"1\":{\"159\":1}}],[\"个顶点的连通块筛选出来\",{\"1\":{\"149\":1}}],[\"个顶点\",{\"1\":{\"147\":1}}],[\"个点\",{\"1\":{\"139\":1}}],[\"个点的带权无向图\",{\"1\":{\"100\":1}}],[\"个位\",{\"1\":{\"115\":1,\"116\":1}}],[\"个位置的正方形内的所有目标\",{\"1\":{\"51\":1}}],[\"个人来\",{\"1\":{\"102\":1}}],[\"个人不来\",{\"1\":{\"102\":1}}],[\"个人介绍和档案放置在此\",{\"1\":{\"0\":1}}],[\"个物品全不选也是一种方案\",{\"1\":{\"96\":2}}],[\"个字符串中有多少个字符串可以在上限操作次数内经过操作变成询问给出的字符串\",{\"1\":{\"93\":1}}],[\"个长度不超过\",{\"1\":{\"93\":1}}],[\"个数据块\",{\"1\":{\"370\":1}}],[\"个数字\",{\"1\":{\"318\":1}}],[\"个数字和一个\",{\"1\":{\"67\":1}}],[\"个数来组合\",{\"1\":{\"169\":1}}],[\"个数的二进制表示中\",{\"1\":{\"127\":1}}],[\"个数表示数列中的第\",{\"1\":{\"127\":1}}],[\"个数必须不重不漏\",{\"1\":{\"79\":1}}],[\"个数划分给\",{\"1\":{\"79\":1}}],[\"个数\",{\"1\":{\"79\":1,\"169\":1}}],[\"个\",{\"1\":{\"76\":1,\"77\":2,\"96\":3}}],[\"个空格隔开\",{\"1\":{\"75\":1}}],[\"个操作\",{\"1\":{\"62\":1}}],[\"个目标\",{\"1\":{\"51\":1}}],[\"个整数中随机选出\",{\"1\":{\"77\":1}}],[\"个整数中随机选取任意多个\",{\"1\":{\"75\":1}}],[\"个整数排成一行后随机打乱顺序\",{\"1\":{\"76\":1}}],[\"个整数\",{\"1\":{\"50\":1,\"66\":1,\"92\":2,\"96\":1,\"127\":2,\"172\":1}}],[\"个元素和\",{\"1\":{\"62\":1}}],[\"个元素\",{\"1\":{\"57\":1}}],[\"个元素的和\",{\"1\":{\"49\":1}}],[\"个元素到第\",{\"1\":{\"49\":1}}],[\"个值为\",{\"1\":{\"42\":1}}],[\"功能模块\",{\"0\":{\"246\":1}}],[\"功能\",{\"1\":{\"42\":1}}],[\"它是一个帮助类\",{\"1\":{\"399\":1}}],[\"它是由原字符串在不改变字符的相对顺序的情况下删除某些字符\",{\"1\":{\"312\":1}}],[\"它尝试着从集群节点去获取所有的注册信息\",{\"1\":{\"397\":1}}],[\"它以对象为单位来处理\",{\"1\":{\"369\":1}}],[\"它们的\",{\"1\":{\"313\":1}}],[\"它们按照某种顺序排成长度为2n的序列\",{\"1\":{\"179\":1}}],[\"它直接使用\",{\"1\":{\"257\":1}}],[\"它的\",{\"1\":{\"269\":1}}],[\"它的行动规则是任选某个有向图游戏gi\",{\"1\":{\"187\":1}}],[\"它的一个重要推论是\",{\"1\":{\"36\":1,\"171\":1}}],[\"它就会被淹没\",{\"1\":{\"68\":1}}],[\"它主要用于处理一些不相交集合的合并问题\",{\"1\":{\"55\":1}}],[\"它会修改矢量的大小\",{\"1\":{\"42\":1}}],[\"可选\",{\"1\":{\"375\":1}}],[\"可视化管理界面\",{\"1\":{\"370\":1}}],[\"可拓展\",{\"1\":{\"370\":1}}],[\"可拓展性的特点\",{\"1\":{\"369\":1}}],[\"可修改\",{\"1\":{\"362\":1}}],[\"可为string\",{\"1\":{\"344\":1}}],[\"可是在这种情况下\",{\"1\":{\"331\":1}}],[\"可实现各类定制化排序\",{\"1\":{\"241\":1}}],[\"可用性上\",{\"1\":{\"247\":1}}],[\"可用性\",{\"1\":{\"241\":1}}],[\"可用性设计等\",{\"1\":{\"245\":1}}],[\"可用性设计\",{\"0\":{\"233\":1,\"260\":1}}],[\"可用于存储一些关键的附属信息\",{\"1\":{\"231\":1}}],[\"可用于描述评论\",{\"1\":{\"231\":1}}],[\"可计算出去重后的元素个数\",{\"1\":{\"211\":1}}],[\"可把一堆取光\",{\"1\":{\"182\":1}}],[\"可理解为\",{\"1\":{\"148\":1,\"149\":1}}],[\"可能会变为瓶颈\",{\"1\":{\"262\":1}}],[\"可能会引起存储过载的情况\",{\"1\":{\"261\":1}}],[\"可能更好\",{\"1\":{\"257\":1}}],[\"可能是\",{\"1\":{\"247\":1}}],[\"可能是整数\",{\"1\":{\"40\":1}}],[\"可能在b事务中被修改\",{\"1\":{\"238\":1}}],[\"可能为负数\",{\"1\":{\"172\":1}}],[\"可能包含长度为偶数的环\",{\"1\":{\"150\":1}}],[\"可能的\",{\"1\":{\"111\":1}}],[\"可进行的操作有\",{\"1\":{\"94\":1}}],[\"可使物品总体积不超过背包容量\",{\"1\":{\"87\":1}}],[\"可以感知集群实例注册表的实现类\",{\"1\":{\"397\":1}}],[\"可以得出结论\",{\"1\":{\"387\":1}}],[\"可以参考之前我写的文章\",{\"1\":{\"382\":1}}],[\"可以看到改了后的值\",{\"1\":{\"382\":1}}],[\"可以多个线程共同使用一个\",{\"1\":{\"375\":1}}],[\"可以丢失任意\",{\"1\":{\"370\":1}}],[\"可以直接通过浏览器登录系统\",{\"1\":{\"370\":1}}],[\"可以直接引用因子机预定义的因子\",{\"1\":{\"241\":1}}],[\"可以自定义修改\",{\"1\":{\"362\":1}}],[\"可以删除元素\",{\"1\":{\"349\":1}}],[\"可以删掉\",{\"1\":{\"195\":1}}],[\"可以做到\",{\"1\":{\"259\":1}}],[\"可以通过二次点击支持\",{\"1\":{\"257\":1}}],[\"可以先写入\",{\"1\":{\"257\":1}}],[\"可以按照\",{\"1\":{\"250\":1}}],[\"可以认为是物理上的一个小队列\",{\"1\":{\"250\":1}}],[\"可以接入各种业务形态\",{\"1\":{\"246\":1}}],[\"可以倾诉自己的故事\",{\"1\":{\"242\":1}}],[\"可以炫一下自己的装扮\",{\"1\":{\"242\":1}}],[\"可以保留一套通用的底层排序算法\",{\"1\":{\"241\":1}}],[\"可以说是一个写多读少的场景\",{\"1\":{\"241\":1}}],[\"可以视具体场景要求降级至下一级缓存\",{\"1\":{\"235\":1}}],[\"可以减少热点场景下的sql执行条数\",{\"1\":{\"234\":1}}],[\"可以不对回复做更新操作\",{\"1\":{\"231\":1}}],[\"可以不需要考虑重边\",{\"1\":{\"141\":1}}],[\"可以在进程内吞掉大量的读请求\",{\"1\":{\"262\":1}}],[\"可以在\",{\"1\":{\"261\":1}}],[\"可以在第三个参数传入定义大小比较的函数\",{\"1\":{\"211\":1}}],[\"可以在区间\",{\"1\":{\"112\":2}}],[\"可以执行的合法行动与轮到哪名玩家无关\",{\"1\":{\"183\":1}}],[\"可以用费马小定理求逆元\",{\"1\":{\"176\":1}}],[\"可以用结构体存储点和边\",{\"1\":{\"142\":1}}],[\"可以缩小问题规模而保持最大公约数不变\",{\"1\":{\"165\":1}}],[\"可以对其进行优化\",{\"1\":{\"156\":1}}],[\"可以生成最小生成树\",{\"1\":{\"149\":1}}],[\"可以将模板\",{\"1\":{\"110\":1}}],[\"可以任选\",{\"1\":{\"105\":1}}],[\"可以表示为\",{\"1\":{\"126\":1}}],[\"可以表示为带分数的形式\",{\"1\":{\"79\":1}}],[\"可以表示成若干个正整数之和\",{\"1\":{\"96\":1}}],[\"可以把\",{\"1\":{\"67\":1}}],[\"可以摧毁一个包含\",{\"1\":{\"51\":1}}],[\"可以是一个区间\",{\"1\":{\"44\":2}}],[\"可以使用各种公有云提供的\",{\"1\":{\"369\":1}}],[\"可以使用\",{\"1\":{\"31\":1,\"259\":1,\"370\":1}}],[\"可以返回\",{\"1\":{\"31\":1}}],[\"可以理解为传输的配置\",{\"1\":{\"394\":1}}],[\"可以理解为一个\",{\"1\":{\"390\":1}}],[\"可以理解为\",{\"1\":{\"14\":1,\"79\":1}}],[\"作者置顶\",{\"1\":{\"246\":1}}],[\"作者删除\",{\"1\":{\"246\":1}}],[\"作用\",{\"1\":{\"127\":1,\"205\":1}}],[\"作用等同于\",{\"1\":{\"31\":1}}],[\"作为一个应用程序向\",{\"1\":{\"390\":1}}],[\"作为一款基于\",{\"1\":{\"370\":1}}],[\"作为主力存储\",{\"1\":{\"259\":1}}],[\"作为主力缓存\",{\"1\":{\"232\":1}}],[\"作为主键去查询\",{\"1\":{\"257\":1}}],[\"作为主键\",{\"1\":{\"257\":1}}],[\"作为\",{\"1\":{\"252\":1}}],[\"作为切割点\",{\"1\":{\"50\":1}}],[\"作为返回值它通常被用作表明没有匹配\",{\"1\":{\"40\":1}}],[\"直径\",{\"1\":{\"281\":2}}],[\"直播场景下\",{\"1\":{\"234\":1,\"242\":1}}],[\"直到单元格中没有新鲜橘子为止所必须经过的最小分钟数\",{\"1\":{\"330\":1}}],[\"直到队列为空\",{\"1\":{\"307\":1}}],[\"直到遍历完成\",{\"1\":{\"277\":1}}],[\"直到找到并处理完后\",{\"1\":{\"271\":1}}],[\"直到具有\",{\"1\":{\"149\":1}}],[\"直到第n个点\",{\"1\":{\"140\":1}}],[\"直到字符串结尾\",{\"1\":{\"40\":1}}],[\"直接返回空指针\",{\"1\":{\"289\":1}}],[\"直接基于主键检索\",{\"1\":{\"257\":1}}],[\"直接向端上提供接口\",{\"1\":{\"252\":1}}],[\"直接将其指向下下个节点\",{\"1\":{\"191\":1}}],[\"直接异或运算进行整数交换后\",{\"1\":{\"126\":1}}],[\"直接搜索数组a和b\",{\"1\":{\"115\":1,\"116\":1}}],[\"直接递归判断\",{\"1\":{\"25\":1}}],[\"该命令也会继续执行\",{\"1\":{\"362\":1}}],[\"该游戏被称为有向图游戏\",{\"1\":{\"184\":1}}],[\"该点到它本身的路径赋为0\",{\"1\":{\"143\":1}}],[\"该表格的初始值要赋为极大值\",{\"1\":{\"143\":1}}],[\"该式被称为三角不等式\",{\"1\":{\"142\":1}}],[\"该人从左上角移动至右下角\",{\"1\":{\"66\":1}}],[\"该如何想办法避免树的不平衡呢\",{\"1\":{\"62\":1}}],[\"该函数常用于离散化\",{\"1\":{\"211\":1}}],[\"该函数有唯一的返回类型\",{\"1\":{\"40\":1}}],[\"该函数返回字符串的首字符的地址\",{\"1\":{\"31\":1}}],[\"该函数返回在重新分配内存之前\",{\"1\":{\"31\":1}}],[\"该值表示\",{\"1\":{\"40\":1}}],[\"hdfs\",{\"1\":{\"370\":1}}],[\"hup\",{\"1\":{\"362\":1}}],[\"hugegraph\",{\"1\":{\"257\":1}}],[\"hi\",{\"1\":{\"344\":2}}],[\"holder\",{\"1\":{\"401\":10}}],[\"hot100\",{\"0\":{\"422\":1},\"2\":{\"272\":1,\"278\":1,\"284\":1,\"290\":1,\"296\":1,\"302\":1,\"309\":1,\"315\":1,\"321\":1,\"327\":1,\"333\":1,\"339\":1}}],[\"how\",{\"1\":{\"242\":2}}],[\"handoff\",{\"1\":{\"395\":2}}],[\"hard\",{\"1\":{\"388\":1}}],[\"hadoop\",{\"1\":{\"370\":1}}],[\"hao\",{\"1\":{\"370\":1}}],[\"hascycle\",{\"1\":{\"338\":4}}],[\"hashcode\",{\"1\":{\"357\":1}}],[\"hashset<>\",{\"1\":{\"348\":2}}],[\"hashset<integer>\",{\"1\":{\"347\":1}}],[\"hashset\",{\"1\":{\"348\":2}}],[\"hashmap<>\",{\"1\":{\"349\":4}}],[\"hashmap\",{\"1\":{\"262\":2,\"349\":2}}],[\"hash\",{\"1\":{\"250\":1,\"262\":1}}],[\"hamilton\",{\"1\":{\"100\":1}}],[\"http\",{\"1\":{\"364\":1,\"368\":1,\"369\":1,\"375\":1}}],[\"https\",{\"1\":{\"242\":7,\"361\":3,\"362\":1,\"364\":1,\"365\":1,\"368\":1,\"369\":1,\"370\":4,\"408\":1}}],[\"html\",{\"1\":{\"242\":1}}],[\"hp\",{\"1\":{\"205\":6}}],[\"herd\",{\"1\":{\"249\":1}}],[\"heartbeatthread\",{\"1\":{\"395\":1}}],[\"heartbeatexecutor\",{\"1\":{\"395\":2}}],[\"head\",{\"1\":{\"191\":6}}],[\"head存储链表头\",{\"1\":{\"191\":1}}],[\"heap\",{\"1\":{\"141\":6,\"205\":11,\"217\":7}}],[\"hello\",{\"1\":{\"31\":2,\"344\":5}}],[\"hh++\",{\"1\":{\"137\":1,\"197\":1,\"198\":1}}],[\"hh\",{\"1\":{\"137\":2,\"197\":4,\"198\":4}}],[\"h>\",{\"1\":{\"97\":1,\"102\":1,\"148\":1,\"149\":1}}],[\"h\",{\"1\":{\"39\":1,\"133\":10,\"135\":1,\"136\":1,\"137\":1,\"141\":4,\"143\":4,\"144\":2,\"150\":2,\"151\":2,\"205\":11,\"207\":4,\"208\":3,\"209\":6}}],[\"这部分是将标准错误输出\",{\"1\":{\"362\":1}}],[\"这部分是将标准输出\",{\"1\":{\"362\":1}}],[\"这意味着\",{\"1\":{\"362\":1}}],[\"这是一个\",{\"1\":{\"362\":1}}],[\"这是一种c语言中的转换方式\",{\"1\":{\"39\":1}}],[\"这条路径可能经过也可能不经过根节点\",{\"1\":{\"281\":1}}],[\"这条边不要\",{\"1\":{\"149\":1}}],[\"这时候\",{\"1\":{\"262\":1}}],[\"这也是一种\",{\"1\":{\"257\":1}}],[\"这也就意味着\",{\"1\":{\"49\":1}}],[\"这就意味着个人也可以基于\",{\"1\":{\"369\":1}}],[\"这就是\",{\"1\":{\"313\":1}}],[\"这就是做一个削峰的处理\",{\"1\":{\"250\":1}}],[\"这就要求缓存命中率要非常高\",{\"1\":{\"241\":1}}],[\"这就对数据一致性\",{\"1\":{\"237\":1}}],[\"这种方式和上面的接口的方式相比\",{\"1\":{\"384\":1}}],[\"这种机制使得即使部分磁盘发生故障\",{\"1\":{\"370\":1}}],[\"这种形式拼接字符串\",{\"1\":{\"343\":1}}],[\"这种迭代查询的方式也可以直接用图数据库来实现\",{\"1\":{\"257\":1}}],[\"这种用户推荐\",{\"1\":{\"240\":1}}],[\"这种写法包含了两种情况\",{\"1\":{\"116\":1}}],[\"这些配置项如果在配置文件中有\",{\"1\":{\"388\":1}}],[\"这些关系型数据是发布时已经确定的\",{\"1\":{\"231\":1}}],[\"这些人的编号为\",{\"1\":{\"61\":1}}],[\"这里可以使用滑动窗口统计\",{\"1\":{\"262\":1}}],[\"这里\",{\"1\":{\"247\":1}}],[\"这里也利用了消息队列的\",{\"1\":{\"229\":1}}],[\"这里使用库函数二分的写法\",{\"1\":{\"112\":1}}],[\"这一数据结构有相当多的应用情景\",{\"1\":{\"287\":1}}],[\"这一层抽象把评论的本身的内容列表处理\",{\"1\":{\"247\":1}}],[\"这一层的职责就是接收规则机返回的各种决策并执行\",{\"1\":{\"241\":1}}],[\"这一层是较少做业务逻辑变更的\",{\"1\":{\"228\":1}}],[\"这一阶段\",{\"1\":{\"241\":1}}],[\"这一套流程对外提供了一个原子化的数据读取功能\",{\"1\":{\"229\":1}}],[\"这一项\",{\"1\":{\"168\":1}}],[\"这一项在\",{\"1\":{\"168\":1}}],[\"这一步类似完全背包的推导\",{\"1\":{\"96\":1}}],[\"这样初始的烂橘子时间为\",{\"1\":{\"331\":1}}],[\"这样最后如果发现\",{\"1\":{\"331\":1}}],[\"这样二维矩阵就被抽象成了一幅网状的\",{\"1\":{\"306\":1}}],[\"这样\",{\"1\":{\"261\":1,\"362\":1}}],[\"这样可以大大减少查询\",{\"1\":{\"261\":1}}],[\"这样就不用重复去\",{\"1\":{\"261\":1}}],[\"这样就可以根据某个主题查询\",{\"1\":{\"259\":1}}],[\"这样就能避免头重脚轻\",{\"1\":{\"62\":1}}],[\"这样效率很低\",{\"1\":{\"257\":1}}],[\"这样做是为了避免每次需要统计总数时都要做一次\",{\"1\":{\"257\":1}}],[\"这样做的好处是\",{\"1\":{\"241\":1}}],[\"这样方便我们串行消费\",{\"1\":{\"250\":1}}],[\"这样运营端的查询压力就下方给了独立的\",{\"1\":{\"247\":1}}],[\"这样让上游可以灵活组织逻辑\",{\"1\":{\"247\":1}}],[\"这样不同的业务只需要设计自己的策略接入评论系统即可\",{\"1\":{\"246\":1}}],[\"这样的话\",{\"1\":{\"387\":1}}],[\"这样的设计\",{\"1\":{\"370\":1}}],[\"这样的好处是\",{\"1\":{\"257\":1}}],[\"这样的数据结构\",{\"1\":{\"241\":1}}],[\"这样的局面被称为必胜\",{\"1\":{\"182\":1}}],[\"这样直接用\",{\"1\":{\"209\":1}}],[\"这样当两个边进行比较的时候就会使用他们的权重进行比较了\",{\"1\":{\"149\":1}}],[\"这个里面会初始化注册表\",{\"1\":{\"402\":1}}],[\"这个里面就是启动了一个定时任务\",{\"1\":{\"402\":1}}],[\"这个里面就会根据\",{\"1\":{\"395\":1}}],[\"这个集合不包含本地节点的\",{\"1\":{\"402\":1}}],[\"这个集合指当前已经在连通块中的所有点\",{\"1\":{\"148\":1}}],[\"这个监听器监听到状态改变时\",{\"1\":{\"395\":1}}],[\"这个发送心跳的操作由一个\",{\"1\":{\"395\":1}}],[\"这个刷新的操作是由一个\",{\"1\":{\"395\":1}}],[\"这个文件就是\",{\"1\":{\"394\":1}}],[\"这个\",{\"1\":{\"390\":1,\"391\":1}}],[\"这个就是\",{\"1\":{\"390\":1}}],[\"这个单例又是\",{\"1\":{\"387\":1}}],[\"这个符号是在命令的末尾\",{\"1\":{\"362\":1}}],[\"这个set中包含map中所有的key\",{\"1\":{\"349\":1}}],[\"这个过程与广度优先搜索的过程一致\",{\"1\":{\"331\":1}}],[\"这个节点和周围的四个节点连通\",{\"1\":{\"306\":1}}],[\"这个楼层发号操作必须是在一个评论区范围内串行的\",{\"1\":{\"229\":1}}],[\"这个长耗时几乎是不可接受的\",{\"1\":{\"229\":1}}],[\"这个公式求出每个质因子的次数\",{\"1\":{\"178\":1}}],[\"这个步骤\",{\"1\":{\"165\":1}}],[\"这个点还未被匹配\",{\"1\":{\"151\":1}}],[\"这个数本身\",{\"1\":{\"97\":1}}],[\"这个前缀和本身就是\",{\"1\":{\"49\":1}}],[\"这天\",{\"1\":{\"78\":1}}],[\"这\",{\"1\":{\"67\":1,\"75\":1,\"76\":1,\"77\":1,\"169\":2}}],[\"这两个函数会返回\",{\"1\":{\"31\":1}}],[\"函数遍历到值为\",{\"1\":{\"306\":1}}],[\"函数使用\",{\"1\":{\"40\":1}}],[\"函数的头文件是\",{\"1\":{\"39\":1}}],[\"函数的第一个参数类型是\",{\"1\":{\"39\":1}}],[\"函数\",{\"1\":{\"39\":1,\"42\":1}}],[\"函数转换\",{\"1\":{\"39\":1}}],[\"函数输出字符串是针对\",{\"1\":{\"31\":1}}],[\"转byte\",{\"1\":{\"344\":1}}],[\"转化一下\",{\"1\":{\"282\":1}}],[\"转化为\",{\"1\":{\"79\":1}}],[\"转化为数字\",{\"1\":{\"79\":1}}],[\"转载自悟空聊架构\",{\"1\":{\"381\":1}}],[\"转载自stormspirit\",{\"1\":{\"245\":1,\"255\":1}}],[\"转载自哔哩哔哩技术\",{\"1\":{\"221\":1}}],[\"转换为string\",{\"1\":{\"344\":1}}],[\"转换\",{\"1\":{\"39\":3}}],[\"转\",{\"0\":{\"412\":1},\"1\":{\"39\":2}}],[\"与评论主题的对应关系\",{\"1\":{\"257\":1}}],[\"与评论区\",{\"1\":{\"231\":1}}],[\"与推荐排序不同\",{\"1\":{\"241\":1}}],[\"与模数\",{\"1\":{\"176\":1}}],[\"与一个各位都为零的数值相与\",{\"1\":{\"126\":1}}],[\"与快排不同\",{\"1\":{\"106\":1}}],[\"与其上\",{\"1\":{\"67\":1}}],[\"与min\",{\"1\":{\"44\":1}}],[\"与\",{\"0\":{\"39\":1,\"44\":1},\"1\":{\"44\":1,\"62\":2,\"125\":1,\"126\":5,\"175\":1,\"176\":1,\"229\":2,\"236\":1,\"276\":1,\"294\":1}}],[\"zipdateformat>\",{\"1\":{\"365\":1}}],[\"zi​=2\",{\"1\":{\"62\":2}}],[\"zi​=1\",{\"1\":{\"62\":1}}],[\"zi​\",{\"1\":{\"62\":1}}],[\"zdd\",{\"1\":{\"259\":1}}],[\"zhihu\",{\"1\":{\"242\":1}}],[\"zhuanlan\",{\"1\":{\"242\":1}}],[\"zh\",{\"1\":{\"242\":1}}],[\"zrem\",{\"1\":{\"232\":1}}],[\"zadd\",{\"1\":{\"232\":1}}],[\"z\",{\"1\":{\"38\":1,\"62\":4}}],[\"work\",{\"0\":{\"429\":1}}],[\"word\",{\"1\":{\"287\":5,\"289\":8}}],[\"wget\",{\"1\":{\"362\":1}}],[\"waittimeinmswhensyncempty\",{\"1\":{\"387\":1}}],[\"warn\",{\"1\":{\"386\":1}}],[\"want\",{\"1\":{\"349\":2}}],[\"way\",{\"1\":{\"77\":4}}],[\"we\",{\"1\":{\"349\":2}}],[\"web\",{\"1\":{\"364\":1}}],[\"web场景来设计\",{\"1\":{\"247\":1}}],[\"web场景\",{\"1\":{\"226\":1}}],[\"web中间件\",{\"1\":{\"14\":1}}],[\"www\",{\"1\":{\"242\":2,\"361\":1,\"370\":1}}],[\"winsw\",{\"1\":{\"365\":4}}],[\"windows\",{\"0\":{\"364\":1,\"365\":1},\"1\":{\"364\":2,\"365\":3}}],[\"with\",{\"1\":{\"349\":2,\"386\":1,\"395\":2,\"408\":1}}],[\"wiki\",{\"1\":{\"242\":1}}],[\"wikipedia\",{\"1\":{\"242\":1}}],[\"wi​\",{\"1\":{\"51\":2}}],[\"write\",{\"1\":{\"238\":1}}],[\"where\",{\"1\":{\"231\":5,\"257\":2}}],[\"while\",{\"1\":{\"66\":1,\"67\":1,\"79\":1,\"86\":1,\"90\":1,\"93\":1,\"97\":3,\"99\":1,\"105\":3,\"106\":3,\"109\":1,\"110\":1,\"111\":1,\"113\":1,\"116\":1,\"117\":1,\"118\":1,\"127\":2,\"128\":1,\"129\":1,\"136\":1,\"137\":1,\"140\":1,\"141\":1,\"143\":2,\"144\":1,\"156\":1,\"157\":1,\"164\":3,\"167\":1,\"169\":1,\"176\":1,\"177\":2,\"178\":2,\"182\":1,\"195\":1,\"198\":1,\"199\":2,\"205\":1,\"208\":1,\"218\":1,\"277\":1,\"307\":1,\"319\":1,\"332\":3}}],[\"w表示边的权重\",{\"1\":{\"142\":1}}],[\"w表示的是无权图\",{\"1\":{\"100\":1}}],[\"w\",{\"1\":{\"38\":4,\"51\":3,\"78\":3,\"84\":4,\"85\":4,\"86\":14,\"87\":6,\"95\":1,\"100\":4,\"133\":2,\"141\":4,\"142\":8,\"143\":4,\"144\":3,\"149\":8,\"215\":2,\"216\":2,\"217\":2,\"218\":2}}],[\"9<\",{\"1\":{\"374\":1}}],[\"9000\",{\"1\":{\"363\":2,\"364\":1,\"375\":1}}],[\"9001\",{\"1\":{\"362\":3,\"363\":3,\"364\":1}}],[\"94\",{\"1\":{\"268\":1}}],[\"96\",{\"1\":{\"242\":1}}],[\"95\",{\"1\":{\"242\":1}}],[\"994\",{\"1\":{\"329\":1}}],[\"999\",{\"1\":{\"242\":1}}],[\"99\",{\"1\":{\"97\":3}}],[\"9​\",{\"1\":{\"79\":1}}],[\"9\",{\"0\":{\"38\":1,\"130\":1,\"180\":1,\"210\":1},\"1\":{\"61\":2,\"67\":1,\"68\":1,\"79\":5,\"97\":19}}],[\"occurred\",{\"1\":{\"407\":1}}],[\"ondemandupdate\",{\"1\":{\"395\":1}}],[\"onpath\",{\"1\":{\"337\":2,\"338\":5}}],[\"other\",{\"1\":{\"386\":1}}],[\"okay\",{\"1\":{\"386\":1}}],[\"oss\",{\"1\":{\"369\":3}}],[\"override\",{\"1\":{\"353\":1,\"382\":1,\"387\":1}}],[\"oldvalue\",{\"1\":{\"356\":1}}],[\"oldchar\",{\"1\":{\"344\":1}}],[\"oltp\",{\"1\":{\"251\":1}}],[\"owner\",{\"1\":{\"261\":1}}],[\"oom\",{\"1\":{\"249\":1}}],[\"of\",{\"1\":{\"248\":1}}],[\"offlast\",{\"1\":{\"352\":1}}],[\"offfirst\",{\"1\":{\"352\":1}}],[\"offset\",{\"1\":{\"241\":2}}],[\"offer\",{\"0\":{\"4\":1,\"416\":1},\"1\":{\"307\":2,\"332\":2,\"351\":1,\"353\":1},\"2\":{\"22\":1}}],[\"or\",{\"1\":{\"386\":1}}],[\"orangesrotting\",{\"1\":{\"332\":2}}],[\"org\",{\"1\":{\"242\":2,\"361\":1,\"362\":1,\"368\":1,\"370\":1}}],[\"order\",{\"1\":{\"231\":2,\"232\":1,\"241\":2,\"257\":2}}],[\"objectname\",{\"1\":{\"378\":1}}],[\"objectwriteresponse2\",{\"1\":{\"378\":1}}],[\"objectwriteresponse\",{\"1\":{\"378\":5}}],[\"object\",{\"0\":{\"378\":1},\"1\":{\"369\":1,\"375\":3,\"378\":6}}],[\"obj\",{\"1\":{\"231\":6,\"257\":6}}],[\"operate\",{\"1\":{\"349\":2}}],[\"operator\",{\"1\":{\"211\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1}}],[\"operator<\",{\"1\":{\"149\":1}}],[\"operation\",{\"1\":{\"126\":1}}],[\"opt\",{\"1\":{\"43\":2,\"362\":4}}],[\"o\",{\"1\":{\"112\":1,\"134\":1,\"137\":1,\"139\":5,\"140\":1,\"141\":1,\"142\":1,\"143\":2,\"144\":1,\"148\":1,\"149\":3,\"150\":1,\"151\":1,\"155\":1,\"156\":2,\"157\":3,\"159\":1,\"161\":1,\"165\":1,\"169\":1,\"173\":1,\"205\":1,\"210\":4,\"259\":2,\"342\":1,\"344\":14,\"345\":4,\"347\":6,\"348\":4,\"349\":9,\"350\":6,\"351\":5,\"352\":6,\"353\":3,\"356\":1}}],[\"output\",{\"1\":{\"37\":1}}],[\"out\",{\"1\":{\"37\":1,\"198\":1,\"344\":2,\"377\":3,\"378\":6}}],[\"问先手是否必胜\",{\"1\":{\"182\":1}}],[\"问区间\",{\"1\":{\"160\":1}}],[\"问完一个问题后\",{\"1\":{\"37\":1}}],[\"问题枚举时\",{\"1\":{\"95\":1}}],[\"问题的关键在于\",{\"1\":{\"62\":1}}],[\"问题\",{\"1\":{\"37\":1,\"241\":1}}],[\"答案是\",{\"1\":{\"375\":1}}],[\"答案在哪一侧\",{\"1\":{\"111\":1}}],[\"答案在右边界\",{\"1\":{\"110\":1}}],[\"答案在左边界\",{\"1\":{\"109\":1}}],[\"答案\",{\"1\":{\"37\":1}}],[\"要注意到图中并不一定所有节点都相连\",{\"1\":{\"337\":1}}],[\"要么不在\",{\"1\":{\"313\":1}}],[\"要么在\",{\"1\":{\"313\":1}}],[\"要权衡社会价值观引导\",{\"1\":{\"240\":1}}],[\"要上取整\",{\"1\":{\"110\":1}}],[\"要向下取整\",{\"1\":{\"109\":1}}],[\"要求分成若干组\",{\"1\":{\"217\":1}}],[\"要求求解这个方程组\",{\"1\":{\"173\":1}}],[\"要求边长之和最小\",{\"1\":{\"147\":1}}],[\"要求计算\",{\"1\":{\"117\":1,\"118\":1}}],[\"要求计算出所有\",{\"1\":{\"112\":1}}],[\"要求找出一条路径\",{\"1\":{\"89\":1}}],[\"要求将\",{\"1\":{\"79\":1}}],[\"要求\",{\"1\":{\"50\":1}}],[\"要将该数组从中间截断\",{\"1\":{\"50\":1}}],[\"要输出行的末尾并刷新输出\",{\"1\":{\"37\":1}}],[\"要给出最终答案\",{\"1\":{\"37\":1}}],[\"要使用\",{\"1\":{\"31\":1}}],[\"8转换\",{\"1\":{\"344\":1}}],[\"8编码转换\",{\"1\":{\"344\":2}}],[\"80\",{\"1\":{\"344\":1}}],[\"8\",{\"0\":{\"37\":1,\"129\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1},\"1\":{\"61\":2,\"66\":1,\"67\":10,\"77\":1,\"89\":2,\"242\":1,\"344\":3,\"357\":1,\"395\":1}}],[\"使一个数的最低位为\",{\"1\":{\"126\":1}}],[\"使其全部二进制位为\",{\"1\":{\"126\":1}}],[\"使路径上的数字的和最大\",{\"1\":{\"89\":1}}],[\"使得每组内部区间两两之间没有交集\",{\"1\":{\"217\":1}}],[\"使得每个区间内至少包含一个选出的点\",{\"1\":{\"215\":1}}],[\"使得行动后对面面临必败局面\",{\"1\":{\"182\":1}}],[\"使得ax\",{\"1\":{\"171\":1}}],[\"使得网格变为如下排列\",{\"1\":{\"67\":1}}],[\"使得\",{\"1\":{\"62\":1,\"150\":1,\"171\":2,\"176\":1}}],[\"使\",{\"1\":{\"36\":2,\"126\":1,\"171\":2}}],[\"使用stream流读取文件\",{\"1\":{\"378\":1}}],[\"使用的存储桶\",{\"1\":{\"375\":1}}],[\"使用公有云的\",{\"1\":{\"369\":1}}],[\"使用上述命令将\",{\"1\":{\"365\":1}}],[\"使用二分查找算法在有序数组arr中查找值\",{\"1\":{\"356\":1}}],[\"使用稳定的快排队数组进行排序\",{\"1\":{\"342\":1}}],[\"使用邻接表建图\",{\"1\":{\"337\":1}}],[\"使用邻接矩阵存图\",{\"1\":{\"146\":1}}],[\"使用数组列表作为队列\",{\"1\":{\"332\":1}}],[\"使用链表作为队列\",{\"1\":{\"332\":1}}],[\"使用优先队列\",{\"1\":{\"319\":1}}],[\"使用dfs将连通的陆地块淹掉\",{\"1\":{\"306\":1}}],[\"使用布尔字段\",{\"1\":{\"288\":1}}],[\"使用一个栈\",{\"1\":{\"271\":1}}],[\"使用归并回源的思路\",{\"1\":{\"261\":1}}],[\"使用自增\",{\"1\":{\"257\":1}}],[\"使用其他引擎来实现\",{\"1\":{\"251\":1}}],[\"使用json序列化方式存入\",{\"1\":{\"232\":1}}],[\"使用并查集\",{\"1\":{\"149\":1}}],[\"使用快排将所有边按权值从小到大排序\",{\"1\":{\"149\":1}}],[\"使用auto编译器会自动判断数据是什么类型\",{\"1\":{\"115\":1}}],[\"使用成员函数\",{\"1\":{\"31\":1}}],[\"使用\",{\"1\":{\"31\":3,\"39\":1,\"127\":1,\"251\":1,\"259\":3,\"288\":1,\"331\":1,\"349\":2,\"370\":2,\"375\":1}}],[\"yml\",{\"1\":{\"375\":1}}],[\"y方向数组\",{\"1\":{\"332\":1}}],[\"yk\",{\"1\":{\"186\":3}}],[\"y是分母\",{\"1\":{\"177\":1}}],[\"y=x\",{\"1\":{\"171\":1}}],[\"y=0\",{\"1\":{\"171\":1}}],[\"y2\",{\"1\":{\"121\":3,\"123\":3,\"186\":3}}],[\"y1\",{\"1\":{\"121\":3,\"123\":3,\"186\":1}}],[\"yy\",{\"1\":{\"67\":5,\"307\":6,\"332\":6}}],[\"yes\",{\"1\":{\"61\":4,\"182\":1}}],[\"yi​⩽50000⩽wi​⩽1000\",{\"1\":{\"51\":1}}],[\"yi​\",{\"1\":{\"51\":2,\"62\":3}}],[\"y\",{\"1\":{\"36\":3,\"51\":4,\"59\":2,\"61\":7,\"62\":23,\"66\":7,\"67\":2,\"97\":2,\"126\":17,\"149\":2,\"165\":1,\"171\":10,\"172\":4,\"177\":4,\"202\":2,\"211\":4,\"257\":1,\"307\":2,\"332\":2}}],[\"your\",{\"1\":{\"34\":1,\"344\":2}}],[\"xy\",{\"1\":{\"384\":1}}],[\"xml\",{\"1\":{\"365\":3}}],[\"x64\",{\"1\":{\"365\":1}}],[\"x方向数组\",{\"1\":{\"332\":1}}],[\"x的左儿子是2x\",{\"1\":{\"205\":1}}],[\"x<y\",{\"1\":{\"195\":1}}],[\"x属于自然数\",{\"1\":{\"185\":1}}],[\"x是分子\",{\"1\":{\"177\":1}}],[\"x≡mi​\",{\"1\":{\"172\":1}}],[\"x2\",{\"1\":{\"121\":3,\"123\":3}}],[\"x1\",{\"1\":{\"121\":3,\"123\":3}}],[\"xxx\",{\"1\":{\"344\":5}}],[\"xx\",{\"1\":{\"67\":5,\"307\":6,\"332\":6,\"384\":3}}],[\"x=y\",{\"1\":{\"171\":1}}],[\"x=1\",{\"1\":{\"171\":1}}],[\"x=\",{\"1\":{\"61\":1}}],[\"xi​\",{\"1\":{\"51\":2,\"62\":3}}],[\"x\",{\"0\":{\"41\":1},\"1\":{\"36\":3,\"38\":2,\"41\":2,\"42\":1,\"51\":4,\"58\":12,\"59\":2,\"61\":13,\"62\":25,\"66\":7,\"67\":17,\"79\":4,\"97\":13,\"105\":3,\"109\":1,\"110\":4,\"113\":1,\"126\":14,\"127\":18,\"129\":2,\"142\":1,\"144\":2,\"149\":8,\"151\":3,\"155\":5,\"156\":7,\"159\":1,\"161\":1,\"163\":5,\"164\":7,\"165\":1,\"167\":9,\"168\":1,\"171\":9,\"172\":9,\"176\":4,\"177\":4,\"182\":3,\"185\":1,\"186\":2,\"191\":3,\"192\":2,\"194\":1,\"197\":1,\"202\":8,\"203\":6,\"204\":10,\"205\":5,\"207\":6,\"208\":3,\"210\":2,\"211\":12,\"257\":1,\"307\":2,\"330\":1,\"332\":2,\"338\":7}}],[\"das\",{\"1\":{\"370\":1}}],[\"datacenter\",{\"1\":{\"382\":2}}],[\"data\",{\"1\":{\"362\":7,\"363\":1,\"364\":2,\"365\":1,\"375\":1}}],[\"datapage\",{\"1\":{\"257\":1}}],[\"dl\",{\"1\":{\"362\":1,\"364\":1}}],[\"dmin\",{\"1\":{\"358\":1}}],[\"dmax\",{\"1\":{\"358\":1}}],[\"dueue<e>\",{\"1\":{\"352\":1}}],[\"dueue\",{\"1\":{\"352\":1}}],[\"dd\",{\"1\":{\"332\":2}}],[\"drop\",{\"1\":{\"261\":1}}],[\"dgraph\",{\"1\":{\"257\":1}}],[\"db\",{\"1\":{\"249\":2,\"257\":1}}],[\"design\",{\"0\":{\"420\":1}}],[\"description>\",{\"1\":{\"365\":1}}],[\"details\",{\"1\":{\"408\":1}}],[\"demo\",{\"1\":{\"386\":1}}],[\"deployment\",{\"1\":{\"386\":1}}],[\"dependency>\",{\"1\":{\"374\":1}}],[\"dependency\",{\"1\":{\"247\":1}}],[\"dev\",{\"1\":{\"364\":2}}],[\"defaulteurekaservercontext\",{\"1\":{\"400\":2}}],[\"defaulteurekaserverconfig\",{\"1\":{\"384\":1,\"385\":2,\"387\":6,\"388\":3}}],[\"defaulteurekatransportconfig\",{\"1\":{\"394\":1}}],[\"defaulteurekaclientconfig\",{\"1\":{\"394\":1}}],[\"default\",{\"1\":{\"387\":1}}],[\"defaultconfigfilename\",{\"1\":{\"386\":1}}],[\"defaultvalue\",{\"1\":{\"349\":1}}],[\"define\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"66\":1,\"112\":1,\"141\":1,\"148\":1,\"160\":1,\"172\":1,\"180\":1,\"219\":1}}],[\"deque接口\",{\"1\":{\"350\":1}}],[\"deque<e>\",{\"1\":{\"350\":1}}],[\"deque\",{\"0\":{\"352\":1},\"1\":{\"210\":1,\"350\":3,\"352\":1}}],[\"direct\",{\"1\":{\"395\":2}}],[\"discoveryclient\",{\"1\":{\"394\":1,\"395\":5}}],[\"distance\",{\"1\":{\"93\":2,\"133\":3,\"141\":3,\"204\":1}}],[\"dist\",{\"1\":{\"67\":3,\"133\":7,\"140\":11,\"141\":9,\"142\":19,\"143\":10,\"144\":6,\"148\":10}}],[\"different\",{\"1\":{\"386\":1}}],[\"diameterofbinarytree\",{\"1\":{\"283\":1}}],[\"dijkstra\",{\"1\":{\"140\":2,\"141\":1}}],[\"dijkstra算法\",{\"0\":{\"140\":1}}],[\"divisors\",{\"1\":{\"163\":1}}],[\"divisor\",{\"1\":{\"157\":1}}],[\"divide\",{\"1\":{\"156\":1}}],[\"div\",{\"1\":{\"118\":2}}],[\"docs\",{\"1\":{\"370\":1}}],[\"docker\",{\"0\":{\"16\":1,\"363\":1},\"1\":{\"363\":4}}],[\"docker等等\",{\"1\":{\"7\":1}}],[\"domain\",{\"1\":{\"238\":1}}],[\"download\",{\"1\":{\"361\":1}}],[\"down和up只会执行其中一个\",{\"1\":{\"205\":1}}],[\"down\",{\"1\":{\"205\":6}}],[\"double\",{\"1\":{\"113\":6,\"358\":2}}],[\"do\",{\"1\":{\"105\":2}}],[\"dp\",{\"1\":{\"95\":7,\"97\":3,\"102\":14}}],[\"dynamicpropertyfactory\",{\"1\":{\"386\":2,\"387\":3,\"388\":2,\"394\":1}}],[\"dynamicstringproperty\",{\"1\":{\"386\":1}}],[\"dy\",{\"1\":{\"66\":2,\"67\":2,\"307\":2,\"332\":2}}],[\"dx\",{\"1\":{\"66\":2,\"67\":2,\"307\":2,\"332\":2}}],[\"dfs思路\",{\"1\":{\"150\":1}}],[\"dfs\",{\"0\":{\"69\":1,\"306\":1},\"1\":{\"43\":3,\"69\":3,\"75\":4,\"76\":3,\"77\":3,\"78\":4,\"79\":6,\"102\":3,\"133\":4,\"135\":2,\"150\":4,\"283\":4,\"301\":4,\"306\":10,\"337\":1,\"338\":3},\"2\":{\"73\":1,\"310\":1,\"340\":1}}],[\"d\",{\"1\":{\"36\":3,\"39\":2,\"43\":1,\"45\":1,\"61\":5,\"66\":8,\"67\":5,\"69\":1,\"97\":1,\"102\":4,\"115\":1,\"116\":2,\"117\":1,\"133\":4,\"137\":3,\"146\":7,\"148\":1,\"171\":5,\"172\":7,\"199\":1,\"204\":6,\"210\":1,\"332\":3,\"344\":3,\"364\":2,\"378\":3,\"395\":3}}],[\"且基本维持相同的热评排序逻辑\",{\"1\":{\"241\":1}}],[\"且热评排序算法应用场景也不仅局限于评论主列表的热度序\",{\"1\":{\"240\":1}}],[\"且多是批量查询\",{\"1\":{\"234\":1}}],[\"且评论计数也只有两级\",{\"1\":{\"231\":1}}],[\"且相对独立\",{\"1\":{\"231\":1}}],[\"且在一个评论区范围内不能出现重复\",{\"1\":{\"229\":1}}],[\"且数据更新实时性不高\",{\"1\":{\"227\":1}}],[\"且数值是严格递增的\",{\"1\":{\"92\":1}}],[\"且x不属于s\",{\"1\":{\"185\":1}}],[\"且原来匹配的点能找到另一个点\",{\"1\":{\"151\":1}}],[\"且到树的距离最短\",{\"1\":{\"148\":1}}],[\"且使权值最小的一种结构\",{\"1\":{\"147\":1}}],[\"且终点是n\",{\"1\":{\"100\":1}}],[\"且保证右端点不会超范围\",{\"1\":{\"95\":1}}],[\"且长度均不超过\",{\"1\":{\"93\":1}}],[\"且总价值最大\",{\"1\":{\"87\":1}}],[\"且一定至少存在一条通路\",{\"1\":{\"66\":1}}],[\"且\",{\"1\":{\"36\":1,\"105\":1,\"171\":1}}],[\"且它们的执行效果相同\",{\"1\":{\"31\":1}}],[\"若成功入堆返回值true\",{\"1\":{\"353\":1}}],[\"若成功添加则返回true\",{\"1\":{\"348\":1}}],[\"若队空返回true\",{\"1\":{\"351\":1}}],[\"若栈空返回true\",{\"1\":{\"350\":1}}],[\"若map为空返回true\",{\"1\":{\"349\":1}}],[\"若map中没有该key\",{\"1\":{\"349\":2}}],[\"若集合为空返回true\",{\"1\":{\"348\":1}}],[\"若集合中没有元素e\",{\"1\":{\"348\":1}}],[\"若集合中有元素e则返回false\",{\"1\":{\"348\":1}}],[\"若存在元素e\",{\"1\":{\"348\":1}}],[\"若删除成功返回true\",{\"1\":{\"348\":1}}],[\"若已滑出窗口\",{\"1\":{\"319\":1}}],[\"若直接删除\",{\"1\":{\"231\":1}}],[\"若一级评论被删除\",{\"1\":{\"231\":1}}],[\"若一个游戏满足\",{\"1\":{\"183\":1}}],[\"若回复数也要无限套娃\",{\"1\":{\"231\":1}}],[\"若用户重新刷新页面\",{\"1\":{\"229\":1}}],[\"若两区间部分存在交集\",{\"1\":{\"219\":1}}],[\"若右儿子小于它\",{\"1\":{\"205\":1}}],[\"若左二子小于它\",{\"1\":{\"205\":1}}],[\"若左移时舍弃的高位不包含\",{\"1\":{\"126\":1}}],[\"若从1开始\",{\"1\":{\"199\":1}}],[\"若在某一局面下存在某种行动\",{\"1\":{\"182\":1}}],[\"若在某一局面下无论采取何种行动\",{\"1\":{\"182\":1}}],[\"若在算数基本定理中\",{\"1\":{\"167\":1}}],[\"若p是质数\",{\"1\":{\"177\":1}}],[\"若整数\",{\"1\":{\"176\":1}}],[\"若为\",{\"1\":{\"169\":1}}],[\"若不进行备份会因此发生串联效应\",{\"1\":{\"142\":1}}],[\"若不超过最大载重\",{\"1\":{\"78\":1}}],[\"若t\",{\"1\":{\"116\":1}}],[\"若a大于b\",{\"1\":{\"116\":1}}],[\"若满足则答案+1\",{\"1\":{\"79\":1}}],[\"若满足则答案\",{\"1\":{\"79\":1}}],[\"若满足条件\",{\"1\":{\"49\":1,\"198\":1}}],[\"若剩下可选的数字不能填满剩下的空位则回退\",{\"1\":{\"77\":1}}],[\"若要提问\",{\"1\":{\"37\":1}}],[\"若\",{\"1\":{\"36\":1,\"61\":1,\"171\":2}}],[\"裴蜀定理\",{\"0\":{\"36\":1,\"171\":1}}],[\"79300058\",{\"1\":{\"408\":1}}],[\"783469249310599\",{\"1\":{\"242\":1}}],[\"7108973163333025805\",{\"1\":{\"242\":1}}],[\"7\",{\"0\":{\"36\":1,\"101\":1,\"102\":1,\"128\":1,\"151\":1,\"173\":1,\"205\":1,\"240\":1,\"241\":1,\"242\":1,\"406\":1},\"1\":{\"49\":4,\"61\":3,\"62\":1,\"67\":9,\"68\":1,\"77\":1,\"89\":2,\"96\":2,\"164\":1,\"240\":1,\"242\":1,\"395\":1}}],[\"求分成的最小组数\",{\"1\":{\"217\":1}}],[\"求集合当中的最小值\",{\"1\":{\"205\":1}}],[\"求滑动窗口里的最大值和最小值\",{\"1\":{\"198\":1}}],[\"求每个质因数的次数\",{\"1\":{\"178\":1}}],[\"求每个质数的次数\",{\"1\":{\"178\":1}}],[\"求next\",{\"1\":{\"199\":1}}],[\"求n\",{\"1\":{\"178\":1}}],[\"求组合数\",{\"0\":{\"174\":1}}],[\"求x\",{\"1\":{\"171\":1}}],[\"求x的欧拉函数\",{\"1\":{\"167\":1}}],[\"求整数\",{\"1\":{\"171\":1}}],[\"求欧拉函数\",{\"0\":{\"167\":1}}],[\"求1到n的最短路距离\",{\"1\":{\"142\":1}}],[\"求1号点到n号点的最短距离\",{\"1\":{\"141\":1}}],[\"求1号点到n号点的最短路距离\",{\"1\":{\"143\":1}}],[\"求1号点到n号点的最短路\",{\"1\":{\"140\":1}}],[\"求从一个点到其他所有点的最短距离\",{\"1\":{\"139\":1}}],[\"求最大匹配数\",{\"1\":{\"151\":1}}],[\"求最大权值和\",{\"1\":{\"102\":1}}],[\"求最小生成树的\",{\"1\":{\"55\":1}}],[\"求起点\",{\"1\":{\"100\":1}}],[\"求方案数\",{\"1\":{\"96\":1}}],[\"求既是\",{\"1\":{\"91\":1}}],[\"求一个最小的非负整数\",{\"1\":{\"172\":1}}],[\"求一个序列中严格递增的子序列的最大长度\",{\"1\":{\"90\":1}}],[\"求一颗炸弹最多能炸掉地图上总价值为多少的目标\",{\"1\":{\"51\":1}}],[\"求解将哪些物品装入背包\",{\"1\":{\"87\":1}}],[\"求所选物品的总体积不超过背包容量的条件下\",{\"1\":{\"84\":1}}],[\"求区间和\",{\"1\":{\"49\":1}}],[\"求区间\",{\"1\":{\"49\":1}}],[\"求\",{\"0\":{\"35\":1},\"1\":{\"97\":1,\"169\":1,\"175\":1,\"178\":1,\"199\":2}}],[\"60\",{\"1\":{\"387\":1}}],[\"6010\",{\"1\":{\"102\":4}}],[\"64\",{\"1\":{\"172\":1}}],[\"6\",{\"0\":{\"35\":1,\"94\":1,\"98\":1,\"99\":1,\"100\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"150\":1,\"172\":1,\"187\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"237\":1,\"238\":1,\"403\":1,\"404\":1,\"405\":1},\"1\":{\"49\":1,\"61\":1,\"67\":9,\"77\":1,\"79\":1,\"89\":1,\"113\":1,\"115\":1,\"116\":1,\"126\":1,\"142\":1,\"173\":1,\"241\":1,\"242\":1,\"370\":3,\"395\":1,\"407\":1}}],[\"eurekamonitors\",{\"1\":{\"405\":1}}],[\"eurekaservercontext\",{\"1\":{\"401\":2}}],[\"eurekaservercontextholder\",{\"1\":{\"401\":4}}],[\"eurekaserverconfig\",{\"1\":{\"384\":4,\"387\":3,\"388\":1,\"390\":1,\"397\":1,\"399\":1,\"400\":1}}],[\"eurekatransport\",{\"1\":{\"395\":2}}],[\"eurekaclientconfig\",{\"1\":{\"394\":3}}],[\"eurekaclient\",{\"0\":{\"395\":1},\"1\":{\"394\":2,\"395\":1,\"397\":2,\"399\":1}}],[\"eurekaconfigbasedinstanceinfoprovider\",{\"1\":{\"390\":1,\"391\":1}}],[\"eurekainstanceconfig\",{\"1\":{\"391\":1}}],[\"eurekapropsfile\",{\"1\":{\"386\":3}}],[\"eurekabootstrap\",{\"1\":{\"382\":2,\"383\":1}}],[\"eureka\",{\"0\":{\"381\":1,\"384\":1,\"385\":1,\"393\":1,\"394\":1,\"405\":1},\"1\":{\"381\":1,\"382\":4,\"386\":10,\"387\":1,\"388\":1,\"390\":3,\"394\":7,\"395\":8,\"397\":3,\"402\":1,\"408\":1,\"409\":2}}],[\"eulers\",{\"1\":{\"168\":1}}],[\"euler\",{\"1\":{\"168\":7}}],[\"effect\",{\"1\":{\"377\":1}}],[\"e2\",{\"1\":{\"353\":4}}],[\"e1\",{\"1\":{\"353\":4}}],[\"each\",{\"1\":{\"349\":2}}],[\"envprops\",{\"1\":{\"386\":1}}],[\"envconfigfilename\",{\"1\":{\"386\":1}}],[\"environment\",{\"1\":{\"386\":4}}],[\"env\",{\"1\":{\"386\":2}}],[\"entry对象的一个集视图\",{\"1\":{\"349\":1}}],[\"entryset\",{\"1\":{\"349\":1}}],[\"entry<k\",{\"1\":{\"349\":1}}],[\"endpoint\",{\"1\":{\"375\":3}}],[\"endl\",{\"1\":{\"39\":2,\"49\":1,\"50\":2,\"51\":1,\"62\":2,\"66\":1,\"67\":1,\"75\":1,\"78\":1,\"79\":1,\"84\":2,\"85\":2,\"86\":4,\"87\":2,\"89\":2,\"90\":3,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":2,\"99\":1,\"100\":1,\"112\":1,\"118\":2,\"140\":1,\"156\":3,\"164\":1,\"177\":1,\"180\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1}}],[\"end\",{\"1\":{\"38\":1,\"42\":1,\"44\":4,\"90\":1,\"112\":4,\"118\":1,\"129\":3,\"130\":1,\"163\":1,\"210\":5,\"211\":5,\"219\":1,\"342\":4,\"344\":2,\"347\":1,\"356\":1}}],[\"equalsignorecase\",{\"1\":{\"344\":1}}],[\"equals\",{\"1\":{\"342\":1,\"344\":1,\"357\":1}}],[\"event\",{\"1\":{\"382\":1}}],[\"events\",{\"1\":{\"238\":1}}],[\"evanmiller\",{\"1\":{\"242\":1}}],[\"evan\",{\"1\":{\"242\":1}}],[\"e8\",{\"1\":{\"242\":2}}],[\"es\",{\"1\":{\"227\":2,\"247\":2,\"251\":7}}],[\"expiry\",{\"1\":{\"378\":1}}],[\"expire\",{\"1\":{\"232\":1}}],[\"exception\",{\"1\":{\"377\":4,\"378\":7,\"402\":1,\"407\":1}}],[\"executors\",{\"1\":{\"395\":1}}],[\"executable>\",{\"1\":{\"365\":1}}],[\"exe<\",{\"1\":{\"365\":1}}],[\"exe\",{\"1\":{\"364\":3,\"365\":6}}],[\"example\",{\"1\":{\"349\":3}}],[\"exgcd\",{\"1\":{\"171\":2,\"172\":3}}],[\"exit\",{\"1\":{\"34\":1}}],[\"e\",{\"1\":{\"133\":2,\"135\":1,\"136\":1,\"137\":1,\"141\":3,\"143\":3,\"144\":2,\"150\":2,\"151\":2,\"191\":4,\"192\":3,\"207\":3,\"347\":7,\"348\":6,\"350\":2,\"351\":4,\"352\":4,\"353\":4,\"357\":2,\"378\":2,\"386\":1}}],[\"edges为先修课程关系\",{\"1\":{\"338\":1}}],[\"edges\",{\"1\":{\"142\":4,\"149\":6,\"337\":2,\"338\":2}}],[\"edge\",{\"1\":{\"133\":1,\"142\":1,\"149\":2,\"337\":3,\"338\":3}}],[\"edit\",{\"1\":{\"93\":2}}],[\"erasure\",{\"1\":{\"370\":1}}],[\"erase\",{\"1\":{\"129\":1,\"210\":3}}],[\"error\",{\"1\":{\"31\":1}}],[\"eps\",{\"1\":{\"113\":3,\"173\":4}}],[\"empty\",{\"1\":{\"67\":1,\"194\":2,\"197\":2,\"210\":7,\"217\":1}}],[\"else\",{\"1\":{\"58\":1,\"61\":2,\"62\":4,\"90\":2,\"93\":1,\"94\":2,\"99\":1,\"106\":1,\"109\":1,\"110\":1,\"111\":1,\"113\":1,\"116\":2,\"129\":1,\"130\":1,\"146\":1,\"148\":1,\"149\":1,\"150\":1,\"175\":1,\"180\":1,\"182\":1,\"194\":1,\"197\":1,\"202\":1,\"216\":1,\"217\":1,\"219\":1,\"332\":2,\"377\":1}}],[\"elements\",{\"1\":{\"356\":2}}],[\"element\",{\"0\":{\"44\":2},\"1\":{\"44\":12,\"351\":1}}],[\"以m为底取n的对数\",{\"1\":{\"355\":1}}],[\"以10为底取对数\",{\"1\":{\"355\":1}}],[\"以e为底取对数\",{\"1\":{\"355\":1}}],[\"以便可以通过http访问\",{\"1\":{\"378\":1}}],[\"以便给其他节点搜索\",{\"1\":{\"337\":1}}],[\"以便于软件各部件之间的沟通\",{\"1\":{\"14\":1}}],[\"以升序数组的中间元素作为根节点\",{\"1\":{\"301\":1}}],[\"以统一的接口形式提供平台化的能力\",{\"1\":{\"252\":1}}],[\"以评论列表的访问为例\",{\"1\":{\"231\":1}}],[\"以及对数据安全的保障服务\",{\"1\":{\"369\":1}}],[\"以及存储桶索引\",{\"1\":{\"369\":1}}],[\"以及大量透穿导致的密集写\",{\"1\":{\"261\":1}}],[\"以及该评论的一些相关信息\",{\"1\":{\"257\":1}}],[\"以及通过缓存来保护下游\",{\"1\":{\"241\":1}}],[\"以及热评的热评\",{\"1\":{\"234\":1}}],[\"以及一个线段区间\",{\"1\":{\"218\":1}}],[\"以及所有阶乘取模的逆元infact\",{\"1\":{\"176\":1}}],[\"以second为第二关键字\",{\"1\":{\"210\":1}}],[\"以first为第一关键字\",{\"1\":{\"210\":1}}],[\"以内的素数表的话\",{\"1\":{\"160\":1}}],[\"以内的合数的最小质因数一定不超过\",{\"1\":{\"160\":1}}],[\"以k为终点的最短距离\",{\"1\":{\"100\":1}}],[\"以最快的速度给出答案\",{\"1\":{\"61\":1}}],[\"以\",{\"1\":{\"50\":1,\"121\":1,\"326\":1}}],[\"以下\",{\"1\":{\"49\":1,\"61\":1,\"68\":1}}],[\"以防爆栈风险\",{\"1\":{\"34\":1}}],[\"备份\",{\"1\":{\"34\":1,\"79\":1}}],[\"开源的\",{\"1\":{\"369\":1}}],[\"开源协议\",{\"1\":{\"368\":1}}],[\"开源项目\",{\"0\":{\"18\":1}}],[\"开立方\",{\"1\":{\"355\":1}}],[\"开平方\",{\"1\":{\"355\":1}}],[\"开放寻址法\",{\"0\":{\"208\":1}}],[\"开一个单链表\",{\"1\":{\"133\":1}}],[\"开递递归枚举\",{\"1\":{\"79\":1}}],[\"开始指定大小capacity\",{\"1\":{\"353\":1}}],[\"开始扩散\",{\"1\":{\"332\":2}}],[\"开始进行广度优先搜索\",{\"1\":{\"307\":1}}],[\"开始\",{\"1\":{\"61\":2,\"95\":1,\"205\":1,\"314\":1}}],[\"开始枚举前缀和数组\",{\"1\":{\"50\":1}}],[\"开栈空间代码\",{\"0\":{\"34\":1}}],[\"bmin\",{\"1\":{\"358\":1}}],[\"bmax\",{\"1\":{\"358\":1}}],[\"bm−2\",{\"1\":{\"176\":2}}],[\"b3\",{\"1\":{\"344\":1}}],[\"b2\",{\"1\":{\"344\":2}}],[\"b1\",{\"1\":{\"344\":1}}],[\"bst\",{\"1\":{\"300\":1}}],[\"bsearch\",{\"1\":{\"109\":1,\"110\":1,\"113\":1}}],[\"blob\",{\"1\":{\"370\":1}}],[\"blog\",{\"1\":{\"408\":1},\"2\":{\"267\":1}}],[\"bloom\",{\"1\":{\"241\":1}}],[\"bucketlist\",{\"1\":{\"377\":2}}],[\"bucket已经存在\",{\"1\":{\"377\":1}}],[\"bucketname\",{\"1\":{\"377\":5}}],[\"bucketexistsargs\",{\"1\":{\"377\":2}}],[\"bucketexists\",{\"1\":{\"377\":3}}],[\"bucket\",{\"0\":{\"377\":1},\"1\":{\"262\":1,\"369\":2,\"375\":6,\"377\":10,\"378\":7}}],[\"builder\",{\"1\":{\"375\":1,\"377\":5,\"378\":7,\"391\":5}}],[\"buildgraph\",{\"1\":{\"337\":1}}],[\"build\",{\"0\":{\"421\":1},\"1\":{\"261\":1,\"375\":1,\"377\":5,\"378\":7,\"391\":1,\"395\":3}}],[\"binarysearch\",{\"1\":{\"356\":1}}],[\"binlog\",{\"1\":{\"229\":1,\"232\":4,\"247\":1,\"251\":1}}],[\"bi​\",{\"1\":{\"336\":2}}],[\"bilibili\",{\"1\":{\"242\":2}}],[\"bitmap\",{\"1\":{\"231\":1}}],[\"bitset<10000>\",{\"1\":{\"210\":1}}],[\"bitset\",{\"1\":{\"210\":1}}],[\"bit\",{\"1\":{\"126\":1}}],[\"bff\",{\"0\":{\"252\":1},\"1\":{\"247\":3,\"252\":1}}],[\"bff层实现了页面请求级的热点本地缓存\",{\"1\":{\"234\":1}}],[\"bff层负责组织业务数据模型\",{\"1\":{\"226\":1}}],[\"bfs\",{\"0\":{\"66\":1,\"67\":1,\"307\":1},\"1\":{\"66\":2,\"67\":2,\"307\":2,\"331\":1,\"332\":2},\"2\":{\"73\":1,\"310\":1,\"334\":1}}],[\"b站竟成为最大赢家\",{\"1\":{\"242\":1}}],[\"b站评论区流量巨大\",{\"1\":{\"242\":1}}],[\"b站评论系统历史悠久\",{\"1\":{\"226\":1}}],[\"b站评论系统架构设计\",{\"0\":{\"221\":1},\"1\":{\"221\":1}}],[\"b站的评论系统逐渐组件化\",{\"1\":{\"222\":1}}],[\"b∗x\",{\"1\":{\"176\":1}}],[\"b−1\",{\"1\":{\"176\":1}}],[\"b=0\",{\"1\":{\"171\":1}}],[\"b=0\",{\"1\":{\"171\":1}}],[\"b=cn−ca\",{\"1\":{\"79\":1}}],[\"b是否连通的方法为\",{\"1\":{\"149\":1}}],[\"b不连通\",{\"1\":{\"149\":1}}],[\"b表示入点\",{\"1\":{\"142\":1}}],[\"be\",{\"1\":{\"386\":1}}],[\"bean\",{\"1\":{\"375\":2}}],[\"bellman\",{\"0\":{\"142\":1},\"1\":{\"139\":1,\"142\":2}}],[\"begin\",{\"1\":{\"38\":1,\"42\":1,\"44\":6,\"90\":1,\"112\":4,\"118\":1,\"129\":2,\"130\":1,\"163\":1,\"210\":4,\"211\":6,\"219\":1,\"342\":5,\"344\":3}}],[\"break\",{\"1\":{\"99\":1,\"150\":2,\"161\":1,\"168\":1,\"178\":1,\"180\":1,\"218\":2}}],[\"b​\",{\"1\":{\"94\":1,\"160\":4}}],[\"balance\",{\"1\":{\"241\":1}}],[\"base\",{\"1\":{\"97\":8,\"365\":3}}],[\"back\",{\"1\":{\"86\":2,\"90\":3,\"97\":2,\"99\":1,\"115\":4,\"116\":5,\"117\":4,\"118\":4,\"130\":2,\"133\":2,\"157\":2,\"163\":2,\"178\":3,\"210\":7,\"219\":3,\"319\":1}}],[\"backup\",{\"1\":{\"79\":5,\"142\":2}}],[\"bar\",{\"1\":{\"43\":2}}],[\"bob\",{\"1\":{\"344\":1}}],[\"bound\",{\"1\":{\"90\":1,\"112\":6,\"210\":8,\"211\":7}}],[\"bool\",{\"1\":{\"69\":1,\"76\":1,\"79\":2,\"97\":1,\"99\":2,\"113\":1,\"116\":1,\"137\":1,\"140\":1,\"141\":1,\"143\":1,\"144\":2,\"148\":1,\"149\":1,\"150\":3,\"151\":2,\"155\":1,\"157\":1,\"159\":1,\"160\":2,\"161\":1,\"168\":1,\"178\":1,\"207\":1,\"211\":2,\"215\":1,\"216\":1,\"217\":1,\"218\":2}}],[\"boolean\",{\"1\":{\"25\":2,\"287\":2,\"289\":3,\"295\":2,\"338\":6,\"377\":2}}],[\"body是函数体\",{\"1\":{\"43\":1}}],[\"body\",{\"1\":{\"43\":1}}],[\"byte\",{\"1\":{\"344\":5,\"358\":2}}],[\"by\",{\"1\":{\"36\":2,\"171\":3,\"231\":2,\"232\":1,\"241\":2,\"242\":2,\"257\":2,\"365\":1}}],[\"b代表进制位数\",{\"1\":{\"33\":1}}],[\"b\",{\"0\":{\"35\":1},\"1\":{\"33\":1,\"36\":3,\"45\":1,\"61\":5,\"67\":2,\"79\":8,\"86\":4,\"91\":6,\"92\":8,\"93\":3,\"94\":6,\"97\":8,\"102\":4,\"112\":4,\"115\":14,\"116\":28,\"117\":11,\"118\":11,\"122\":2,\"126\":5,\"133\":12,\"140\":8,\"141\":2,\"142\":9,\"143\":3,\"146\":1,\"148\":5,\"149\":6,\"160\":13,\"164\":2,\"165\":7,\"169\":2,\"171\":17,\"172\":9,\"175\":2,\"176\":13,\"177\":16,\"178\":8,\"203\":2,\"204\":1,\"205\":4,\"211\":6,\"245\":1,\"257\":1,\"294\":2,\"338\":1,\"344\":7,\"347\":1,\"355\":4,\"382\":2}}],[\"秦九韶算法\",{\"0\":{\"33\":1}}],[\"404\",{\"1\":{\"415\":1}}],[\"406920470238773354\",{\"1\":{\"242\":1}}],[\"4\",{\"0\":{\"33\":1,\"70\":1,\"87\":1,\"92\":1,\"96\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":2,\"123\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":2,\"144\":1,\"145\":1,\"146\":1,\"169\":1,\"178\":1,\"185\":1,\"199\":1,\"218\":1,\"228\":1,\"231\":1,\"232\":1,\"388\":1,\"396\":1,\"397\":1,\"402\":1},\"1\":{\"44\":1,\"45\":2,\"49\":1,\"50\":2,\"61\":2,\"62\":4,\"66\":3,\"67\":12,\"77\":6,\"89\":3,\"92\":1,\"115\":1,\"116\":1,\"126\":7,\"142\":1,\"143\":1,\"159\":1,\"191\":1,\"205\":2,\"211\":1,\"223\":2,\"231\":2,\"234\":1,\"240\":1,\"241\":1,\"242\":1,\"307\":1,\"330\":1,\"332\":1,\"388\":1,\"395\":1}}],[\"<br>\",{\"1\":{\"386\":1}}],[\"<bit\",{\"1\":{\"102\":1}}],[\"<bits\",{\"1\":{\"97\":1,\"148\":1,\"149\":1}}],[\"<version>8\",{\"1\":{\"374\":1}}],[\"<vector>\",{\"1\":{\"86\":1,\"90\":1,\"99\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"164\":1,\"219\":1}}],[\"<groupid>io\",{\"1\":{\"374\":1}}],[\"<dependency>\",{\"1\":{\"374\":1}}],[\"<description>minio文件存储服务<\",{\"1\":{\"365\":1}}],[\"<zipdateformat>yyyymmdd<\",{\"1\":{\"365\":1}}],[\"<zipolderthannumdays>5<zipolderthannumdays>\",{\"1\":{\"365\":1}}],[\"<pattern>yyyymmdd<\",{\"1\":{\"365\":1}}],[\"<pii>\",{\"1\":{\"219\":1}}],[\"<sizethreshold>10240<\",{\"1\":{\"365\":1}}],[\"<service>\",{\"1\":{\"365\":1}}],[\"<log\",{\"1\":{\"365\":1}}],[\"<logpath>\",{\"1\":{\"365\":1}}],[\"<artifactid>minio<\",{\"1\":{\"374\":1}}],[\"<arguments>server\",{\"1\":{\"365\":1}}],[\"<autorollattime>00\",{\"1\":{\"365\":1}}],[\"<algortihm>\",{\"1\":{\"140\":1}}],[\"<algorithm>\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"66\":1,\"67\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"84\":1,\"85\":1,\"86\":3,\"87\":2,\"89\":1,\"90\":3,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"99\":1,\"112\":1,\"118\":1,\"164\":1,\"172\":1,\"182\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1}}],[\"<executable>\",{\"1\":{\"365\":1}}],[\"<name>minio\",{\"1\":{\"365\":1}}],[\"<id>minio\",{\"1\":{\"365\":1}}],[\"<iostream>\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"61\":1,\"62\":1,\"66\":1,\"67\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"84\":1,\"85\":1,\"86\":3,\"87\":2,\"89\":1,\"90\":3,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"99\":1,\"112\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"127\":2,\"140\":1,\"164\":1,\"172\":1,\"182\":1,\"199\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1}}],[\"<unordered\",{\"1\":{\"67\":1,\"164\":1}}],[\"<queue>\",{\"1\":{\"66\":1,\"67\":1,\"217\":1}}],[\"<cstdlib>\",{\"1\":{\"61\":1}}],[\"<cstdio>\",{\"1\":{\"61\":1,\"62\":1,\"84\":1,\"85\":1,\"86\":1,\"90\":2,\"219\":1}}],[\"<cstring>\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"66\":1,\"67\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"86\":2,\"87\":2,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"99\":1,\"140\":1}}],[\"<<\",{\"1\":{\"39\":5,\"49\":2,\"50\":4,\"51\":2,\"62\":4,\"66\":2,\"67\":2,\"75\":3,\"76\":2,\"77\":2,\"78\":2,\"79\":2,\"84\":4,\"85\":4,\"86\":8,\"87\":4,\"89\":4,\"90\":6,\"91\":2,\"92\":2,\"93\":2,\"94\":2,\"95\":2,\"96\":4,\"99\":7,\"100\":4,\"112\":2,\"118\":4,\"125\":1,\"126\":2,\"127\":3,\"140\":2,\"156\":9,\"164\":2,\"177\":2,\"180\":3,\"210\":1,\"215\":2,\"216\":2,\"217\":2,\"218\":2,\"219\":2}}],[\"<=\",{\"1\":{\"33\":1,\"49\":1,\"50\":2,\"51\":5,\"57\":1,\"61\":3,\"62\":2,\"66\":4,\"69\":1,\"76\":2,\"77\":2,\"78\":1,\"79\":3,\"84\":5,\"85\":5,\"86\":11,\"87\":3,\"89\":7,\"90\":4,\"91\":2,\"92\":5,\"93\":5,\"94\":4,\"95\":6,\"96\":5,\"97\":13,\"99\":1,\"102\":2,\"106\":5,\"110\":2,\"111\":1,\"133\":2,\"137\":2,\"140\":2,\"142\":1,\"144\":1,\"146\":5,\"148\":3,\"149\":1,\"150\":1,\"151\":1,\"155\":1,\"156\":1,\"157\":3,\"159\":2,\"161\":2,\"163\":1,\"164\":1,\"167\":1,\"168\":2,\"173\":1,\"175\":1,\"177\":3,\"178\":2,\"195\":1,\"197\":1,\"198\":2,\"199\":2,\"202\":1,\"203\":1,\"204\":1,\"205\":2,\"209\":1,\"215\":2,\"216\":3,\"218\":1,\"257\":1,\"314\":2,\"319\":1,\"332\":2}}],[\"<\",{\"1\":{\"32\":1,\"66\":1,\"67\":4,\"69\":1,\"75\":1,\"77\":1,\"78\":3,\"86\":2,\"87\":5,\"90\":8,\"93\":2,\"95\":1,\"97\":1,\"99\":5,\"100\":5,\"102\":1,\"105\":4,\"106\":1,\"109\":1,\"110\":1,\"112\":2,\"115\":4,\"116\":5,\"117\":2,\"128\":2,\"129\":1,\"130\":1,\"133\":2,\"140\":1,\"142\":2,\"148\":3,\"149\":4,\"155\":1,\"160\":5,\"172\":1,\"173\":7,\"175\":1,\"176\":1,\"177\":3,\"178\":4,\"180\":3,\"198\":1,\"202\":1,\"205\":3,\"211\":3,\"215\":2,\"216\":2,\"217\":4,\"218\":6,\"219\":2,\"289\":2,\"306\":4,\"307\":5,\"308\":6,\"319\":2,\"332\":9,\"337\":1,\"338\":2,\"344\":1,\"365\":3,\"374\":1}}],[\"fetch\",{\"1\":{\"395\":2}}],[\"feed\",{\"1\":{\"241\":4}}],[\"fmin\",{\"1\":{\"358\":1}}],[\"fmax\",{\"1\":{\"358\":1}}],[\"fresh++\",{\"1\":{\"332\":2}}],[\"fresh\",{\"1\":{\"331\":3,\"332\":6}}],[\"from=search\",{\"1\":{\"242\":1}}],[\"from=333\",{\"1\":{\"242\":2}}],[\"from\",{\"1\":{\"231\":5,\"238\":2,\"257\":2,\"337\":3,\"338\":2}}],[\"front\",{\"1\":{\"66\":1,\"67\":1,\"136\":1,\"143\":2,\"144\":1,\"210\":5}}],[\"fulltext\",{\"1\":{\"247\":1}}],[\"fact\",{\"1\":{\"176\":3}}],[\"factor\",{\"1\":{\"157\":1}}],[\"fabs\",{\"1\":{\"173\":2}}],[\"father\",{\"1\":{\"133\":2}}],[\"fa\",{\"1\":{\"57\":3,\"58\":6,\"59\":1,\"61\":7,\"62\":10}}],[\"false\",{\"1\":{\"24\":1,\"25\":2,\"69\":1,\"76\":1,\"79\":5,\"97\":1,\"99\":2,\"143\":1,\"144\":2,\"150\":3,\"151\":2,\"155\":2,\"157\":1,\"160\":1,\"169\":2,\"207\":1,\"218\":1,\"287\":2,\"289\":1,\"294\":2,\"336\":1,\"337\":1,\"338\":2,\"382\":1,\"395\":3}}],[\"f\",{\"1\":{\"45\":4,\"84\":12,\"85\":11,\"86\":19,\"87\":10,\"89\":11,\"90\":9,\"91\":14,\"92\":7,\"93\":13,\"94\":22,\"95\":7,\"96\":25,\"97\":7,\"99\":8,\"100\":12,\"102\":12,\"218\":3,\"313\":2,\"314\":12}}],[\"flip\",{\"1\":{\"210\":2}}],[\"flag\",{\"1\":{\"150\":3,\"261\":2}}],[\"floor\",{\"1\":{\"232\":1,\"257\":3,\"355\":1}}],[\"floor=\",{\"1\":{\"231\":1}}],[\"floyd算法\",{\"0\":{\"146\":1}}],[\"float>\",{\"1\":{\"45\":2}}],[\"float\",{\"1\":{\"45\":4,\"358\":2}}],[\"flush\",{\"1\":{\"37\":4}}],[\"found\",{\"1\":{\"408\":1,\"415\":1}}],[\"fond\",{\"1\":{\"58\":1}}],[\"foo\",{\"1\":{\"43\":2}}],[\"foreach\",{\"1\":{\"377\":1,\"378\":1}}],[\"format\",{\"1\":{\"344\":2}}],[\"formatted\",{\"1\":{\"344\":2}}],[\"ford算法擅长解决有边数限制的最短路问题\",{\"1\":{\"142\":1}}],[\"ford算法\",{\"0\":{\"142\":1}}],[\"ford算法的优化\",{\"1\":{\"139\":1}}],[\"ford\",{\"1\":{\"139\":1,\"142\":1}}],[\"for\",{\"0\":{\"416\":1},\"1\":{\"32\":1,\"33\":2,\"38\":1,\"40\":1,\"43\":1,\"49\":1,\"50\":2,\"51\":5,\"57\":1,\"61\":3,\"62\":2,\"66\":3,\"67\":2,\"69\":2,\"75\":1,\"76\":2,\"77\":2,\"78\":2,\"79\":3,\"84\":5,\"85\":5,\"86\":14,\"87\":9,\"89\":9,\"90\":8,\"91\":2,\"92\":5,\"93\":6,\"94\":4,\"95\":7,\"96\":5,\"97\":16,\"99\":7,\"100\":5,\"102\":3,\"106\":1,\"112\":2,\"115\":4,\"116\":6,\"117\":3,\"118\":3,\"127\":1,\"128\":1,\"130\":1,\"133\":5,\"135\":1,\"136\":1,\"137\":2,\"140\":3,\"141\":1,\"142\":5,\"143\":1,\"144\":2,\"146\":5,\"148\":5,\"149\":2,\"150\":2,\"151\":2,\"155\":1,\"156\":1,\"157\":3,\"159\":2,\"160\":5,\"161\":2,\"163\":1,\"164\":2,\"167\":1,\"168\":2,\"172\":1,\"173\":9,\"175\":2,\"176\":1,\"177\":1,\"178\":6,\"180\":3,\"195\":1,\"198\":1,\"199\":2,\"200\":2,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"207\":1,\"209\":1,\"215\":2,\"216\":2,\"217\":2,\"218\":2,\"219\":2,\"277\":1,\"289\":2,\"306\":2,\"307\":3,\"308\":4,\"314\":2,\"319\":2,\"332\":7,\"337\":3,\"338\":4,\"349\":5}}],[\"final\",{\"1\":{\"386\":1}}],[\"find\",{\"1\":{\"40\":1,\"55\":1,\"58\":3,\"59\":2,\"61\":6,\"62\":9,\"67\":1,\"111\":1,\"129\":1,\"149\":6,\"151\":3,\"202\":4,\"203\":6,\"204\":5,\"207\":1,\"208\":1,\"210\":2,\"308\":6,\"386\":1}}],[\"fileoutputstream\",{\"1\":{\"378\":1}}],[\"filename\",{\"1\":{\"378\":1}}],[\"fileinputstream\",{\"1\":{\"378\":1}}],[\"file\",{\"1\":{\"378\":5,\"386\":5,\"394\":1}}],[\"fill\",{\"1\":{\"356\":1}}],[\"filter\",{\"1\":{\"241\":1,\"247\":2}}],[\"first存储距离\",{\"1\":{\"141\":1}}],[\"first\",{\"1\":{\"42\":2,\"66\":2,\"130\":2,\"141\":1,\"164\":1,\"210\":2,\"219\":2,\"319\":2,\"348\":1,\"357\":1}}],[\"fflush\",{\"1\":{\"37\":1}}],[\"在这个路径下\",{\"1\":{\"382\":1}}],[\"在这种情况下\",{\"1\":{\"369\":1}}],[\"在服务安装后\",{\"1\":{\"370\":1}}],[\"在很早的时候就采用了\",{\"1\":{\"370\":1}}],[\"在标准硬件上\",{\"1\":{\"370\":1}}],[\"在同目录下创建\",{\"1\":{\"365\":1}}],[\"在同一行用空格隔开\",{\"1\":{\"77\":1}}],[\"在浏览器输入\",{\"1\":{\"364\":1}}],[\"在堆中加入元素\",{\"1\":{\"353\":1}}],[\"在map中若存在value\",{\"1\":{\"349\":1}}],[\"在map中若存在key\",{\"1\":{\"349\":1}}],[\"在map中加入键值对<key\",{\"1\":{\"349\":1}}],[\"在treeset类中\",{\"1\":{\"348\":1}}],[\"在集合中删除元素e\",{\"1\":{\"348\":1}}],[\"在集合中添加元素e\",{\"1\":{\"348\":1}}],[\"在index位置插一个元素e\",{\"1\":{\"347\":1}}],[\"在尾部添加一个元素e\",{\"1\":{\"347\":1}}],[\"在一段时间内不会让其他应用获取注册信息\",{\"1\":{\"397\":1}}],[\"在一次搜索中\",{\"1\":{\"337\":1}}],[\"在一个\",{\"1\":{\"67\":1}}],[\"在一个数组中查找最长的相同连续子序列\",{\"0\":{\"32\":1}}],[\"在搜索完当前所能走到的所有节点后\",{\"1\":{\"337\":1}}],[\"在学习课程\",{\"1\":{\"337\":1}}],[\"在选修某些课程之前需要一些先修课程\",{\"1\":{\"336\":1}}],[\"在全为烂橘子的情况下要返回\",{\"1\":{\"331\":1}}],[\"在每层遍历的时候\",{\"1\":{\"331\":1}}],[\"在每一结点可以选择移动至其左下方的结点或移动至其右下方的结点\",{\"1\":{\"89\":1}}],[\"在给定的\",{\"1\":{\"330\":1}}],[\"在两个字符串上游走\",{\"1\":{\"313\":1}}],[\"在两个迭代器\",{\"1\":{\"211\":1}}],[\"在之前的搜索中已经加入到集合了\",{\"1\":{\"308\":1}}],[\"在并查集中进行合并\",{\"1\":{\"308\":1}}],[\"在广度优先搜索的过程中\",{\"1\":{\"307\":1}}],[\"在递归判断过程中存在短路现象\",{\"1\":{\"294\":1}}],[\"在递归的方法中\",{\"1\":{\"271\":1}}],[\"在检索之前已经插入\",{\"1\":{\"287\":1}}],[\"在前缀树中\",{\"1\":{\"287\":1}}],[\"在前期花足够时间去反复思考设计\",{\"1\":{\"246\":1}}],[\"在内存中使用\",{\"1\":{\"262\":1}}],[\"在\",{\"1\":{\"257\":1,\"331\":1,\"362\":1,\"365\":1,\"375\":1,\"387\":1}}],[\"在写入要尽可能的顺序自增\",{\"1\":{\"257\":1}}],[\"在入\",{\"1\":{\"251\":1}}],[\"在动手设计前\",{\"1\":{\"246\":1}}],[\"在工程上实现了架构的统一\",{\"1\":{\"241\":1}}],[\"在工程落地层面尽可能还原理想的排序算法设计\",{\"1\":{\"241\":1}}],[\"在楼中楼\",{\"1\":{\"241\":1}}],[\"在评论数过百万甚至千万的评论区\",{\"1\":{\"241\":1}}],[\"在架构上\",{\"1\":{\"241\":1}}],[\"在系统设计上也提出了不同层面的要求\",{\"1\":{\"241\":1}}],[\"在a事务中读取的评论状态\",{\"1\":{\"238\":1}}],[\"在设计层面主要有两方面实践\",{\"1\":{\"237\":1}}],[\"在客户端不能展现\",{\"1\":{\"237\":1}}],[\"在功能层面\",{\"1\":{\"235\":1}}],[\"在上一级缓存未命中或者出现网络错误后\",{\"1\":{\"235\":1}}],[\"在读取评论区基础信息阶段探测热点\",{\"1\":{\"234\":1}}],[\"在吞吐方面具备更大的弹性\",{\"1\":{\"234\":1}}],[\"在处理完一些必要校验逻辑之后\",{\"1\":{\"229\":1}}],[\"在b站\",{\"1\":{\"222\":1}}],[\"在有序\",{\"1\":{\"211\":2}}],[\"在有向图游戏中\",{\"1\":{\"186\":1}}],[\"在哈希表中查询某个数是否存在\",{\"1\":{\"207\":1}}],[\"在满足\",{\"1\":{\"199\":1}}],[\"在节点k的右边插入一个数x\",{\"1\":{\"192\":1}}],[\"在算法竞赛中一般不需要考虑删除的那个节点该如何处理\",{\"1\":{\"191\":1}}],[\"在链表头插入一个数a\",{\"1\":{\"191\":1}}],[\"在起点上放有一枚棋子\",{\"1\":{\"184\":1}}],[\"在游戏进程的任意时刻\",{\"1\":{\"183\":1}}],[\"在游戏过程中\",{\"1\":{\"67\":1}}],[\"在图论中\",{\"1\":{\"147\":1,\"151\":1}}],[\"在图中选择若干条边把图中的所有节点连接起来\",{\"1\":{\"147\":1}}],[\"在保存最短路径的数组中\",{\"1\":{\"143\":1}}],[\"在还未确定最短路的点中\",{\"1\":{\"140\":1}}],[\"在所有子节点更新后再更新\",{\"1\":{\"102\":1}}],[\"在字符串\",{\"1\":{\"94\":1}}],[\"在字符串中的位置\",{\"1\":{\"67\":1}}],[\"在网格中的位置\",{\"1\":{\"67\":1}}],[\"在由\",{\"1\":{\"32\":1}}],[\"在构造或者拼接\",{\"1\":{\"31\":1}}],[\"=p\",{\"1\":{\"199\":1}}],[\"=1\",{\"1\":{\"171\":1}}],[\"=10\",{\"1\":{\"97\":2}}],[\"=n×p1​p1​−1​×p2​p2​−1​×\",{\"1\":{\"167\":1}}],[\"=>\",{\"1\":{\"160\":1}}],[\"=∑u=sons​dp\",{\"1\":{\"102\":1}}],[\"=∑u=sons​max\",{\"1\":{\"102\":1}}],[\"=0\",{\"1\":{\"100\":1}}],[\"=f\",{\"1\":{\"96\":1}}],[\"=\",{\"1\":{\"31\":1,\"32\":3,\"33\":5,\"36\":3,\"38\":3,\"39\":8,\"40\":1,\"43\":8,\"44\":9,\"45\":1,\"49\":6,\"50\":9,\"51\":9,\"57\":2,\"58\":1,\"59\":3,\"61\":8,\"62\":14,\"66\":11,\"67\":14,\"69\":6,\"75\":6,\"76\":7,\"77\":5,\"78\":8,\"79\":12,\"84\":9,\"85\":9,\"86\":28,\"87\":13,\"89\":17,\"90\":26,\"91\":7,\"92\":12,\"93\":16,\"94\":13,\"95\":18,\"96\":16,\"97\":29,\"99\":15,\"100\":10,\"102\":6,\"105\":5,\"106\":12,\"108\":1,\"109\":5,\"110\":5,\"111\":4,\"112\":5,\"113\":4,\"115\":12,\"116\":20,\"117\":8,\"118\":8,\"120\":2,\"121\":1,\"122\":1,\"123\":2,\"126\":31,\"127\":10,\"128\":3,\"129\":5,\"130\":8,\"133\":14,\"135\":5,\"136\":7,\"137\":10,\"140\":12,\"141\":14,\"142\":8,\"143\":15,\"144\":11,\"146\":8,\"148\":17,\"149\":19,\"150\":8,\"151\":8,\"155\":1,\"156\":3,\"157\":8,\"159\":5,\"160\":10,\"161\":6,\"163\":2,\"164\":11,\"167\":5,\"168\":11,\"169\":5,\"171\":9,\"172\":10,\"173\":16,\"175\":4,\"176\":8,\"177\":10,\"178\":17,\"179\":1,\"180\":12,\"182\":2,\"185\":1,\"186\":2,\"187\":1,\"191\":10,\"192\":10,\"194\":2,\"195\":3,\"197\":3,\"198\":4,\"199\":12,\"200\":9,\"202\":9,\"203\":6,\"204\":8,\"205\":10,\"207\":8,\"208\":4,\"209\":4,\"210\":1,\"211\":4,\"215\":6,\"216\":7,\"217\":4,\"218\":13,\"219\":9,\"257\":3,\"276\":2,\"277\":6,\"283\":4,\"289\":17,\"301\":4,\"306\":8,\"307\":17,\"308\":12,\"314\":9,\"319\":4,\"326\":4,\"331\":1,\"332\":31,\"336\":1,\"337\":6,\"338\":13,\"344\":16,\"345\":1,\"347\":4,\"348\":3,\"349\":4,\"350\":2,\"351\":1,\"352\":1,\"353\":4,\"358\":14,\"375\":1,\"377\":5,\"378\":8,\"382\":3,\"384\":1,\"386\":6,\"390\":1,\"391\":2,\"394\":2,\"395\":4,\"397\":5,\"399\":1,\"400\":1,\"401\":1,\"404\":1}}],[\"==\",{\"1\":{\"25\":6,\"32\":2,\"38\":1,\"43\":1,\"49\":5,\"50\":2,\"58\":2,\"61\":2,\"62\":6,\"66\":2,\"67\":1,\"69\":1,\"75\":2,\"78\":1,\"91\":2,\"92\":1,\"93\":1,\"94\":2,\"95\":1,\"99\":1,\"116\":1,\"117\":1,\"118\":1,\"126\":3,\"137\":2,\"140\":2,\"141\":1,\"142\":1,\"143\":1,\"146\":1,\"148\":3,\"149\":3,\"150\":3,\"151\":1,\"155\":1,\"156\":2,\"157\":3,\"161\":2,\"163\":1,\"164\":1,\"167\":2,\"168\":2,\"178\":1,\"199\":3,\"207\":1,\"208\":1,\"210\":1,\"211\":1,\"276\":1,\"277\":1,\"283\":1,\"289\":2,\"295\":4,\"306\":2,\"307\":2,\"308\":6,\"314\":1,\"326\":1,\"332\":6,\"382\":2}}],[\"如用户\",{\"1\":{\"369\":1}}],[\"如启动信息\",{\"1\":{\"362\":1}}],[\"如上图所示\",{\"1\":{\"257\":1}}],[\"如上图\",{\"1\":{\"247\":1,\"257\":1}}],[\"如何实现\",{\"0\":{\"412\":1}}],[\"如何翻转二叉树\",{\"1\":{\"325\":1}}],[\"如何只交给同进程内\",{\"1\":{\"261\":1}}],[\"如何对文章下面的评论做排序\",{\"1\":{\"242\":1}}],[\"如何在b站评论区脱颖而出\",{\"1\":{\"240\":1,\"242\":1}}],[\"如粉丝勋章\",{\"1\":{\"235\":1}}],[\"如审核\",{\"1\":{\"235\":1}}],[\"如下图\",{\"1\":{\"262\":1}}],[\"如下图所示\",{\"1\":{\"231\":1}}],[\"如下所示\",{\"1\":{\"62\":1,\"68\":1,\"387\":1}}],[\"如同调味剂\",{\"1\":{\"222\":1}}],[\"如汽车\",{\"1\":{\"222\":1}}],[\"如点\",{\"1\":{\"142\":1}}],[\"如题\",{\"1\":{\"62\":1}}],[\"如\",{\"1\":{\"61\":1,\"143\":1,\"199\":1,\"232\":1}}],[\"如有必要\",{\"1\":{\"42\":1}}],[\"如需输出string对象中的字符串\",{\"1\":{\"31\":1}}],[\"如果应用丢失续约的占比在一定时间内超过了设定的百分比\",{\"1\":{\"397\":1}}],[\"如果获取失败了\",{\"1\":{\"397\":1}}],[\"如果在配置文件中定义了\",{\"1\":{\"395\":1}}],[\"如果在这一轮的匹配中\",{\"1\":{\"151\":1}}],[\"如果配置文件没有配置\",{\"1\":{\"388\":1}}],[\"如果配置文件中没有配置\",{\"1\":{\"387\":1}}],[\"如果是用接口的方式\",{\"1\":{\"384\":1}}],[\"如果是\",{\"1\":{\"370\":1}}],[\"如果是相同的树\",{\"1\":{\"25\":1}}],[\"如果发现k\",{\"1\":{\"349\":1}}],[\"如果map中有key\",{\"1\":{\"349\":1}}],[\"如果修改了原list的大小\",{\"1\":{\"347\":1}}],[\"如果已经有\",{\"1\":{\"344\":1}}],[\"如果已经使用了\",{\"1\":{\"43\":1}}],[\"如果没有\",{\"1\":{\"344\":1}}],[\"如果没有在树中\",{\"1\":{\"148\":1}}],[\"如果end大于arr\",{\"1\":{\"342\":1}}],[\"如果找到\",{\"1\":{\"356\":1}}],[\"如果找到了环\",{\"1\":{\"338\":1}}],[\"如果找到则返回\",{\"1\":{\"25\":1}}],[\"如果可以\",{\"1\":{\"336\":1}}],[\"如果一个位置为\",{\"1\":{\"307\":1,\"308\":1}}],[\"如果一个图的某个匹配中\",{\"1\":{\"151\":1}}],[\"如果前面的值返回\",{\"1\":{\"294\":1}}],[\"如果要使用\",{\"1\":{\"365\":1}}],[\"如果要查找一个完整的字符串\",{\"1\":{\"288\":1}}],[\"如果要插在k的左边\",{\"1\":{\"192\":1}}],[\"如果之前已经插入的字符串\",{\"1\":{\"287\":1}}],[\"如果字符串\",{\"1\":{\"287\":1}}],[\"如果字符串长度很大\",{\"1\":{\"31\":1}}],[\"如果和\",{\"1\":{\"257\":1}}],[\"如果为\",{\"1\":{\"257\":1}}],[\"如果为无穷大\",{\"1\":{\"140\":1}}],[\"如果短时间内多个服务节点的大量请求缓存未命中\",{\"1\":{\"229\":1}}],[\"如果两个数组长度相同\",{\"1\":{\"342\":1}}],[\"如果两个连通块不连通\",{\"1\":{\"149\":1}}],[\"如果两区间无法合并\",{\"1\":{\"219\":1}}],[\"如果所有右端点都小于l\",{\"1\":{\"218\":1}}],[\"如果所有点都入队了\",{\"1\":{\"137\":1}}],[\"如果到了末尾\",{\"1\":{\"208\":1}}],[\"如果x不在哈希表中\",{\"1\":{\"208\":1}}],[\"如果x在哈希表中\",{\"1\":{\"208\":1}}],[\"如果比父节点大\",{\"1\":{\"205\":1}}],[\"如果它本身不是最小的数\",{\"1\":{\"205\":1}}],[\"如果它们都包含一段位置不一定连续的数\",{\"1\":{\"92\":1}}],[\"如果窗口满足条件\",{\"1\":{\"198\":1}}],[\"如果取模的数是质数\",{\"1\":{\"176\":1}}],[\"如果满足条件再输出结果\",{\"1\":{\"198\":1}}],[\"如果满足\",{\"1\":{\"176\":1}}],[\"如果当前数能整除目标数\",{\"1\":{\"163\":1}}],[\"如果当前节点走过了\",{\"1\":{\"338\":1}}],[\"如果当前节点\",{\"1\":{\"288\":2}}],[\"如果当前节点与\",{\"1\":{\"25\":1}}],[\"如果当前节点是空节点\",{\"1\":{\"25\":1}}],[\"如果最后\",{\"1\":{\"156\":1}}],[\"如果最高位有数\",{\"1\":{\"115\":1}}],[\"如果这个点未被匹配\",{\"1\":{\"151\":1}}],[\"如果你在调用了sublist返回了子list之后\",{\"1\":{\"347\":1}}],[\"如果你想找的妹子已经有了男朋友\",{\"1\":{\"151\":1}}],[\"如果你的程序问了一个无效的问题\",{\"1\":{\"37\":1}}],[\"如果途径另一个未匹配点\",{\"1\":{\"151\":1}}],[\"如果该数没有被筛掉\",{\"1\":{\"159\":1}}],[\"如果该条边上的两个顶点在一个集合中\",{\"1\":{\"149\":1}}],[\"如果该元素大于栈顶元素\",{\"1\":{\"90\":1}}],[\"如果图不连通\",{\"1\":{\"148\":1}}],[\"如果图中存在负权回路\",{\"1\":{\"142\":1}}],[\"如果从1号点到x的最短路中包含至少n个点\",{\"1\":{\"144\":1}}],[\"如果从1号点无法走到n号点则返回\",{\"1\":{\"143\":1}}],[\"如果某条最短路径上有n个点\",{\"1\":{\"144\":1}}],[\"如果队列中已存在j\",{\"1\":{\"143\":1}}],[\"如果变短且该点不在队列中\",{\"1\":{\"143\":1}}],[\"如果第n次迭代仍然会松弛三角不等式\",{\"1\":{\"142\":1}}],[\"如果第三段不符合\",{\"1\":{\"50\":1}}],[\"如果无法从1走到n\",{\"1\":{\"142\":1}}],[\"如果不可能\",{\"1\":{\"330\":1}}],[\"如果不这么做那么会有很多的进程向\",{\"1\":{\"261\":1}}],[\"如果不能覆盖掉右端点\",{\"1\":{\"215\":1}}],[\"如果不在一个集合中\",{\"1\":{\"149\":1}}],[\"如果不存在公共子序列\",{\"1\":{\"312\":1}}],[\"如果不存在\",{\"1\":{\"141\":1}}],[\"如果不存在则返回\",{\"1\":{\"140\":1}}],[\"如果不存在解决方案\",{\"1\":{\"67\":1}}],[\"如果不是起点\",{\"1\":{\"137\":1}}],[\"如果想将一个单元清零\",{\"1\":{\"126\":1}}],[\"如果t\",{\"1\":{\"116\":1}}],[\"如果有这个\",{\"1\":{\"261\":1}}],[\"如果有两个大于\",{\"1\":{\"156\":1}}],[\"如果有那就使在同一个集合中\",{\"1\":{\"149\":1}}],[\"如果有\",{\"1\":{\"116\":1,\"160\":1}}],[\"如果有一部分遍历完了\",{\"1\":{\"106\":1}}],[\"如果有一位没用上\",{\"1\":{\"79\":1}}],[\"如果a\",{\"1\":{\"116\":2}}],[\"如果条件成立则记下答案\",{\"1\":{\"111\":1}}],[\"如果初始网格如下所示\",{\"1\":{\"67\":1}}],[\"如果i从0开始那么i\",{\"1\":{\"51\":1}}],[\"如果其中一段连续的子序列\",{\"1\":{\"49\":1}}],[\"如果查找失败\",{\"1\":{\"40\":1}}],[\"如果查找成功\",{\"1\":{\"40\":1}}],[\"如果\",{\"1\":{\"25\":1,\"49\":1,\"50\":1,\"105\":1,\"116\":1,\"149\":1,\"161\":1,\"164\":1,\"171\":1,\"172\":1,\"176\":1,\"195\":1,\"257\":1}}],[\"如果存在缓存穿透的情况\",{\"1\":{\"261\":1}}],[\"如果存在负环\",{\"1\":{\"144\":1}}],[\"如果存在\",{\"1\":{\"24\":1,\"67\":1,\"172\":1}}],[\"③\",{\"1\":{\"31\":1}}],[\"还做了一些事情\",{\"1\":{\"387\":1}}],[\"还有另外一种获取配置项的方式\",{\"1\":{\"384\":1}}],[\"还提供可视化的操作管理界面\",{\"1\":{\"370\":1}}],[\"还支持\",{\"1\":{\"370\":1}}],[\"还应先完成课程\",{\"1\":{\"337\":1}}],[\"还应用了内部稀疏数据的\",{\"1\":{\"241\":1}}],[\"还可能遇到\",{\"1\":{\"241\":1}}],[\"还可以表示为\",{\"1\":{\"79\":1}}],[\"还包括中文的空格字符\",{\"1\":{\"344\":1}}],[\"还包括楼中楼\",{\"1\":{\"240\":1}}],[\"还包含了许多用于操作的函数\",{\"1\":{\"31\":1}}],[\"还需要校验对应评论的状态\",{\"1\":{\"237\":1}}],[\"还需要补上\",{\"1\":{\"168\":1}}],[\"还作为数据库\",{\"1\":{\"229\":1}}],[\"还是在\",{\"1\":{\"383\":1}}],[\"还是\",{\"1\":{\"111\":1,\"126\":1,\"156\":1}}],[\"还原\",{\"1\":{\"67\":1}}],[\"还要实现应用之间的互操作\",{\"1\":{\"14\":1}}],[\"②赋\",{\"1\":{\"42\":1}}],[\"②\",{\"1\":{\"31\":1,\"112\":1,\"168\":1}}],[\"而且也不需要从其他`\",{\"1\":{\"395\":1}}],[\"而服务之间是需要相互通信的\",{\"1\":{\"394\":1}}],[\"而用到的配置信息就是从\",{\"1\":{\"391\":1}}],[\"而在创建\",{\"1\":{\"387\":1}}],[\"而接口的方法是驼峰命名的\",{\"1\":{\"384\":1}}],[\"而这道题有多个起点\",{\"1\":{\"331\":1}}],[\"而是记录这一层节点对应字符串的位置是否出现了某个字符\",{\"1\":{\"288\":1}}],[\"而不会再去查\",{\"1\":{\"261\":1}}],[\"而不会一下发到\",{\"1\":{\"250\":1}}],[\"而分布式部署+负载均衡的网关\",{\"1\":{\"229\":1}}],[\"而点进评论区\",{\"1\":{\"222\":1}}],[\"而非数据内容\",{\"1\":{\"259\":1}}],[\"而非对某个数的余数时\",{\"1\":{\"178\":1}}],[\"而非一种软件\",{\"1\":{\"14\":1}}],[\"而整数\",{\"1\":{\"176\":1}}],[\"而此时另一个数即为所求答案\",{\"1\":{\"165\":1}}],[\"而并非是\",{\"1\":{\"142\":1}}],[\"而另一部分还有剩余\",{\"1\":{\"106\":1}}],[\"而所有的公共上升子序列中最长的就是最长公共上升子序列了\",{\"1\":{\"92\":1}}],[\"而\",{\"1\":{\"31\":1,\"78\":1,\"259\":1,\"343\":1,\"387\":1}}],[\"只重建一次缓存\",{\"1\":{\"229\":1}}],[\"只去掉相邻的相同元素\",{\"1\":{\"211\":1}}],[\"只是\",{\"1\":{\"168\":1}}],[\"只需将基数\",{\"1\":{\"168\":1}}],[\"只需要创建\",{\"1\":{\"375\":1}}],[\"只需要在最后面加上\",{\"1\":{\"362\":1}}],[\"只需要设置不同的评论策略\",{\"1\":{\"246\":1}}],[\"只需要跟一个父亲比较大小就行\",{\"1\":{\"205\":1}}],[\"只需要判断\",{\"1\":{\"159\":1}}],[\"只需要另找一个数\",{\"1\":{\"126\":3}}],[\"只需要枚举\",{\"1\":{\"79\":1}}],[\"只可能是此时\",{\"1\":{\"161\":1}}],[\"只判断能否被小于\",{\"1\":{\"155\":1}}],[\"只出现在集合之间\",{\"1\":{\"150\":1}}],[\"只有一个为空返回\",{\"1\":{\"294\":1}}],[\"只有重算排序的时候才会读取曝光数\",{\"1\":{\"241\":1}}],[\"只有祖宗节点的有意义\",{\"1\":{\"203\":1}}],[\"只有先手必胜和先手必败两种情况\",{\"1\":{\"182\":1}}],[\"只有当\",{\"1\":{\"149\":1}}],[\"只有a\",{\"1\":{\"90\":1}}],[\"只考虑正数的情况\",{\"1\":{\"116\":1}}],[\"只要发现该节点已经被\",{\"1\":{\"337\":1}}],[\"只要当前节点为空\",{\"1\":{\"289\":1}}],[\"只要它不是\",{\"1\":{\"159\":1}}],[\"只要根据最未位是\",{\"1\":{\"126\":1}}],[\"只要\",{\"1\":{\"126\":1}}],[\"只要找到这个连续段的左端点和右端点即可\",{\"1\":{\"112\":1}}],[\"只要告诉奶牛它的长度就可以了\",{\"1\":{\"92\":1}}],[\"只小猫的重量\",{\"1\":{\"78\":1}}],[\"只小猫的重量分别是\",{\"1\":{\"78\":1}}],[\"只小猫都运送下山\",{\"1\":{\"78\":1}}],[\"只小猫\",{\"1\":{\"78\":1}}],[\"只能输出c语言的内置数据类型\",{\"1\":{\"31\":1}}],[\"只在高度相同时匹配\",{\"1\":{\"26\":1}}],[\"即丢失一半数量的硬盘的情况下仍能保证数据的安全性\",{\"1\":{\"370\":1}}],[\"即输出到\",{\"1\":{\"362\":1}}],[\"即使你退出了终端或关闭了会话\",{\"1\":{\"362\":1}}],[\"即路径节点\",{\"1\":{\"337\":1}}],[\"即最外层\",{\"1\":{\"331\":1}}],[\"即左子树最深节点和右子树最深节点的距离\",{\"1\":{\"282\":1}}],[\"即当前节点的父节点\",{\"1\":{\"271\":1}}],[\"即当前位置能填哪些数\",{\"1\":{\"76\":1}}],[\"即每个窗口中\",{\"1\":{\"262\":1}}],[\"即便\",{\"1\":{\"257\":1}}],[\"即某个评论主题的数据都在一个分区里\",{\"1\":{\"250\":1}}],[\"即如果存储\",{\"1\":{\"250\":1}}],[\"即先通过策略工程\",{\"1\":{\"241\":1}}],[\"即reddit\",{\"1\":{\"241\":1}}],[\"即要实现\",{\"1\":{\"241\":1}}],[\"即+1\",{\"1\":{\"238\":1}}],[\"即是\",{\"1\":{\"229\":1}}],[\"即这个迭代器是去重之后末尾元素的下一个位置\",{\"1\":{\"211\":1}}],[\"即小根堆\",{\"1\":{\"205\":1}}],[\"即sg\",{\"1\":{\"186\":1}}],[\"即两人均无失误\",{\"1\":{\"182\":1}}],[\"即为\",{\"1\":{\"176\":1}}],[\"即用二进制来表示\",{\"1\":{\"169\":1}}],[\"即组合成\",{\"1\":{\"169\":1}}],[\"即找到了\",{\"1\":{\"161\":1}}],[\"即源码取反加\",{\"1\":{\"127\":1}}],[\"即除以\",{\"1\":{\"126\":1}}],[\"即乘上\",{\"1\":{\"126\":1}}],[\"即得\",{\"1\":{\"126\":1}}],[\"即t\",{\"1\":{\"116\":1}}],[\"即可得到最终的花费时间\",{\"1\":{\"331\":1}}],[\"即可得到\",{\"1\":{\"126\":3}}],[\"即可\",{\"1\":{\"79\":1,\"111\":1,\"257\":1,\"362\":1,\"375\":1}}],[\"即可计算出该正方形内所有目标的价值之和\",{\"1\":{\"51\":1}}],[\"即那个正方形的边必须和\",{\"1\":{\"51\":1}}],[\"即一个无符号整型类型\",{\"1\":{\"40\":1}}],[\"即\",{\"1\":{\"31\":1,\"40\":2,\"49\":2,\"126\":3,\"127\":2,\"182\":2,\"185\":1,\"186\":1,\"187\":1,\"249\":1,\"257\":1,\"287\":1,\"314\":1}}],[\"①将区间\",{\"1\":{\"42\":1}}],[\"①\",{\"1\":{\"31\":1,\"112\":1,\"168\":1}}],[\"59\",{\"1\":{\"344\":1}}],[\"543\",{\"1\":{\"280\":1}}],[\"50\",{\"1\":{\"257\":1}}],[\"5001\",{\"1\":{\"51\":5}}],[\"57021517\",{\"1\":{\"242\":1}}],[\"572\",{\"1\":{\"23\":1}}],[\"5个基本操作\",{\"1\":{\"205\":1}}],[\"510\",{\"1\":{\"89\":1,\"140\":1}}],[\"512m\",{\"1\":{\"34\":1}}],[\"512<<20\",{\"1\":{\"34\":1}}],[\"5e3\",{\"1\":{\"51\":1}}],[\"5\",{\"0\":{\"34\":1,\"71\":1,\"93\":1,\"97\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"144\":1,\"147\":1,\"148\":1,\"149\":1,\"170\":1,\"179\":1,\"186\":1,\"200\":1,\"219\":1,\"229\":1,\"234\":1,\"235\":1,\"398\":1,\"399\":1,\"400\":1,\"401\":1,\"402\":1},\"1\":{\"31\":1,\"49\":2,\"50\":2,\"61\":2,\"66\":2,\"67\":9,\"77\":8,\"78\":1,\"89\":2,\"115\":1,\"116\":1,\"126\":1,\"142\":1,\"205\":1,\"211\":1,\"219\":1,\"223\":1,\"231\":1,\"234\":1,\"242\":1,\"261\":2,\"344\":1,\"374\":1,\"387\":1,\"388\":1,\"395\":1,\"397\":1,\"407\":1}}],[\"编译报错的解决方案\",{\"0\":{\"406\":1}}],[\"编译器会拋出\",{\"1\":{\"31\":1}}],[\"编排后下发给客户端\",{\"1\":{\"226\":1}}],[\"编辑距离\",{\"0\":{\"93\":1}}],[\"编程语言\",{\"0\":{\"9\":1}}],[\"操作时\",{\"1\":{\"294\":1}}],[\"操作不会顺序错乱\",{\"1\":{\"232\":1}}],[\"操作数每右移一位\",{\"1\":{\"126\":1}}],[\"操作\",{\"0\":{\"377\":1,\"378\":1},\"1\":{\"31\":1,\"205\":1,\"251\":2}}],[\"操作系统\",{\"0\":{\"12\":1},\"1\":{\"7\":1}}],[\"myfile2\",{\"1\":{\"377\":2}}],[\"myfile目录是否存在\",{\"1\":{\"377\":1}}],[\"myfile\",{\"1\":{\"377\":1,\"378\":7}}],[\"mysql\",{\"1\":{\"241\":1,\"247\":2,\"250\":2,\"251\":3,\"257\":1,\"259\":1,\"261\":8}}],[\"mnt\",{\"1\":{\"362\":3,\"363\":1}}],[\"mn​\",{\"1\":{\"172\":1}}],[\"m为原串长度\",{\"1\":{\"344\":2}}],[\"m匹配串长度\",{\"1\":{\"199\":1}}],[\"m个1\",{\"1\":{\"180\":1}}],[\"m==0\",{\"1\":{\"176\":1}}],[\"m2\",{\"1\":{\"172\":4}}],[\"m2​\",{\"1\":{\"172\":1}}],[\"m1\",{\"1\":{\"172\":7}}],[\"m1​\",{\"1\":{\"172\":1}}],[\"m是边数\",{\"1\":{\"149\":1}}],[\"mlogm\",{\"1\":{\"149\":1}}],[\"mlogn\",{\"1\":{\"139\":1,\"141\":1}}],[\"m表示边数\",{\"1\":{\"142\":1,\"148\":1,\"150\":1}}],[\"m代表边数\",{\"1\":{\"133\":1}}],[\"multimap\",{\"1\":{\"210\":3}}],[\"multiset\",{\"1\":{\"210\":3}}],[\"mul\",{\"1\":{\"117\":2,\"178\":2}}],[\"m​\",{\"1\":{\"93\":1}}],[\"mechanism\",{\"1\":{\"386\":1}}],[\"method\",{\"1\":{\"378\":2}}],[\"meta\",{\"1\":{\"231\":1}}],[\"merge\",{\"1\":{\"106\":3,\"130\":1,\"219\":2}}],[\"member\",{\"1\":{\"232\":2,\"259\":1}}],[\"memcpy\",{\"1\":{\"79\":1}}],[\"memset\",{\"1\":{\"66\":1,\"99\":1,\"100\":1,\"133\":1,\"140\":2,\"141\":1,\"142\":1,\"143\":1,\"148\":2,\"150\":1,\"151\":1}}],[\"mex运算\",{\"0\":{\"185\":1}}],[\"mex\",{\"1\":{\"38\":2,\"185\":1,\"186\":1}}],[\"mex函数\",{\"0\":{\"38\":1}}],[\"m⩽100\",{\"1\":{\"66\":1}}],[\"m行\",{\"1\":{\"61\":1}}],[\"m\",{\"1\":{\"61\":4,\"62\":6,\"66\":9,\"77\":7,\"78\":3,\"84\":7,\"85\":7,\"86\":17,\"87\":9,\"91\":5,\"93\":8,\"94\":5,\"99\":9,\"100\":2,\"133\":1,\"134\":2,\"137\":1,\"139\":4,\"140\":5,\"141\":1,\"142\":4,\"143\":6,\"144\":1,\"148\":6,\"149\":5,\"150\":5,\"151\":3,\"176\":8,\"177\":4,\"180\":6,\"199\":8,\"211\":2,\"259\":1,\"306\":4,\"307\":4,\"308\":10,\"314\":6,\"330\":1,\"332\":7,\"344\":4,\"355\":1}}],[\"mirrors\",{\"1\":{\"361\":1}}],[\"miss\",{\"1\":{\"249\":3,\"259\":1,\"261\":1}}],[\"miller\",{\"1\":{\"242\":1}}],[\"mi​\",{\"1\":{\"172\":1}}],[\"mid\",{\"1\":{\"90\":4,\"106\":7,\"109\":9,\"110\":13,\"111\":5,\"113\":4,\"129\":4,\"301\":4}}],[\"middleware\",{\"0\":{\"426\":1},\"1\":{\"14\":1}}],[\"minutes\",{\"1\":{\"378\":1}}],[\"minioinfo\",{\"1\":{\"375\":6}}],[\"minio密码\",{\"1\":{\"375\":1}}],[\"minio用户名\",{\"1\":{\"375\":1}}],[\"minioclient\",{\"0\":{\"376\":1},\"1\":{\"375\":8,\"377\":6,\"378\":9}}],[\"minio<\",{\"1\":{\"374\":1}}],[\"minio官网\",{\"1\":{\"368\":1}}],[\"minioadmin\",{\"1\":{\"362\":1,\"364\":1,\"375\":2}}],[\"minio\",{\"0\":{\"361\":1,\"368\":1,\"373\":1},\"1\":{\"361\":3,\"362\":24,\"363\":8,\"364\":10,\"365\":8,\"368\":2,\"369\":4,\"370\":22,\"375\":10,\"378\":3},\"2\":{\"367\":1,\"372\":1,\"380\":1}}],[\"minheap\",{\"1\":{\"353\":1}}],[\"minvalue\",{\"1\":{\"44\":2}}],[\"minpos\",{\"1\":{\"44\":2}}],[\"min\",{\"0\":{\"44\":1,\"425\":1},\"1\":{\"44\":5,\"51\":1,\"93\":3,\"94\":6,\"95\":2,\"100\":2,\"140\":4,\"142\":1,\"146\":1,\"148\":2,\"185\":1,\"216\":1,\"355\":1,\"356\":1,\"358\":8,\"364\":1,\"368\":1}}],[\"mx\",{\"1\":{\"38\":3,\"92\":4}}],[\"mode=\",{\"1\":{\"365\":1}}],[\"modm\",{\"1\":{\"176\":1}}],[\"modp\",{\"1\":{\"176\":1,\"177\":1}}],[\"modai​\",{\"1\":{\"172\":1}}],[\"mod\",{\"1\":{\"35\":5,\"49\":2,\"96\":4,\"164\":3,\"169\":1,\"172\":2,\"175\":1,\"176\":5,\"177\":1,\"209\":1}}],[\"movq\",{\"1\":{\"34\":1}}],[\"may\",{\"1\":{\"386\":1}}],[\"math\",{\"0\":{\"355\":1},\"1\":{\"276\":1,\"283\":2,\"314\":2,\"332\":2,\"355\":14}}],[\"match\",{\"1\":{\"151\":4}}],[\"map\",{\"0\":{\"349\":1,\"412\":1},\"1\":{\"210\":3,\"349\":10,\"386\":1,\"388\":1}}],[\"map<character\",{\"1\":{\"349\":3}}],[\"map<characters\",{\"1\":{\"349\":1}}],[\"map<int\",{\"1\":{\"157\":2,\"164\":1}}],[\"map<string\",{\"1\":{\"67\":1}}],[\"map>\",{\"1\":{\"67\":1,\"164\":1}}],[\"makebucketargs\",{\"1\":{\"377\":1}}],[\"makebucket\",{\"1\":{\"377\":2}}],[\"make\",{\"1\":{\"45\":1}}],[\"malloc\",{\"1\":{\"34\":1}}],[\"main\",{\"1\":{\"34\":1,\"49\":1,\"50\":1,\"51\":1,\"61\":1,\"62\":1,\"66\":1,\"67\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"84\":1,\"85\":1,\"86\":3,\"87\":2,\"89\":1,\"90\":3,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"99\":1,\"100\":1,\"102\":1,\"112\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"127\":2,\"133\":1,\"140\":1,\"148\":1,\"164\":1,\"172\":1,\"177\":1,\"180\":1,\"182\":1,\"199\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"382\":1}}],[\"maxheap\",{\"1\":{\"353\":1}}],[\"maxslidingwindow\",{\"1\":{\"319\":1}}],[\"maxdepth\",{\"1\":{\"276\":3,\"277\":1}}],[\"maxvalue\",{\"1\":{\"44\":2}}],[\"maxpos\",{\"1\":{\"44\":2}}],[\"maximum\",{\"1\":{\"40\":1}}],[\"max\",{\"0\":{\"44\":1},\"1\":{\"31\":2,\"32\":1,\"44\":6,\"51\":1,\"84\":2,\"85\":2,\"86\":4,\"87\":2,\"89\":3,\"90\":4,\"91\":4,\"92\":3,\"102\":2,\"128\":1,\"130\":1,\"160\":1,\"165\":1,\"211\":1,\"218\":1,\"219\":1,\"276\":1,\"283\":2,\"314\":2,\"331\":1,\"332\":2,\"355\":1,\"356\":1,\"358\":8}}],[\"会报警\",{\"1\":{\"397\":1}}],[\"会创建出一个默认的\",{\"1\":{\"385\":1}}],[\"会将主内存中的值刷回到自己的线程内存中\",{\"1\":{\"382\":1}}],[\"会将变量的值刷到主内存中\",{\"1\":{\"382\":1}}],[\"会话也不会被阻塞\",{\"1\":{\"362\":1}}],[\"会减少之后大量的返工\",{\"1\":{\"246\":1}}],[\"会向下游传递预先声明的召回决策\",{\"1\":{\"241\":1}}],[\"会在评论列表以外\",{\"1\":{\"238\":1}}],[\"会通过消息队列送至\",{\"1\":{\"229\":1}}],[\"会有非常重的前置调用逻辑\",{\"1\":{\"229\":1}}],[\"会随着其他数值而受到影响\",{\"1\":{\"142\":1}}],[\"会导致大量的同进程\",{\"1\":{\"261\":1}}],[\"会导致更大的\",{\"1\":{\"257\":1}}],[\"会导致\",{\"1\":{\"126\":1}}],[\"会对应这个数列的连续一段\",{\"1\":{\"112\":1}}],[\"会覆盖掉\",{\"1\":{\"42\":1}}],[\"会爆掉\",{\"1\":{\"31\":1}}],[\"会过滤掉空字符\",{\"1\":{\"31\":1}}],[\"时间衰退因子\",{\"1\":{\"240\":1}}],[\"时间复杂度的基数可以认为都是o\",{\"1\":{\"241\":1}}],[\"时间复杂度o\",{\"1\":{\"146\":1}}],[\"时间复杂度是\",{\"1\":{\"140\":1,\"141\":1,\"149\":1,\"151\":1,\"210\":1}}],[\"时间复杂度一般为\",{\"1\":{\"139\":1}}],[\"时间复杂度\",{\"1\":{\"134\":1,\"137\":1,\"142\":1,\"143\":1,\"144\":1,\"150\":1,\"210\":1}}],[\"时间复杂度为\",{\"1\":{\"112\":1,\"139\":3,\"148\":1,\"149\":2,\"155\":1,\"156\":1,\"159\":1,\"161\":1,\"169\":1,\"173\":1}}],[\"时事热点容易造成发评论的瞬间峰值流量\",{\"1\":{\"229\":1}}],[\"时为偶数\",{\"1\":{\"169\":1}}],[\"时为奇数\",{\"1\":{\"169\":1}}],[\"时才能表示已经将所有点加入到集合中\",{\"1\":{\"149\":1}}],[\"时需要加\",{\"1\":{\"110\":1}}],[\"时不需要加\",{\"1\":{\"109\":1}}],[\"时用来初始化\",{\"1\":{\"95\":1}}],[\"时\",{\"1\":{\"31\":1,\"49\":1,\"62\":2,\"109\":1,\"110\":1,\"126\":1,\"161\":2,\"168\":1,\"171\":2,\"249\":1}}],[\"337\",{\"1\":{\"242\":1}}],[\"36kr\",{\"1\":{\"242\":1}}],[\"310\",{\"1\":{\"95\":1}}],[\"3010\",{\"1\":{\"92\":1}}],[\"3000\",{\"1\":{\"92\":1}}],[\"30\",{\"1\":{\"77\":1,\"395\":2}}],[\"3×3\",{\"1\":{\"67\":3}}],[\"3s\",{\"1\":{\"50\":1}}],[\"3\",{\"0\":{\"32\":1,\"59\":1,\"86\":1,\"91\":1,\"95\":1,\"107\":1,\"108\":1,\"111\":1,\"112\":2,\"113\":1,\"117\":1,\"122\":1,\"127\":1,\"137\":1,\"142\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":2,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"177\":1,\"184\":1,\"196\":1,\"197\":1,\"198\":1,\"204\":1,\"209\":1,\"217\":1,\"225\":1,\"226\":1,\"227\":2,\"228\":1,\"229\":1,\"242\":1,\"387\":1,\"392\":1,\"393\":1,\"394\":1,\"395\":1,\"401\":1},\"1\":{\"31\":1,\"44\":1,\"45\":2,\"49\":1,\"50\":9,\"55\":1,\"57\":1,\"61\":5,\"62\":2,\"67\":15,\"69\":7,\"75\":5,\"76\":7,\"77\":9,\"89\":1,\"92\":2,\"113\":1,\"115\":1,\"116\":1,\"126\":3,\"127\":1,\"133\":1,\"142\":1,\"143\":1,\"149\":1,\"159\":2,\"173\":1,\"178\":1,\"183\":1,\"191\":1,\"205\":2,\"210\":1,\"211\":1,\"223\":2,\"227\":1,\"231\":3,\"232\":1,\"234\":1,\"237\":1,\"238\":1,\"240\":1,\"241\":2,\"242\":1,\"257\":2,\"378\":1,\"388\":1,\"392\":1,\"395\":1,\"407\":1}}],[\"对用户而言\",{\"1\":{\"375\":2}}],[\"对象的过程非常复杂\",{\"1\":{\"395\":1}}],[\"对象里面有很多\",{\"1\":{\"388\":1}}],[\"对象是单例的\",{\"1\":{\"375\":1}}],[\"对象即可实现对\",{\"1\":{\"375\":1}}],[\"对象\",{\"1\":{\"375\":2,\"384\":1,\"388\":1,\"390\":1,\"395\":1,\"397\":1}}],[\"对象存储可以作为主存储层\",{\"1\":{\"370\":1}}],[\"对象存储的读\",{\"1\":{\"370\":1}}],[\"对象存储\",{\"1\":{\"369\":1}}],[\"对象来拼接\",{\"1\":{\"343\":1}}],[\"对浮点数四舍五入\",{\"1\":{\"355\":1}}],[\"对浮点数向下取整\",{\"1\":{\"355\":1}}],[\"对浮点数向上取整\",{\"1\":{\"355\":1}}],[\"对元素采用的是堆排序\",{\"1\":{\"353\":1}}],[\"对原来的list和返回的list做的\",{\"1\":{\"347\":1}}],[\"对称二叉树\",{\"0\":{\"292\":1},\"1\":{\"292\":1}}],[\"对每个节点的进行相同的递归处理\",{\"1\":{\"270\":1}}],[\"对每辆车进行枚举\",{\"1\":{\"78\":1}}],[\"对这个业务的系统有比较深的理解\",{\"1\":{\"246\":1}}],[\"对重算排序的收益进行预估\",{\"1\":{\"241\":1}}],[\"对特征的导入与更新都提出了挑战\",{\"1\":{\"241\":1}}],[\"对性能的影响较大\",{\"1\":{\"238\":1}}],[\"对各类数据写操作\",{\"1\":{\"237\":1}}],[\"对下游来说也是读放大\",{\"1\":{\"234\":1}}],[\"对应评论内容数据\",{\"1\":{\"259\":1}}],[\"对应主题的缓存\",{\"1\":{\"259\":1}}],[\"对应的就是\",{\"1\":{\"257\":1}}],[\"对应的\",{\"1\":{\"232\":1}}],[\"对应于\",{\"1\":{\"232\":4}}],[\"对应嵌套多次点击\",{\"1\":{\"231\":1}}],[\"对应下标的数一一比较\",{\"1\":{\"76\":1,\"77\":1}}],[\"对评论业务来说\",{\"1\":{\"226\":1}}],[\"对作品录音作品的音乐评论\",{\"1\":{\"222\":1}}],[\"对自定义的结构体\",{\"1\":{\"211\":1}}],[\"对两个迭代器\",{\"1\":{\"211\":1}}],[\"对两个子序列分别设置个指针\",{\"1\":{\"106\":1}}],[\"对字符串也适用\",{\"1\":{\"210\":1}}],[\"对阶乘分解质因数之后\",{\"1\":{\"178\":1}}],[\"对朴素筛法的优化\",{\"1\":{\"159\":1}}],[\"对无符号数\",{\"1\":{\"125\":1}}],[\"对a提前判断一下\",{\"1\":{\"79\":1}}],[\"对于调用接口方法的地方是透明的\",{\"1\":{\"384\":1}}],[\"对于相似的变量\",{\"1\":{\"384\":1}}],[\"对于个人来说\",{\"1\":{\"369\":1}}],[\"对于企业来说\",{\"1\":{\"369\":1}}],[\"对于热门的主题\",{\"1\":{\"261\":1}}],[\"对于嵌套层次多的\",{\"1\":{\"257\":1}}],[\"对于二级的子楼层\",{\"1\":{\"257\":1}}],[\"对于入队的消息\",{\"1\":{\"250\":1}}],[\"对于写的设计上\",{\"1\":{\"250\":1}}],[\"对于重建逻辑\",{\"1\":{\"249\":1}}],[\"对于弱依赖\",{\"1\":{\"235\":1}}],[\"对于用户来说\",{\"1\":{\"229\":1}}],[\"对于\",{\"1\":{\"199\":1,\"313\":1}}],[\"对于先手来说是一个必败状态\",{\"1\":{\"182\":1}}],[\"对于先手来说是一个必胜状态\",{\"1\":{\"182\":1}}],[\"对于大多数情况\",{\"1\":{\"165\":1}}],[\"对于所有的点都\",{\"1\":{\"142\":1}}],[\"对于一个序列\",{\"1\":{\"128\":1}}],[\"对于一般的树可能出现极端不平衡的情况\",{\"1\":{\"62\":1}}],[\"对于每个加入的字符串我们一定能在树中找到一条路径还原它\",{\"1\":{\"288\":1}}],[\"对于每个\",{\"1\":{\"199\":2}}],[\"对于每个节点x\",{\"1\":{\"186\":1}}],[\"对于每个点k\",{\"1\":{\"133\":1}}],[\"对于每两个式子\",{\"1\":{\"172\":1}}],[\"对于每次询问\",{\"1\":{\"93\":1}}],[\"对于每一个\",{\"1\":{\"62\":1}}],[\"对于两个序列\",{\"1\":{\"128\":1}}],[\"对于两个数列\",{\"1\":{\"92\":1}}],[\"对于两个不同的行\",{\"1\":{\"76\":1,\"77\":1}}],[\"对于没有选任何数的方案\",{\"1\":{\"75\":1}}],[\"对于询问\",{\"1\":{\"61\":1}}],[\"对于我们的关于亲戚关系的提问\",{\"1\":{\"61\":1}}],[\"对\",{\"1\":{\"31\":1,\"375\":1}}],[\"获取配置文件\",{\"1\":{\"386\":1}}],[\"获取配置项\",{\"1\":{\"384\":1}}],[\"获取堆顶元素但不删除\",{\"1\":{\"353\":1}}],[\"获取堆顶元素并删除\",{\"1\":{\"353\":1}}],[\"获取队尾元素但不删除\",{\"1\":{\"352\":1}}],[\"获取队尾元素并删除\",{\"1\":{\"352\":1}}],[\"获取队首元素但不删除\",{\"1\":{\"352\":1}}],[\"获取队首元素并删除\",{\"1\":{\"352\":1}}],[\"获取到业务的原始\",{\"1\":{\"251\":1}}],[\"获取的楼层号就是重复的\",{\"1\":{\"229\":1}}],[\"获取字符串长度\",{\"1\":{\"31\":1}}],[\"获取\",{\"1\":{\"31\":1}}],[\"当在集群环境下\",{\"1\":{\"395\":1}}],[\"当要获取配置项时\",{\"1\":{\"388\":1}}],[\"当调用\",{\"1\":{\"388\":1}}],[\"当元素超过容量后会扩容\",{\"1\":{\"353\":1}}],[\"当存在循环依赖的时候\",{\"1\":{\"337\":1}}],[\"当处理的节点是空节点时\",{\"1\":{\"270\":1}}],[\"当这些服务不稳定时\",{\"1\":{\"252\":1}}],[\"当缓存抖动时候\",{\"1\":{\"249\":1}}],[\"当时评论发布的吞吐较低\",{\"1\":{\"234\":1}}],[\"当且仅当该局面对应节点的sg函数值等于0\",{\"1\":{\"187\":1}}],[\"当且仅当该局面对应节点的sg函数值大于0\",{\"1\":{\"187\":1}}],[\"当且仅当\",{\"1\":{\"182\":1}}],[\"当我们查找一个完整字符串时\",{\"1\":{\"288\":1}}],[\"当我们找到时\",{\"1\":{\"288\":1}}],[\"当我们操作编辑的时候\",{\"1\":{\"251\":1}}],[\"当我们需要求出组合数的真实值\",{\"1\":{\"178\":1}}],[\"当我们将区间\",{\"1\":{\"109\":1,\"110\":1}}],[\"当模数\",{\"1\":{\"176\":1}}],[\"当有\",{\"1\":{\"161\":1}}],[\"当中有\",{\"1\":{\"159\":1}}],[\"当前\",{\"1\":{\"397\":1}}],[\"当前分钟的烂橘子都使其相邻位置的橘子也腐烂\",{\"1\":{\"331\":1}}],[\"当前要查找的字符为\",{\"1\":{\"288\":1}}],[\"当前要加入的字符为\",{\"1\":{\"288\":1}}],[\"当前的数据库设计不能满足该需求\",{\"1\":{\"231\":1}}],[\"当前的值\",{\"1\":{\"79\":1}}],[\"当前节点相当于左节点\",{\"1\":{\"271\":1}}],[\"当前节点选\",{\"1\":{\"102\":1}}],[\"当前节点不选\",{\"1\":{\"102\":1}}],[\"当前位置部分\",{\"1\":{\"97\":1}}],[\"当前加入的数字是几\",{\"1\":{\"79\":1}}],[\"当前前缀和\",{\"1\":{\"49\":1}}],[\"当然在设计层面可以考虑目录结构进行拆分\",{\"1\":{\"248\":1}}],[\"当然\",{\"1\":{\"78\":1,\"211\":1,\"241\":1,\"369\":1}}],[\"当达到了祖先位置\",{\"1\":{\"58\":1}}],[\"当\",{\"1\":{\"31\":1,\"62\":2,\"108\":1,\"126\":1,\"159\":1,\"161\":1,\"171\":2,\"176\":2,\"397\":1}}],[\"crazy\",{\"1\":{\"408\":1}}],[\"creationdate\",{\"1\":{\"377\":1}}],[\"credentials\",{\"1\":{\"375\":1}}],[\"crud\",{\"1\":{\"251\":2}}],[\"cmd\",{\"1\":{\"364\":1,\"365\":1}}],[\"cmin\",{\"1\":{\"358\":1}}],[\"cmax\",{\"1\":{\"358\":1}}],[\"cmp\",{\"1\":{\"116\":2,\"211\":2}}],[\"ceil\",{\"1\":{\"355\":1}}],[\"cbrt\",{\"1\":{\"355\":1}}],[\"cba​=\",{\"1\":{\"177\":1}}],[\"csdn\",{\"1\":{\"408\":1}}],[\"cs\",{\"1\":{\"344\":2}}],[\"cv15278397\",{\"1\":{\"242\":1}}],[\"cannot\",{\"1\":{\"386\":1}}],[\"canfinish\",{\"1\":{\"338\":1}}],[\"canal\",{\"1\":{\"247\":1,\"251\":1}}],[\"cacherefreshthread\",{\"1\":{\"395\":1}}],[\"cacherefreshexecutor\",{\"1\":{\"395\":2}}],[\"cache\",{\"1\":{\"229\":1,\"249\":5,\"259\":4,\"261\":5,\"262\":5}}],[\"catch\",{\"1\":{\"378\":1,\"386\":1}}],[\"cat\",{\"1\":{\"179\":1}}],[\"cab​\",{\"1\":{\"178\":1}}],[\"cab​≡ca\",{\"1\":{\"177\":1}}],[\"cab​=b\",{\"1\":{\"176\":1}}],[\"cab​=ca−1b−1​+ca−1b​\",{\"1\":{\"175\":1}}],[\"cab​modp\",{\"1\":{\"177\":1}}],[\"cab​mod\",{\"1\":{\"175\":1}}],[\"capture\",{\"1\":{\"43\":2}}],[\"capacity\",{\"1\":{\"31\":1}}],[\"ck\",{\"1\":{\"164\":1}}],[\"c2\",{\"1\":{\"164\":1}}],[\"c2​\",{\"1\":{\"78\":1}}],[\"c1\",{\"1\":{\"164\":1}}],[\"c1​\",{\"1\":{\"78\":1}}],[\"c表示当前点的颜色\",{\"1\":{\"150\":1}}],[\"cloud\",{\"0\":{\"428\":1}}],[\"cli\",{\"1\":{\"370\":1}}],[\"clientconfig\",{\"1\":{\"395\":2,\"397\":2}}],[\"client\",{\"0\":{\"393\":1,\"394\":1},\"1\":{\"370\":1,\"390\":1,\"394\":3,\"395\":2,\"397\":1}}],[\"cluster\",{\"1\":{\"257\":1}}],[\"clear\",{\"1\":{\"99\":1,\"210\":4}}],[\"class\",{\"1\":{\"25\":1,\"276\":1,\"277\":1,\"283\":1,\"289\":1,\"295\":1,\"301\":1,\"306\":1,\"307\":1,\"308\":1,\"314\":1,\"319\":1,\"326\":1,\"332\":2,\"338\":1,\"375\":2,\"382\":1,\"387\":1}}],[\"chmod\",{\"1\":{\"362\":1}}],[\"ch\",{\"1\":{\"288\":4}}],[\"children\",{\"1\":{\"288\":1,\"289\":6}}],[\"checksum\",{\"1\":{\"370\":1}}],[\"check\",{\"1\":{\"79\":3,\"97\":1,\"110\":2,\"111\":1,\"113\":2,\"128\":1,\"150\":1,\"195\":1,\"198\":2}}],[\"character\",{\"1\":{\"349\":1,\"358\":2}}],[\"charat\",{\"1\":{\"289\":2,\"314\":2,\"344\":1,\"345\":1}}],[\"char\",{\"1\":{\"31\":2,\"34\":1,\"39\":2,\"67\":1,\"91\":1,\"93\":4,\"94\":1,\"199\":1,\"200\":2,\"306\":2,\"307\":2,\"308\":1,\"344\":5}}],[\"circularqueue<pair<long\",{\"1\":{\"397\":2}}],[\"ci​\",{\"1\":{\"78\":1}}],[\"cin>>n\",{\"1\":{\"100\":1}}],[\"cin\",{\"1\":{\"49\":2,\"50\":2,\"51\":2,\"61\":3,\"62\":2,\"66\":2,\"67\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":2,\"79\":1,\"84\":2,\"85\":2,\"86\":6,\"87\":6,\"89\":2,\"90\":6,\"91\":1,\"92\":3,\"93\":3,\"94\":2,\"95\":2,\"96\":1,\"97\":1,\"99\":1,\"100\":1,\"102\":1,\"112\":2,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"127\":2,\"133\":1,\"140\":2,\"148\":2,\"164\":2,\"177\":2,\"180\":2,\"182\":2,\"199\":2,\"215\":2,\"216\":2,\"217\":2,\"218\":3,\"219\":2}}],[\"cn\",{\"1\":{\"242\":1,\"361\":1,\"362\":1,\"368\":1,\"370\":1}}],[\"cn=ca+b\",{\"1\":{\"79\":1}}],[\"cn​\",{\"1\":{\"78\":1}}],[\"cnt记录素数个数\",{\"1\":{\"159\":1}}],[\"cnt++\",{\"1\":{\"50\":1,\"86\":2,\"99\":1,\"149\":1,\"159\":1,\"161\":1}}],[\"cnt\",{\"1\":{\"43\":5,\"49\":9,\"50\":2,\"86\":6,\"97\":3,\"99\":4,\"144\":5,\"149\":3,\"159\":1,\"161\":1,\"168\":2,\"178\":4,\"200\":4}}],[\"c++代码模板\",{\"1\":{\"109\":1,\"110\":1}}],[\"c++\",{\"0\":{\"210\":1},\"1\":{\"42\":1,\"357\":1}}],[\"c中的\",{\"1\":{\"37\":1}}],[\"core\",{\"1\":{\"382\":1}}],[\"cos\",{\"1\":{\"369\":1}}],[\"collection<e>\",{\"1\":{\"356\":5}}],[\"collection<v>\",{\"1\":{\"349\":1}}],[\"collections\",{\"0\":{\"356\":1},\"1\":{\"342\":1,\"353\":1}}],[\"color\",{\"1\":{\"150\":7}}],[\"copyofrange\",{\"1\":{\"342\":1}}],[\"copyof\",{\"1\":{\"342\":1}}],[\"commonconstants\",{\"1\":{\"394\":1}}],[\"comment\",{\"0\":{\"248\":1,\"251\":1,\"252\":1},\"1\":{\"247\":5,\"248\":3,\"249\":2,\"250\":1,\"251\":1,\"252\":2,\"257\":20,\"259\":3,\"261\":1}}],[\"component\",{\"1\":{\"375\":1}}],[\"compare\",{\"1\":{\"353\":1}}],[\"comparator<e>\",{\"1\":{\"353\":1}}],[\"comparator\",{\"1\":{\"349\":2,\"353\":1}}],[\"comparable\",{\"1\":{\"349\":2,\"353\":2}}],[\"com\",{\"1\":{\"242\":4,\"361\":2,\"365\":1,\"370\":3,\"382\":1}}],[\"configinstance\",{\"1\":{\"387\":3}}],[\"configname\",{\"1\":{\"386\":2}}],[\"config\",{\"1\":{\"375\":1,\"377\":1,\"384\":1,\"386\":1,\"394\":3,\"395\":4,\"397\":2}}],[\"configurationmanager\",{\"1\":{\"382\":2,\"386\":5,\"387\":1,\"388\":2}}],[\"configuration\",{\"1\":{\"375\":1,\"386\":1}}],[\"configurationproperties\",{\"1\":{\"375\":1}}],[\"console\",{\"1\":{\"362\":3,\"363\":1,\"364\":1}}],[\"constants\",{\"1\":{\"384\":1}}],[\"const\",{\"1\":{\"31\":3,\"39\":1,\"40\":1,\"49\":1,\"50\":1,\"51\":1,\"61\":1,\"62\":1,\"66\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"84\":1,\"85\":1,\"86\":3,\"87\":2,\"89\":1,\"90\":3,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"99\":1,\"100\":1,\"112\":1,\"113\":1,\"115\":1,\"127\":1,\"140\":1,\"148\":1,\"149\":3,\"164\":1,\"173\":1,\"180\":1,\"199\":1,\"211\":2,\"215\":3,\"216\":3,\"217\":3,\"218\":3,\"219\":1}}],[\"concerns\",{\"1\":{\"248\":1}}],[\"contextinitialized\",{\"1\":{\"382\":1,\"383\":1}}],[\"content\",{\"1\":{\"231\":2,\"232\":2,\"257\":11,\"259\":1}}],[\"containsvalue\",{\"1\":{\"349\":1}}],[\"containskey\",{\"1\":{\"349\":1}}],[\"contains\",{\"1\":{\"344\":1,\"348\":1}}],[\"continue\",{\"1\":{\"95\":1,\"141\":1,\"159\":1,\"173\":1,\"307\":1}}],[\"count\",{\"1\":{\"67\":1,\"210\":2,\"231\":1,\"232\":1,\"238\":3,\"241\":2,\"257\":1}}],[\"cout\",{\"1\":{\"31\":1,\"37\":1,\"39\":3,\"49\":1,\"50\":2,\"51\":1,\"62\":2,\"66\":1,\"67\":1,\"75\":2,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"84\":2,\"85\":2,\"86\":4,\"87\":2,\"89\":2,\"90\":3,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":2,\"99\":1,\"100\":1,\"112\":1,\"118\":2,\"127\":2,\"140\":1,\"156\":3,\"164\":1,\"177\":1,\"180\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1}}],[\"code\",{\"1\":{\"34\":1,\"370\":1,\"388\":1}}],[\"c\",{\"1\":{\"31\":2,\"33\":2,\"39\":2,\"45\":1,\"61\":5,\"67\":3,\"78\":8,\"79\":16,\"112\":8,\"115\":9,\"116\":14,\"117\":11,\"118\":12,\"122\":2,\"123\":4,\"133\":4,\"140\":5,\"141\":2,\"143\":2,\"148\":3,\"149\":1,\"150\":4,\"159\":1,\"173\":13,\"175\":5,\"177\":6,\"178\":5,\"179\":1,\"210\":1,\"344\":4,\"356\":3}}],[\"test10\",{\"1\":{\"378\":1}}],[\"test2\",{\"1\":{\"378\":1}}],[\"test\",{\"1\":{\"378\":5,\"386\":1}}],[\"test09\",{\"1\":{\"378\":1}}],[\"test08\",{\"1\":{\"378\":1}}],[\"test07\",{\"1\":{\"378\":1}}],[\"test06\",{\"1\":{\"378\":1}}],[\"test05\",{\"1\":{\"378\":1}}],[\"test04\",{\"1\":{\"377\":1}}],[\"test03\",{\"1\":{\"377\":1}}],[\"test02\",{\"1\":{\"377\":1}}],[\"test01\",{\"1\":{\"377\":1}}],[\"tensorflow\",{\"1\":{\"370\":1}}],[\"template\",{\"0\":{\"419\":1}}],[\"temp\",{\"1\":{\"106\":6}}],[\"timeunit\",{\"1\":{\"378\":1,\"395\":2}}],[\"time++\",{\"1\":{\"331\":1,\"332\":2}}],[\"time\",{\"1\":{\"331\":3,\"332\":4,\"365\":1}}],[\"tips\",{\"1\":{\"151\":1}}],[\"tmp\",{\"1\":{\"277\":4,\"332\":2}}],[\"threadpoolexecutor\",{\"1\":{\"395\":2}}],[\"threadfactorybuilder\",{\"1\":{\"395\":3}}],[\"throw\",{\"1\":{\"378\":1}}],[\"throws\",{\"1\":{\"377\":4,\"378\":6,\"402\":1}}],[\"there\",{\"1\":{\"386\":1}}],[\"the\",{\"1\":{\"386\":2}}],[\"thundering\",{\"1\":{\"249\":1}}],[\"this\",{\"1\":{\"43\":3,\"289\":2,\"307\":1,\"332\":1,\"386\":1,\"397\":4,\"401\":1}}],[\"t表示该元素与它的左\",{\"1\":{\"205\":1}}],[\"t为当前这种状态的集合数量\",{\"1\":{\"180\":1}}],[\"t为余数\",{\"1\":{\"118\":1}}],[\"ttl\",{\"1\":{\"262\":1}}],[\"tt表示队尾\",{\"1\":{\"197\":1}}],[\"tt表示栈顶\",{\"1\":{\"194\":1}}],[\"tt\",{\"1\":{\"137\":3,\"194\":4,\"195\":4,\"197\":3,\"198\":5}}],[\"t再除以10\",{\"1\":{\"115\":1}}],[\"ture\",{\"1\":{\"148\":1}}],[\"tu\",{\"1\":{\"45\":3}}],[\"tuple<int\",{\"1\":{\"45\":2}}],[\"tuple\",{\"0\":{\"45\":1},\"1\":{\"45\":2}}],[\"type=\",{\"1\":{\"231\":3}}],[\"typedef\",{\"1\":{\"99\":1,\"164\":1,\"209\":1}}],[\"type\",{\"1\":{\"40\":2,\"231\":1,\"257\":3,\"259\":1}}],[\"t的最大值\",{\"1\":{\"40\":1}}],[\"tool\",{\"0\":{\"421\":1}}],[\"tochararray\",{\"1\":{\"344\":2}}],[\"touppercase\",{\"1\":{\"344\":1}}],[\"tolowercase\",{\"1\":{\"344\":1}}],[\"tostring\",{\"1\":{\"342\":1,\"345\":1,\"357\":1}}],[\"topk\",{\"1\":{\"262\":2}}],[\"topic\",{\"1\":{\"249\":1,\"250\":1}}],[\"top\",{\"1\":{\"141\":1,\"210\":2,\"217\":1,\"319\":3}}],[\"topsort\",{\"1\":{\"137\":1}}],[\"tot\",{\"1\":{\"112\":3}}],[\"to\",{\"1\":{\"39\":2,\"242\":2,\"337\":3,\"338\":2,\"349\":2}}],[\"t\",{\"1\":{\"31\":3,\"40\":1,\"66\":5,\"67\":11,\"97\":4,\"115\":7,\"116\":11,\"117\":5,\"118\":9,\"136\":2,\"137\":2,\"140\":7,\"141\":3,\"143\":9,\"144\":6,\"148\":16,\"164\":4,\"168\":4,\"173\":5,\"178\":7,\"180\":8,\"205\":8,\"217\":4,\"242\":1,\"307\":3,\"332\":3,\"338\":2,\"344\":1}}],[\"transport\",{\"1\":{\"395\":1}}],[\"transferto\",{\"1\":{\"378\":1}}],[\"trimtosize\",{\"1\":{\"347\":1}}],[\"trim\",{\"1\":{\"344\":1}}],[\"trie\",{\"0\":{\"286\":1},\"1\":{\"200\":1,\"287\":2,\"289\":9}}],[\"trie树存储形式\",{\"1\":{\"200\":1}}],[\"trie树\",{\"0\":{\"200\":1}}],[\"try\",{\"1\":{\"287\":1,\"378\":1,\"386\":1}}],[\"treemap\",{\"1\":{\"349\":3}}],[\"treeset\",{\"1\":{\"348\":2,\"349\":1}}],[\"treenode\",{\"1\":{\"25\":4,\"276\":1,\"277\":2,\"283\":2,\"295\":3,\"301\":4,\"326\":4}}],[\"tree\",{\"1\":{\"24\":3}}],[\"true\",{\"1\":{\"24\":1,\"25\":4,\"69\":1,\"76\":1,\"79\":4,\"97\":1,\"99\":1,\"116\":1,\"135\":1,\"136\":2,\"140\":1,\"141\":1,\"143\":2,\"144\":3,\"148\":1,\"150\":2,\"151\":2,\"155\":1,\"159\":1,\"160\":4,\"161\":2,\"168\":1,\"169\":2,\"178\":1,\"207\":1,\"218\":1,\"287\":2,\"288\":2,\"289\":1,\"294\":1,\"336\":1,\"337\":1,\"338\":3,\"342\":1,\"395\":3}}],[\"是会有多个\",{\"1\":{\"394\":1}}],[\"是包含在\",{\"1\":{\"394\":1}}],[\"是用来构造\",{\"1\":{\"391\":1}}],[\"是实现了\",{\"1\":{\"387\":1}}],[\"是这样定义的\",{\"1\":{\"386\":1}}],[\"是这个评论的父评论\",{\"1\":{\"257\":1}}],[\"是存储到\",{\"1\":{\"375\":1}}],[\"是存储\",{\"1\":{\"375\":1}}],[\"是存在\",{\"1\":{\"250\":1}}],[\"是第一个支持\",{\"1\":{\"370\":1}}],[\"是全世界内大家都认可的标准\",{\"1\":{\"370\":1}}],[\"是在全球范围内达到共识的对象存储的协议\",{\"1\":{\"370\":1}}],[\"是指该树所有节点的左右子树的深度相差不超过\",{\"1\":{\"299\":1}}],[\"是指树中任意两个节点之间最长路径的\",{\"1\":{\"281\":1}}],[\"是指从根节点到最远叶子节点的最长路径上的节点数\",{\"1\":{\"275\":1}}],[\"是有必要的\",{\"1\":{\"262\":1}}],[\"是要增量追加的\",{\"1\":{\"259\":1}}],[\"是为了减少一次二级索引查找\",{\"1\":{\"257\":1}}],[\"是物理组织形式存放的\",{\"1\":{\"257\":1}}],[\"是该评论的根评论\",{\"1\":{\"257\":1}}],[\"是主题类型\",{\"1\":{\"257\":1}}],[\"是主题\",{\"1\":{\"257\":1,\"259\":1}}],[\"是面向端\",{\"1\":{\"252\":1}}],[\"是由一组\",{\"1\":{\"250\":1}}],[\"是做到服务里的\",{\"1\":{\"249\":1}}],[\"是敏感词过滤服务\",{\"1\":{\"247\":1}}],[\"是多数据源的\",{\"1\":{\"241\":1}}],[\"是容易出现误差累积的\",{\"1\":{\"238\":1}}],[\"是数据冗余造成的\",{\"1\":{\"238\":1}}],[\"是可见态才允许下发\",{\"1\":{\"237\":1}}],[\"是评论\",{\"1\":{\"232\":1}}],[\"是评论系统的接入层\",{\"1\":{\"226\":1}}],[\"是越界的\",{\"1\":{\"211\":1}}],[\"是堆顶\",{\"1\":{\"205\":1}}],[\"是m个有向图游戏\",{\"1\":{\"187\":1}}],[\"是质数\",{\"1\":{\"177\":1}}],[\"是增广矩阵\",{\"1\":{\"173\":1}}],[\"是满足条件的第一个数\",{\"1\":{\"161\":1}}],[\"是bellman\",{\"1\":{\"139\":1}}],[\"是同一个级别的类型\",{\"1\":{\"139\":1}}],[\"是不是偶数\",{\"1\":{\"126\":1}}],[\"是的输出\",{\"1\":{\"62\":1}}],[\"是否包含子串str\",{\"1\":{\"344\":1}}],[\"是否走到末尾\",{\"1\":{\"199\":1}}],[\"是否能到达\",{\"1\":{\"142\":1}}],[\"是否记下ans\",{\"1\":{\"111\":1}}],[\"是否满足条件\",{\"1\":{\"79\":1}}],[\"是否成立\",{\"1\":{\"79\":1}}],[\"是否在同一集合内\",{\"1\":{\"62\":1}}],[\"是否为亲戚\",{\"1\":{\"61\":1}}],[\"是亲戚\",{\"1\":{\"61\":3}}],[\"是\",{\"1\":{\"49\":1,\"168\":1,\"312\":1,\"356\":1,\"364\":1,\"369\":1}}],[\"是泛化的\",{\"1\":{\"45\":1}}],[\"是返回值类型\",{\"1\":{\"43\":1}}],[\"是函数选项\",{\"1\":{\"43\":1}}],[\"是参数表\",{\"1\":{\"43\":1}}],[\"是捕获列表\",{\"1\":{\"43\":1}}],[\"是整数\",{\"1\":{\"36\":1,\"171\":1}}],[\"是c语言标准库中的函数\",{\"1\":{\"31\":1}}],[\"是一层\",{\"1\":{\"248\":1}}],[\"是一个接口\",{\"1\":{\"384\":1}}],[\"是一个高性能的分布式对象存储系统\",{\"1\":{\"368\":1}}],[\"是一个\",{\"1\":{\"232\":1}}],[\"是一个质数\",{\"1\":{\"176\":1}}],[\"是一个边的集合\",{\"1\":{\"151\":1}}],[\"是一个确定的值\",{\"1\":{\"142\":1}}],[\"是一个二进制数\",{\"1\":{\"99\":1}}],[\"是一类能够为一种或多种应用程序合作互通\",{\"1\":{\"14\":1}}],[\"是一种恢复丢失和损坏数据的数学算法\",{\"1\":{\"370\":1}}],[\"是一种数据存储架构\",{\"1\":{\"369\":1}}],[\"是一种没有重复元素的集合\",{\"1\":{\"348\":1}}],[\"是一种树形数据结构\",{\"1\":{\"287\":1}}],[\"是一种能够高效存储和查找字符串集合的数据结构\",{\"1\":{\"200\":1}}],[\"是一种应用于分布式系统的基础软件\",{\"1\":{\"14\":1}}],[\"是一种独立的系统软件或服务程序\",{\"1\":{\"14\":1}}],[\"是一种在系统软件和用户应用软件之间连接的软件\",{\"1\":{\"14\":1}}],[\"2>\",{\"1\":{\"362\":2}}],[\"2f\",{\"1\":{\"344\":1}}],[\"226\",{\"1\":{\"323\":1}}],[\"239\",{\"1\":{\"317\":1}}],[\"231−1\",{\"1\":{\"92\":1}}],[\"2^64\",{\"1\":{\"209\":2}}],[\"2x+1\",{\"1\":{\"205\":1}}],[\"2x\",{\"1\":{\"205\":1}}],[\"26\",{\"1\":{\"200\":1,\"288\":2,\"289\":1}}],[\"2n\",{\"1\":{\"172\":1,\"179\":1}}],[\"2ll\",{\"1\":{\"160\":1}}],[\"2k\",{\"1\":{\"126\":2}}],[\"2e5\",{\"1\":{\"112\":1,\"149\":1}}],[\"2e5+5\",{\"1\":{\"62\":1}}],[\"2e9\",{\"1\":{\"90\":1,\"130\":4,\"215\":1,\"218\":1,\"219\":4}}],[\"29\",{\"1\":{\"78\":1}}],[\"2∼n+1\",{\"1\":{\"78\":1}}],[\"2表示未选\",{\"1\":{\"75\":1}}],[\"207\",{\"1\":{\"335\":1}}],[\"208\",{\"1\":{\"286\":1}}],[\"200\",{\"1\":{\"257\":2,\"304\":1}}],[\"20005\",{\"1\":{\"61\":1}}],[\"2012\",{\"1\":{\"377\":1}}],[\"2019年版\",{\"1\":{\"242\":1}}],[\"2010\",{\"1\":{\"86\":2}}],[\"2020年的腾讯的辣椒酱不香了\",{\"1\":{\"234\":1}}],[\"20\",{\"1\":{\"49\":2,\"75\":1,\"78\":1,\"79\":1,\"100\":1,\"180\":1,\"231\":1}}],[\"256\",{\"1\":{\"39\":1}}],[\"2\",{\"0\":{\"31\":1,\"58\":1,\"85\":1,\"88\":1,\"89\":1,\"90\":2,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"100\":1,\"106\":1,\"111\":1,\"116\":1,\"121\":1,\"126\":1,\"134\":1,\"141\":1,\"145\":1,\"146\":1,\"149\":1,\"156\":1,\"160\":1,\"162\":1,\"163\":1,\"164\":2,\"165\":1,\"168\":1,\"176\":1,\"183\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"198\":1,\"203\":1,\"208\":1,\"216\":1,\"226\":1,\"232\":1,\"235\":1,\"238\":1,\"241\":1,\"384\":1,\"385\":1,\"386\":3,\"387\":1,\"388\":1,\"389\":2,\"390\":2,\"391\":3,\"392\":2,\"393\":1,\"394\":1,\"395\":2,\"396\":1,\"397\":1,\"398\":1,\"399\":1,\"400\":2,\"401\":1,\"402\":1,\"403\":1,\"404\":1,\"405\":2,\"406\":1,\"408\":1},\"1\":{\"31\":1,\"39\":1,\"42\":1,\"43\":1,\"44\":6,\"45\":2,\"49\":2,\"50\":5,\"51\":1,\"55\":2,\"57\":1,\"61\":4,\"62\":9,\"67\":9,\"68\":1,\"69\":6,\"75\":5,\"76\":6,\"77\":6,\"78\":2,\"86\":2,\"89\":3,\"92\":5,\"95\":2,\"96\":4,\"97\":2,\"102\":2,\"105\":2,\"106\":1,\"110\":2,\"113\":1,\"115\":1,\"116\":2,\"120\":1,\"126\":9,\"128\":1,\"129\":1,\"133\":2,\"137\":1,\"139\":1,\"140\":1,\"142\":3,\"143\":1,\"146\":1,\"148\":2,\"149\":1,\"150\":2,\"155\":2,\"156\":1,\"157\":2,\"159\":5,\"160\":2,\"161\":1,\"164\":1,\"167\":1,\"168\":1,\"172\":1,\"173\":2,\"176\":1,\"177\":1,\"178\":2,\"180\":1,\"183\":1,\"191\":1,\"192\":1,\"199\":1,\"205\":13,\"210\":1,\"211\":1,\"216\":1,\"223\":2,\"227\":1,\"229\":1,\"231\":3,\"232\":2,\"234\":2,\"237\":1,\"238\":3,\"240\":1,\"241\":3,\"242\":1,\"301\":1,\"330\":1,\"332\":4,\"370\":2,\"388\":1,\"392\":1,\"395\":2}}],[\"gbk\",{\"1\":{\"344\":2}}],[\"governator\",{\"1\":{\"408\":1}}],[\"go\",{\"1\":{\"370\":2}}],[\"google\",{\"1\":{\"370\":1}}],[\"goods\",{\"1\":{\"86\":4}}],[\"good\",{\"1\":{\"86\":5}}],[\"golang\",{\"1\":{\"370\":1}}],[\"go并发编程\",{\"1\":{\"261\":1}}],[\"ghost\",{\"1\":{\"257\":1}}],[\"groupid>\",{\"1\":{\"374\":1}}],[\"graph\",{\"1\":{\"337\":1}}],[\"grid\",{\"1\":{\"330\":1}}],[\"grpc\",{\"1\":{\"247\":1,\"252\":2}}],[\"greater<int>\",{\"1\":{\"211\":1}}],[\"greater<int>>\",{\"1\":{\"210\":1,\"217\":1}}],[\"greater<pii>>\",{\"1\":{\"141\":1}}],[\"greater\",{\"1\":{\"78\":1}}],[\"gateway\",{\"1\":{\"247\":1}}],[\"gauss\",{\"1\":{\"173\":1}}],[\"g1\",{\"1\":{\"187\":1}}],[\"g被称为有向图游戏g1\",{\"1\":{\"187\":1}}],[\"gm的和\",{\"1\":{\"187\":1}}],[\"gm\",{\"1\":{\"187\":2}}],[\"g2\",{\"1\":{\"187\":3}}],[\"gcd\",{\"1\":{\"36\":1,\"165\":3,\"171\":5}}],[\"getpeereurekanodes\",{\"1\":{\"399\":1}}],[\"getpropertiesfromfile\",{\"1\":{\"386\":1}}],[\"getpresignedobjecturlargs\",{\"1\":{\"378\":1}}],[\"getpresignedobjecturl\",{\"1\":{\"378\":2}}],[\"geteurekaclientconfig\",{\"1\":{\"397\":1,\"399\":1}}],[\"getendpoint\",{\"1\":{\"375\":1}}],[\"getcacherefreshexecutorthreadpoolsize\",{\"1\":{\"395\":1}}],[\"getconfiginstance\",{\"1\":{\"382\":3,\"386\":2}}],[\"getheartbeatexecutorthreadpoolsize\",{\"1\":{\"395\":1}}],[\"getxx\",{\"1\":{\"387\":1,\"390\":1}}],[\"getwaittimeinmswhensyncempty\",{\"1\":{\"387\":1}}],[\"getintproperty\",{\"1\":{\"387\":1}}],[\"getinteger\",{\"1\":{\"344\":1}}],[\"getinstance\",{\"1\":{\"386\":1,\"401\":2}}],[\"getawssecretkey\",{\"1\":{\"384\":1}}],[\"getawsaccessid\",{\"1\":{\"384\":1}}],[\"getaccesskey\",{\"1\":{\"375\":1}}],[\"getservercontext\",{\"1\":{\"401\":2}}],[\"getsecretkey\",{\"1\":{\"375\":1}}],[\"getstringproperty\",{\"1\":{\"386\":1}}],[\"getstring\",{\"1\":{\"382\":1,\"386\":1}}],[\"getobjectargs\",{\"1\":{\"378\":1}}],[\"getobjectresponse\",{\"1\":{\"378\":3}}],[\"getobject\",{\"1\":{\"377\":1,\"378\":2}}],[\"getordefault\",{\"1\":{\"349\":2}}],[\"getbytes\",{\"1\":{\"344\":4}}],[\"getvalue\",{\"1\":{\"307\":1,\"332\":1,\"349\":1,\"357\":1}}],[\"getkey\",{\"1\":{\"307\":1,\"332\":1,\"349\":1,\"357\":1}}],[\"get\",{\"1\":{\"33\":1,\"35\":1,\"159\":1,\"160\":1,\"161\":1,\"163\":1,\"168\":1,\"178\":6,\"209\":1,\"347\":1,\"349\":3,\"378\":2,\"384\":1,\"386\":3,\"387\":4,\"388\":3,\"390\":1}}],[\"g\",{\"1\":{\"30\":1,\"42\":2,\"66\":3,\"97\":7,\"133\":1,\"140\":9,\"148\":7,\"186\":1,\"187\":1,\"306\":14,\"307\":10,\"308\":7,\"332\":17,\"337\":4,\"338\":8}}],[\"gitee\",{\"1\":{\"361\":1}}],[\"gitee镜像\",{\"1\":{\"361\":1}}],[\"github\",{\"1\":{\"265\":1,\"361\":2,\"365\":1,\"370\":3}}],[\"git\",{\"0\":{\"15\":1},\"1\":{\"7\":1}}],[\"00<\",{\"1\":{\"365\":1}}],[\"00\",{\"1\":{\"365\":1}}],[\"0001\",{\"1\":{\"126\":1}}],[\"0000\",{\"1\":{\"126\":6}}],[\"07\",{\"0\":{\"239\":1}}],[\"06\",{\"0\":{\"236\":1}}],[\"05\",{\"0\":{\"233\":1}}],[\"04\",{\"0\":{\"230\":1}}],[\"03\",{\"0\":{\"224\":1}}],[\"02\",{\"0\":{\"223\":1}}],[\"0号点既是根节点\",{\"1\":{\"200\":1}}],[\"0和1都被占用了\",{\"1\":{\"192\":1}}],[\"0是左端点\",{\"1\":{\"192\":1}}],[\"0表示白色\",{\"1\":{\"150\":1}}],[\"0表示还没放数\",{\"1\":{\"76\":1}}],[\"0表示还没考虑\",{\"1\":{\"75\":1}}],[\"0变1\",{\"1\":{\"125\":1}}],[\"0x3f3f3f3f\",{\"1\":{\"140\":1,\"141\":1,\"142\":1,\"143\":1}}],[\"0x3f\",{\"1\":{\"100\":1,\"140\":2,\"141\":1,\"142\":1,\"143\":1,\"148\":2}}],[\"01\",{\"0\":{\"84\":1,\"222\":1}}],[\"0辆车\",{\"1\":{\"78\":1}}],[\"0只猫\",{\"1\":{\"78\":1}}],[\"0⩽m⩽n\",{\"1\":{\"77\":1}}],[\"0⩽r⩽1090<n⩽100000⩽xi​\",{\"1\":{\"51\":1}}],[\"0\",{\"1\":{\"30\":1,\"31\":1,\"32\":4,\"33\":3,\"34\":3,\"38\":1,\"39\":1,\"42\":1,\"43\":2,\"49\":7,\"50\":11,\"51\":4,\"61\":1,\"62\":1,\"66\":30,\"67\":10,\"69\":3,\"75\":5,\"76\":2,\"77\":2,\"78\":6,\"79\":5,\"84\":2,\"85\":2,\"86\":8,\"87\":9,\"89\":4,\"90\":11,\"91\":1,\"92\":2,\"93\":8,\"94\":5,\"95\":1,\"96\":7,\"97\":19,\"99\":13,\"100\":13,\"102\":16,\"106\":2,\"112\":4,\"115\":10,\"116\":19,\"117\":9,\"118\":9,\"126\":39,\"127\":4,\"128\":2,\"129\":1,\"133\":6,\"137\":3,\"140\":3,\"141\":2,\"142\":3,\"143\":1,\"146\":1,\"148\":3,\"149\":5,\"150\":2,\"151\":2,\"155\":1,\"156\":3,\"157\":3,\"160\":2,\"161\":4,\"163\":1,\"164\":2,\"167\":2,\"168\":4,\"169\":1,\"171\":1,\"172\":3,\"173\":5,\"175\":2,\"176\":3,\"177\":2,\"178\":8,\"180\":6,\"182\":3,\"191\":1,\"192\":2,\"194\":2,\"195\":1,\"197\":1,\"198\":2,\"199\":4,\"200\":6,\"202\":1,\"204\":1,\"208\":1,\"209\":1,\"215\":2,\"216\":1,\"217\":3,\"218\":4,\"219\":2,\"231\":2,\"242\":4,\"257\":4,\"276\":1,\"277\":2,\"283\":2,\"289\":2,\"301\":1,\"305\":1,\"306\":11,\"307\":15,\"308\":8,\"312\":1,\"314\":7,\"319\":1,\"330\":1,\"331\":5,\"332\":28,\"336\":3,\"337\":6,\"338\":3,\"344\":1,\"349\":1,\"355\":1,\"368\":1,\"395\":2,\"407\":1}}],[\"+x\",{\"1\":{\"362\":1}}],[\"+2xt​​\",{\"1\":{\"169\":1}}],[\"+inf\",{\"1\":{\"148\":1}}],[\"+happy\",{\"1\":{\"102\":1}}],[\"+f\",{\"1\":{\"96\":1}}],[\"++size\",{\"1\":{\"205\":1}}],[\"++res\",{\"1\":{\"157\":1}}],[\"++tt\",{\"1\":{\"137\":2,\"194\":1,\"195\":1,\"197\":1,\"198\":1}}],[\"++y\",{\"1\":{\"51\":1}}],[\"++x\",{\"1\":{\"51\":1}}],[\"++\",{\"1\":{\"49\":2,\"96\":5,\"97\":2,\"99\":6,\"102\":1,\"133\":4,\"140\":3,\"142\":2,\"144\":1,\"149\":1,\"150\":1,\"151\":1,\"164\":3,\"168\":3,\"173\":7,\"176\":1,\"177\":1,\"178\":7,\"191\":1,\"200\":4,\"203\":1,\"204\":1,\"207\":1,\"209\":1,\"210\":1}}],[\"++mx\",{\"1\":{\"38\":1}}],[\"+=\",{\"1\":{\"43\":1,\"49\":2,\"50\":2,\"51\":2,\"62\":4,\"67\":1,\"78\":1,\"86\":4,\"97\":4,\"99\":1,\"102\":2,\"112\":1,\"115\":2,\"117\":1,\"122\":1,\"123\":2,\"148\":1,\"149\":1,\"159\":1,\"160\":2,\"178\":2,\"180\":1,\"202\":2,\"203\":1,\"204\":1}}],[\"+size\",{\"1\":{\"34\":1}}],[\"+\",{\"1\":{\"30\":3,\"33\":2,\"35\":1,\"36\":2,\"37\":2,\"42\":4,\"43\":1,\"44\":4,\"49\":2,\"50\":1,\"51\":5,\"66\":3,\"67\":5,\"69\":1,\"75\":3,\"76\":1,\"77\":3,\"78\":5,\"79\":4,\"84\":2,\"85\":2,\"86\":4,\"87\":2,\"89\":6,\"90\":6,\"91\":4,\"92\":1,\"93\":7,\"94\":8,\"95\":12,\"96\":10,\"97\":4,\"100\":2,\"102\":2,\"105\":5,\"106\":4,\"109\":4,\"110\":2,\"111\":2,\"112\":8,\"113\":1,\"115\":3,\"116\":2,\"118\":1,\"120\":4,\"121\":1,\"122\":1,\"123\":4,\"127\":1,\"128\":1,\"129\":3,\"133\":3,\"134\":1,\"139\":1,\"140\":2,\"141\":2,\"142\":4,\"143\":2,\"144\":3,\"146\":1,\"148\":2,\"149\":2,\"150\":1,\"159\":5,\"160\":1,\"161\":1,\"164\":11,\"171\":3,\"172\":2,\"173\":2,\"175\":1,\"177\":1,\"178\":3,\"179\":1,\"199\":4,\"205\":4,\"207\":2,\"208\":1,\"209\":2,\"210\":1,\"211\":13,\"215\":4,\"216\":4,\"217\":2,\"218\":2,\"219\":1,\"257\":1,\"259\":4,\"276\":1,\"283\":2,\"301\":2,\"306\":2,\"307\":2,\"308\":10,\"314\":3,\"332\":4,\"343\":1,\"349\":1,\"377\":5,\"382\":1,\"386\":5,\"387\":1}}],[\"+1\",{\"1\":{\"30\":1,\"79\":1,\"257\":1,\"276\":1,\"277\":1}}],[\"nas\",{\"1\":{\"370\":1}}],[\"name\",{\"1\":{\"377\":1,\"394\":1}}],[\"name>\",{\"1\":{\"365\":1}}],[\"namespace\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"61\":1,\"62\":1,\"66\":1,\"67\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"84\":1,\"85\":1,\"86\":3,\"87\":2,\"89\":1,\"90\":3,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"99\":1,\"100\":1,\"102\":1,\"112\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"127\":2,\"140\":1,\"148\":1,\"149\":1,\"164\":1,\"172\":1,\"180\":1,\"182\":1,\"199\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"387\":1}}],[\"n为str长度\",{\"1\":{\"344\":2}}],[\"n为选修课程数\",{\"1\":{\"338\":1}}],[\"n为模式串长度\",{\"1\":{\"199\":1}}],[\"nginx\",{\"1\":{\"247\":1}}],[\"n个闭区间\",{\"1\":{\"215\":1,\"217\":1}}],[\"nim博弈属于公平组合游戏\",{\"1\":{\"183\":1}}],[\"nim博弈先手必胜\",{\"1\":{\"182\":1}}],[\"nim博弈不存在平局\",{\"1\":{\"182\":1}}],[\"nim游戏\",{\"0\":{\"182\":1}}],[\"n=p1a1​​p2a2​​\",{\"1\":{\"167\":1}}],[\"n=a+cb​\",{\"1\":{\"79\":2}}],[\"n1表示第一个集合中的点数\",{\"1\":{\"151\":1}}],[\"n1\",{\"1\":{\"151\":2}}],[\"n是点数\",{\"1\":{\"149\":1}}],[\"n次迭代\",{\"1\":{\"148\":1}}],[\"n^3\",{\"1\":{\"146\":1,\"173\":1}}],[\"n表示点数\",{\"1\":{\"142\":1,\"148\":1,\"150\":1}}],[\"nm\",{\"1\":{\"139\":2,\"142\":1,\"143\":1,\"144\":1,\"151\":1}}],[\"n2表示第二个集合中的点数\",{\"1\":{\"151\":1}}],[\"n2\",{\"1\":{\"139\":1,\"140\":1,\"148\":1,\"151\":1}}],[\"net\",{\"1\":{\"408\":1}}],[\"netflixoss\",{\"1\":{\"407\":2}}],[\"netflix\",{\"1\":{\"382\":1}}],[\"nebula\",{\"1\":{\"407\":2}}],[\"newscheduledthreadpool\",{\"1\":{\"395\":1}}],[\"newbuilder\",{\"1\":{\"391\":1}}],[\"newvalue\",{\"1\":{\"349\":1,\"356\":1}}],[\"newchar\",{\"1\":{\"344\":1}}],[\"new\",{\"1\":{\"277\":2,\"289\":2,\"301\":1,\"307\":3,\"308\":1,\"314\":1,\"332\":7,\"337\":2,\"338\":4,\"344\":4,\"345\":1,\"347\":4,\"348\":3,\"349\":4,\"350\":2,\"351\":1,\"352\":1,\"353\":4,\"378\":4,\"384\":1,\"385\":1,\"390\":2,\"394\":2,\"395\":8,\"397\":3,\"400\":1,\"401\":1}}],[\"next\",{\"1\":{\"199\":4}}],[\"ne\",{\"1\":{\"133\":2,\"135\":1,\"136\":1,\"137\":1,\"141\":3,\"143\":3,\"144\":2,\"150\":2,\"151\":2,\"191\":10,\"199\":5,\"207\":3}}],[\"n代表点数\",{\"1\":{\"133\":1}}],[\"nlogn\",{\"1\":{\"112\":1}}],[\"n−1\",{\"1\":{\"100\":3}}],[\"n−m\",{\"1\":{\"77\":1}}],[\"n<=0\",{\"1\":{\"97\":1}}],[\"n共有多少种不同的划分方法\",{\"1\":{\"96\":1}}],[\"n+1\",{\"1\":{\"172\":1}}],[\"n+m\",{\"1\":{\"137\":1}}],[\"n+\",{\"1\":{\"77\":1}}],[\"n>0\",{\"1\":{\"77\":1}}],[\"n×n\",{\"1\":{\"68\":2}}],[\"n×m\",{\"1\":{\"66\":1,\"99\":1}}],[\"nohup\",{\"1\":{\"362\":1}}],[\"nohub\",{\"1\":{\"362\":1}}],[\"none\",{\"1\":{\"210\":1}}],[\"note\",{\"0\":{\"418\":1,\"429\":1}}],[\"not\",{\"1\":{\"194\":1,\"197\":1,\"242\":2,\"408\":1,\"415\":1}}],[\"node\",{\"1\":{\"133\":4,\"211\":3,\"215\":2,\"216\":2,\"277\":5,\"288\":8,\"289\":14}}],[\"no\",{\"1\":{\"61\":3,\"182\":1}}],[\"noexcept\",{\"1\":{\"31\":2}}],[\"npos是这样定义的\",{\"1\":{\"40\":1}}],[\"npos是一个静态成员常量\",{\"1\":{\"40\":1}}],[\"npos\",{\"0\":{\"40\":1},\"1\":{\"40\":2}}],[\"nu\",{\"1\":{\"337\":1}}],[\"numcourses\",{\"1\":{\"336\":2}}],[\"numislands\",{\"1\":{\"306\":1,\"307\":1,\"308\":1}}],[\"nums\",{\"1\":{\"97\":5,\"219\":7,\"299\":1,\"301\":7,\"318\":1,\"319\":4}}],[\"num\",{\"1\":{\"39\":8,\"219\":5}}],[\"null\",{\"1\":{\"25\":4,\"208\":1,\"276\":1,\"277\":3,\"283\":1,\"289\":5,\"295\":2,\"301\":1,\"326\":2,\"382\":3}}],[\"n\",{\"1\":{\"30\":3,\"32\":1,\"33\":1,\"34\":1,\"42\":7,\"43\":1,\"49\":9,\"50\":16,\"51\":9,\"57\":6,\"61\":10,\"62\":16,\"66\":14,\"68\":5,\"69\":10,\"75\":8,\"76\":10,\"77\":8,\"78\":13,\"79\":8,\"84\":11,\"85\":11,\"86\":26,\"87\":19,\"89\":14,\"90\":21,\"91\":10,\"92\":16,\"93\":13,\"94\":10,\"95\":13,\"96\":16,\"97\":6,\"99\":11,\"100\":13,\"102\":6,\"112\":9,\"115\":1,\"127\":14,\"128\":1,\"129\":1,\"133\":13,\"134\":2,\"137\":3,\"139\":2,\"140\":13,\"141\":10,\"142\":13,\"143\":7,\"144\":11,\"146\":5,\"147\":2,\"148\":14,\"149\":14,\"150\":6,\"151\":4,\"155\":1,\"156\":10,\"157\":15,\"159\":16,\"160\":2,\"161\":5,\"164\":5,\"167\":3,\"168\":8,\"172\":8,\"173\":21,\"175\":1,\"176\":3,\"177\":8,\"178\":14,\"179\":3,\"180\":11,\"182\":3,\"191\":3,\"192\":3,\"194\":1,\"195\":1,\"197\":1,\"198\":1,\"199\":5,\"200\":2,\"202\":4,\"203\":3,\"204\":3,\"205\":6,\"207\":9,\"208\":5,\"209\":3,\"211\":8,\"215\":7,\"216\":7,\"217\":7,\"218\":9,\"219\":4,\"250\":1,\"289\":4,\"306\":4,\"307\":4,\"308\":6,\"314\":6,\"319\":2,\"330\":1,\"332\":7,\"337\":3,\"338\":6,\"342\":1,\"344\":12,\"345\":2,\"347\":3,\"355\":1,\"370\":2}}],[\"aws\",{\"1\":{\"370\":2,\"377\":2}}],[\"amazon\",{\"1\":{\"370\":2}}],[\"amd64\",{\"1\":{\"362\":1,\"364\":1}}],[\"azure\",{\"1\":{\"370\":1}}],[\"article\",{\"1\":{\"408\":1}}],[\"artifactid>\",{\"1\":{\"374\":1}}],[\"are\",{\"1\":{\"386\":1}}],[\"archaius1utils\",{\"1\":{\"394\":1}}],[\"archaius\",{\"1\":{\"386\":1}}],[\"arn\",{\"1\":{\"377\":1}}],[\"arguments>\",{\"1\":{\"365\":1}}],[\"arraydeque是deque的一个实现类\",{\"1\":{\"350\":1}}],[\"arraydeque<>\",{\"1\":{\"350\":1}}],[\"arraydeque\",{\"1\":{\"350\":2}}],[\"array\",{\"1\":{\"347\":2}}],[\"arraylist<e>\",{\"1\":{\"347\":1}}],[\"arraylist<>\",{\"1\":{\"332\":2,\"347\":2,\"348\":1}}],[\"arraylist\",{\"1\":{\"347\":2}}],[\"arr2\",{\"1\":{\"342\":1}}],[\"arr1\",{\"1\":{\"342\":1}}],[\"arr\",{\"1\":{\"90\":7,\"215\":7,\"216\":9,\"342\":5,\"344\":2,\"356\":1}}],[\"aec\",{\"1\":{\"312\":1}}],[\"action\",{\"1\":{\"377\":1}}],[\"accessid\",{\"1\":{\"384\":1}}],[\"accesskey\",{\"1\":{\"375\":2}}],[\"account\",{\"1\":{\"247\":2,\"369\":1}}],[\"ace\",{\"1\":{\"312\":1}}],[\"ahead\",{\"1\":{\"249\":1}}],[\"applying\",{\"1\":{\"407\":1}}],[\"applicationinfomanager\",{\"1\":{\"390\":3,\"392\":1,\"394\":1,\"399\":1,\"400\":1}}],[\"application\",{\"1\":{\"375\":1,\"390\":1}}],[\"append\",{\"1\":{\"343\":1,\"345\":1}}],[\"apache\",{\"1\":{\"368\":1}}],[\"api\",{\"0\":{\"376\":1},\"1\":{\"247\":3,\"341\":1,\"369\":2,\"370\":2,\"375\":1},\"2\":{\"360\":1}}],[\"ap−1≡1\",{\"1\":{\"176\":1}}],[\"average\",{\"1\":{\"242\":2}}],[\"a9\",{\"1\":{\"242\":1}}],[\"a3​\",{\"1\":{\"195\":1}}],[\"a3​≥a5​\",{\"1\":{\"195\":1}}],[\"a−2\",{\"1\":{\"177\":2}}],[\"a−1\",{\"1\":{\"177\":2}}],[\"a−b+1\",{\"1\":{\"177\":2}}],[\"a−b−1\",{\"1\":{\"177\":1}}],[\"a−b\",{\"1\":{\"176\":2,\"177\":3}}],[\"a∗\",{\"1\":{\"177\":2}}],[\"a1\",{\"1\":{\"172\":6,\"182\":1}}],[\"a1​\",{\"1\":{\"49\":1,\"50\":2,\"172\":1}}],[\"ak\",{\"1\":{\"169\":1}}],[\"abcde\",{\"1\":{\"312\":2}}],[\"abstractinstanceregistry\",{\"1\":{\"397\":1}}],[\"abstractconfiguration\",{\"1\":{\"382\":2}}],[\"abs\",{\"1\":{\"172\":2,\"173\":3,\"355\":1}}],[\"ab=a2x1​×a2x2​×\",{\"1\":{\"169\":1}}],[\"ab\",{\"1\":{\"169\":1,\"242\":1}}],[\"a2\",{\"1\":{\"172\":5,\"182\":1}}],[\"a2logk\",{\"1\":{\"169\":2}}],[\"a22\",{\"1\":{\"169\":2}}],[\"a21\",{\"1\":{\"169\":2}}],[\"a20\",{\"1\":{\"169\":2}}],[\"a2​\",{\"1\":{\"49\":1,\"50\":2,\"172\":1}}],[\"a表示出点\",{\"1\":{\"142\":1}}],[\"allow\",{\"1\":{\"377\":1}}],[\"all\",{\"1\":{\"349\":2}}],[\"alls\",{\"1\":{\"129\":9}}],[\"alice\",{\"1\":{\"344\":1}}],[\"algorithm\",{\"1\":{\"112\":1},\"2\":{\"21\":1}}],[\"a的这一位数\",{\"1\":{\"116\":1}}],[\"a长度不等于b\",{\"1\":{\"116\":1}}],[\"admin\",{\"0\":{\"227\":1,\"251\":1},\"1\":{\"247\":2,\"251\":1}}],[\"address\",{\"1\":{\"362\":3,\"363\":1,\"364\":1}}],[\"addall\",{\"1\":{\"356\":1}}],[\"add\",{\"1\":{\"115\":2,\"133\":3,\"141\":1,\"143\":1,\"191\":1,\"277\":3,\"332\":2,\"337\":1,\"338\":1,\"347\":2,\"348\":1,\"351\":1}}],[\"adj\",{\"1\":{\"43\":1}}],[\"a>b\",{\"1\":{\"97\":1}}],[\"a||b\",{\"1\":{\"97\":1}}],[\"a是几\",{\"1\":{\"79\":1}}],[\"a不变\",{\"1\":{\"79\":1}}],[\"and\",{\"1\":{\"231\":6,\"257\":3}}],[\"any\",{\"1\":{\"210\":1}}],[\"an\",{\"1\":{\"182\":1,\"407\":1}}],[\"ans++\",{\"1\":{\"79\":1,\"215\":1}}],[\"ans\",{\"1\":{\"79\":2,\"89\":4,\"90\":4,\"97\":13,\"111\":3,\"215\":2,\"219\":4,\"283\":4,\"319\":4}}],[\"an​\",{\"1\":{\"49\":1,\"50\":2,\"172\":1}}],[\"a和\",{\"1\":{\"61\":1}}],[\"aj​\",{\"1\":{\"49\":1}}],[\"ai\",{\"1\":{\"370\":1}}],[\"ai+1​\",{\"1\":{\"49\":1}}],[\"ai​\",{\"1\":{\"49\":2,\"172\":1,\"336\":2}}],[\"aside\",{\"1\":{\"229\":1,\"249\":1}}],[\"ask\",{\"1\":{\"97\":3}}],[\"assign\",{\"0\":{\"42\":1},\"1\":{\"42\":6}}],[\"asm\",{\"1\":{\"34\":1}}],[\"atoi\",{\"1\":{\"39\":3}}],[\"ax​\",{\"1\":{\"195\":1}}],[\"ax​≥ay​\",{\"1\":{\"195\":1}}],[\"ax\",{\"1\":{\"36\":2,\"171\":2}}],[\"ax+by=1\",{\"1\":{\"171\":1}}],[\"ax+by=a\",{\"1\":{\"171\":1}}],[\"ax+by=gcd\",{\"1\":{\"171\":2}}],[\"ax+by\",{\"1\":{\"36\":1,\"171\":1}}],[\"autorollattime>\",{\"1\":{\"365\":1}}],[\"auto\",{\"1\":{\"33\":1,\"38\":1,\"43\":4,\"66\":1,\"67\":1,\"86\":1,\"97\":5,\"99\":1,\"115\":1,\"116\":2,\"117\":1,\"118\":1,\"130\":1,\"133\":1,\"141\":1,\"143\":1,\"144\":1,\"164\":1,\"217\":1,\"219\":1}}],[\"a\",{\"0\":{\"35\":1},\"1\":{\"30\":1,\"33\":1,\"35\":2,\"36\":3,\"42\":2,\"44\":11,\"45\":1,\"61\":3,\"67\":6,\"79\":19,\"86\":4,\"89\":5,\"90\":10,\"91\":6,\"92\":8,\"93\":3,\"94\":10,\"95\":3,\"97\":8,\"102\":3,\"105\":7,\"106\":12,\"109\":1,\"110\":2,\"112\":13,\"115\":15,\"116\":27,\"117\":17,\"118\":15,\"120\":5,\"126\":17,\"133\":13,\"140\":9,\"141\":3,\"142\":9,\"143\":3,\"146\":1,\"148\":5,\"149\":8,\"160\":13,\"164\":2,\"165\":6,\"169\":5,\"171\":15,\"172\":6,\"173\":17,\"175\":2,\"176\":13,\"177\":22,\"178\":10,\"191\":2,\"200\":2,\"203\":2,\"204\":3,\"205\":4,\"211\":29,\"289\":2,\"294\":2,\"338\":1,\"344\":4,\"347\":2,\"355\":10,\"356\":1,\"382\":2,\"386\":1}}],[\"一篇文章等\",{\"1\":{\"257\":1}}],[\"一共有以下模块\",{\"1\":{\"247\":1}}],[\"一致性\",{\"1\":{\"241\":1}}],[\"一文从内容运营层面\",{\"1\":{\"240\":1}}],[\"一文所使用的sdk\",{\"1\":{\"234\":1}}],[\"一方面是审核和风控\",{\"1\":{\"237\":1}}],[\"一是服务编排\",{\"1\":{\"226\":1}}],[\"一是客户端的评论组件\",{\"1\":{\"226\":1}}],[\"一写一读\",{\"1\":{\"226\":1}}],[\"一定命中某一个节点\",{\"1\":{\"262\":1}}],[\"一定等于\",{\"1\":{\"176\":1}}],[\"一定在\",{\"1\":{\"172\":1}}],[\"一定不含有奇数环\",{\"1\":{\"150\":1}}],[\"一定要先累加\",{\"1\":{\"148\":1}}],[\"一定满足\",{\"1\":{\"142\":1}}],[\"一定至少存在一个入度为\",{\"1\":{\"137\":1}}],[\"一定存在整数对\",{\"1\":{\"171\":1}}],[\"一定存在整数\",{\"1\":{\"36\":1,\"171\":1}}],[\"一直递归寻找最下层的左节点\",{\"1\":{\"271\":1}}],[\"一直走到底层\",{\"1\":{\"89\":1}}],[\"一直找到祖先的祖先\",{\"1\":{\"58\":1}}],[\"一\",{\"0\":{\"382\":1},\"1\":{\"87\":1,\"90\":1}}],[\"一个对象会被分成\",{\"1\":{\"370\":1}}],[\"一个字符串的子序列是指这样一个新的字符串\",{\"1\":{\"312\":1}}],[\"一个人去做加载存储\",{\"1\":{\"261\":1}}],[\"一个主题可能是一个视频稿件\",{\"1\":{\"257\":1}}],[\"一个有趣的问题是\",{\"1\":{\"229\":1}}],[\"一个有向无环图\",{\"1\":{\"137\":1}}],[\"一个指向后\",{\"1\":{\"192\":1}}],[\"一个指向前\",{\"1\":{\"192\":1}}],[\"一个图所有匹配中\",{\"1\":{\"151\":1}}],[\"一个\",{\"1\":{\"151\":1,\"250\":1}}],[\"一个数的倍数一定是合数\",{\"1\":{\"159\":1}}],[\"一个数\",{\"1\":{\"90\":1}}],[\"一个正整数\",{\"1\":{\"79\":1,\"96\":1}}],[\"一个整数\",{\"1\":{\"76\":1}}],[\"一个整数表示答案\",{\"1\":{\"68\":1}}],[\"一开始\",{\"1\":{\"57\":1,\"231\":1}}],[\"一开始都是独立的\",{\"1\":{\"57\":1}}],[\"一些常见的用途有求连通子图\",{\"1\":{\"55\":1}}],[\"一些经验和技巧\",{\"0\":{\"29\":1},\"1\":{\"3\":1}}],[\"一样\",{\"1\":{\"45\":1}}],[\"一维差分\",{\"0\":{\"122\":1}}],[\"一维前缀和\",{\"0\":{\"120\":1}}],[\"一维优化\",{\"1\":{\"96\":1}}],[\"一维优化写法\",{\"1\":{\"86\":1}}],[\"一维\",{\"1\":{\"42\":1,\"84\":1,\"85\":1}}],[\"一旦程序使用长度超过\",{\"1\":{\"31\":1}}],[\"一般不需要使用分布式锁\",{\"1\":{\"261\":1}}],[\"一般会存储检索\",{\"1\":{\"251\":1}}],[\"一般会使用\",{\"1\":{\"249\":1}}],[\"一般会在有评论发布或者删除时修改\",{\"1\":{\"231\":1}}],[\"一般出于性能考虑\",{\"1\":{\"238\":1}}],[\"一般采用\",{\"1\":{\"229\":1}}],[\"一般用于凸显发评人的身份等\",{\"1\":{\"223\":1}}],[\"一般是按照主题\",{\"1\":{\"262\":1}}],[\"一般是\",{\"1\":{\"117\":1,\"118\":1}}],[\"一般来说会希望大家看到的评论排序都大致相同\",{\"1\":{\"241\":1}}],[\"一般来说\",{\"1\":{\"111\":1,\"228\":1,\"241\":1,\"251\":1}}],[\"一般\",{\"1\":{\"30\":1}}],[\"vipaddressresolver\",{\"1\":{\"391\":1}}],[\"visited\",{\"1\":{\"306\":2}}],[\"vis\",{\"1\":{\"76\":4,\"102\":3}}],[\"volatile\",{\"1\":{\"382\":4}}],[\"void\",{\"1\":{\"43\":1,\"57\":1,\"59\":1,\"61\":2,\"62\":2,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":2,\"97\":2,\"102\":1,\"105\":1,\"106\":1,\"126\":1,\"130\":1,\"133\":2,\"141\":1,\"149\":2,\"156\":1,\"159\":1,\"160\":1,\"161\":1,\"168\":1,\"178\":1,\"191\":5,\"192\":3,\"200\":1,\"202\":2,\"205\":3,\"207\":1,\"219\":1,\"287\":1,\"289\":1,\"306\":1,\"307\":1,\"308\":1,\"332\":1,\"338\":1,\"377\":4,\"378\":6,\"382\":1,\"386\":1,\"401\":1,\"402\":1}}],[\"v4\",{\"1\":{\"370\":1}}],[\"v>\",{\"0\":{\"357\":1},\"1\":{\"357\":1}}],[\"v>的个数\",{\"1\":{\"349\":1}}],[\"v>>\",{\"1\":{\"349\":1}}],[\"vuepress\",{\"1\":{\"265\":3}}],[\"version\",{\"1\":{\"377\":1,\"407\":2}}],[\"version>\",{\"1\":{\"374\":1}}],[\"ver\",{\"1\":{\"141\":4}}],[\"vector<node>\",{\"1\":{\"211\":1}}],[\"vector<edge>\",{\"1\":{\"133\":1}}],[\"vector<pii>\",{\"1\":{\"130\":2,\"141\":1,\"219\":1}}],[\"vector<good>\",{\"1\":{\"86\":1}}],[\"vector<vector<int>>\",{\"1\":{\"30\":1,\"42\":1}}],[\"vector<int>\",{\"1\":{\"30\":2,\"38\":1,\"42\":3,\"43\":1,\"44\":1,\"90\":2,\"97\":8,\"99\":1,\"115\":5,\"116\":7,\"117\":4,\"118\":4,\"129\":1,\"157\":2,\"163\":2,\"178\":4,\"210\":1,\"211\":1,\"217\":1,\"319\":3}}],[\"vector\",{\"0\":{\"30\":1},\"1\":{\"42\":4,\"210\":1,\"211\":3,\"219\":1,\"350\":1}}],[\"v2\",{\"1\":{\"42\":2,\"43\":2,\"368\":1,\"370\":1}}],[\"v1\",{\"1\":{\"42\":3,\"43\":2}}],[\"v\",{\"1\":{\"38\":1,\"43\":4,\"44\":11,\"84\":6,\"85\":6,\"86\":19,\"87\":8,\"210\":1,\"349\":3,\"356\":9}}],[\"valid\",{\"1\":{\"99\":4}}],[\"values\",{\"1\":{\"349\":4,\"356\":1}}],[\"value>\",{\"1\":{\"349\":1}}],[\"valueof\",{\"1\":{\"344\":2}}],[\"value\",{\"1\":{\"40\":1,\"232\":1,\"259\":1,\"349\":4,\"356\":1,\"358\":16,\"387\":1}}],[\"val\",{\"1\":{\"25\":2,\"42\":2,\"112\":4,\"295\":2,\"353\":2}}],[\"17\",{\"1\":{\"377\":1}}],[\"171gb\",{\"1\":{\"370\":1}}],[\"183gb\",{\"1\":{\"370\":1}}],[\"1是右端点\",{\"1\":{\"192\":1}}],[\"1~n\",{\"1\":{\"159\":1}}],[\"1~n表示放的哪些数\",{\"1\":{\"76\":1}}],[\"1表示不存在\",{\"1\":{\"191\":1}}],[\"1表示黑色\",{\"1\":{\"150\":1}}],[\"1表示未染色\",{\"1\":{\"150\":1}}],[\"1表示已选\",{\"1\":{\"75\":1}}],[\"1ll\",{\"1\":{\"133\":1}}],[\"1变0\",{\"1\":{\"125\":1}}],[\"1<<n\",{\"1\":{\"100\":1}}],[\"1<<j\",{\"1\":{\"100\":2}}],[\"1的最短距离\",{\"1\":{\"100\":1}}],[\"1×2\",{\"1\":{\"99\":1}}],[\"1个0\",{\"1\":{\"97\":1}}],[\"1个9\",{\"1\":{\"97\":1}}],[\"1≤n≤3000\",{\"1\":{\"92\":1}}],[\"1∼9\",{\"1\":{\"79\":3}}],[\"1∼n\",{\"1\":{\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"167\":1}}],[\"1∼8\",{\"1\":{\"67\":1}}],[\"1994\",{\"1\":{\"78\":1}}],[\"1996\",{\"1\":{\"78\":1}}],[\"19\",{\"1\":{\"67\":1}}],[\"1⩽ci​⩽w⩽108\",{\"1\":{\"78\":1}}],[\"1⩽q⩽1000000\",{\"1\":{\"61\":1}}],[\"1⩽m⩽1000000\",{\"1\":{\"61\":1}}],[\"1⩽n<106\",{\"1\":{\"79\":1}}],[\"1⩽n⩽9\",{\"1\":{\"76\":1}}],[\"1⩽n⩽18\",{\"1\":{\"78\":1}}],[\"1⩽n⩽15\",{\"1\":{\"75\":1}}],[\"1⩽n⩽1000\",{\"1\":{\"68\":1}}],[\"1⩽n⩽105\",{\"1\":{\"50\":1}}],[\"1⩽n⩽10\",{\"1\":{\"50\":1}}],[\"1⩽n⩽7\",{\"1\":{\"69\":1}}],[\"1⩽n⩽20000\",{\"1\":{\"61\":1}}],[\"1⩽n\",{\"1\":{\"49\":1,\"66\":1}}],[\"1会导致数组越界\",{\"1\":{\"51\":1}}],[\"1e6\",{\"1\":{\"115\":1}}],[\"1e\",{\"1\":{\"113\":1,\"173\":1}}],[\"1e3\",{\"1\":{\"96\":1}}],[\"1e5\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"148\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1}}],[\"1e9+7\",{\"1\":{\"175\":1}}],[\"1e9\",{\"1\":{\"31\":1,\"89\":1,\"95\":1,\"96\":1,\"164\":1}}],[\"16\",{\"0\":{\"45\":1}}],[\"15\",{\"0\":{\"44\":1},\"1\":{\"93\":1}}],[\"14\",{\"0\":{\"43\":1},\"1\":{\"382\":1}}],[\"13331\",{\"1\":{\"209\":1}}],[\"131\",{\"1\":{\"209\":1}}],[\"13\",{\"0\":{\"42\":1},\"1\":{\"49\":1}}],[\"12010\",{\"1\":{\"86\":1}}],[\"12\",{\"0\":{\"41\":1},\"1\":{\"78\":1,\"99\":1,\"370\":1}}],[\"123456\",{\"1\":{\"115\":1,\"116\":1}}],[\"12345678x\",{\"1\":{\"67\":1}}],[\"123\",{\"1\":{\"39\":7,\"378\":1}}],[\"1143\",{\"1\":{\"311\":1}}],[\"1111\",{\"1\":{\"126\":7,\"180\":1}}],[\"1110\",{\"1\":{\"126\":8}}],[\"1100\",{\"1\":{\"85\":1}}],[\"110\",{\"1\":{\"66\":1,\"86\":1,\"87\":2,\"164\":1}}],[\"11\",{\"0\":{\"40\":1},\"1\":{\"79\":2,\"173\":1}}],[\"108\",{\"1\":{\"298\":1}}],[\"104\",{\"1\":{\"274\":1}}],[\"10的二进制表示为4位数\",{\"1\":{\"127\":1}}],[\"101\",{\"1\":{\"292\":1}}],[\"1011\",{\"1\":{\"126\":1}}],[\"101000\",{\"1\":{\"127\":1}}],[\"1010\",{\"1\":{\"84\":1,\"90\":1,\"91\":1,\"93\":1,\"94\":1,\"126\":8,\"127\":2}}],[\"105\",{\"1\":{\"79\":1}}],[\"10\",{\"0\":{\"39\":1,\"181\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":1,\"187\":1,\"211\":1},\"1\":{\"49\":1,\"50\":1,\"51\":2,\"61\":2,\"69\":1,\"76\":1,\"79\":4,\"93\":2,\"97\":12,\"112\":1,\"115\":3,\"116\":3,\"117\":2,\"118\":1,\"127\":3,\"133\":1,\"148\":1,\"149\":1,\"178\":4,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"377\":1}}],[\"10010\",{\"1\":{\"199\":1}}],[\"1000∗60∗5\",{\"1\":{\"387\":1}}],[\"1000\",{\"1\":{\"126\":1,\"127\":1,\"387\":1,\"397\":3}}],[\"100010\",{\"1\":{\"90\":2,\"127\":1,\"199\":1}}],[\"100=82+1973546​\",{\"1\":{\"79\":1}}],[\"100=3+71469258​\",{\"1\":{\"79\":1}}],[\"100\",{\"1\":{\"5\":1,\"79\":3,\"353\":2,\"369\":1}}],[\"1\",{\"0\":{\"30\":1,\"41\":1,\"57\":1,\"83\":1,\"84\":2,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"99\":1,\"102\":1,\"105\":1,\"108\":1,\"115\":1,\"120\":1,\"125\":1,\"133\":1,\"139\":1,\"140\":2,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"146\":1,\"148\":1,\"154\":1,\"155\":2,\"156\":1,\"158\":1,\"159\":2,\"160\":1,\"161\":1,\"163\":1,\"167\":1,\"175\":1,\"182\":1,\"190\":1,\"191\":2,\"192\":1,\"194\":1,\"195\":1,\"197\":1,\"202\":1,\"207\":1,\"214\":1,\"215\":2,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"225\":1,\"231\":1,\"234\":1,\"237\":1,\"240\":1,\"381\":1,\"384\":1,\"385\":2,\"387\":1,\"388\":1,\"390\":1,\"394\":1,\"397\":1,\"399\":1,\"404\":1,\"407\":1},\"1\":{\"30\":3,\"31\":1,\"32\":3,\"33\":1,\"36\":1,\"39\":1,\"40\":2,\"41\":2,\"42\":5,\"43\":4,\"44\":1,\"45\":2,\"49\":11,\"50\":7,\"51\":13,\"55\":2,\"57\":2,\"61\":6,\"62\":12,\"66\":29,\"67\":16,\"68\":4,\"69\":8,\"75\":10,\"76\":11,\"77\":14,\"78\":6,\"79\":5,\"84\":5,\"85\":4,\"86\":9,\"87\":2,\"89\":20,\"90\":14,\"91\":14,\"92\":11,\"93\":15,\"94\":22,\"95\":17,\"96\":15,\"97\":20,\"99\":11,\"100\":8,\"102\":14,\"105\":5,\"106\":3,\"109\":6,\"110\":7,\"111\":3,\"115\":4,\"116\":7,\"117\":3,\"118\":4,\"120\":2,\"121\":4,\"122\":1,\"123\":4,\"126\":38,\"127\":9,\"128\":2,\"129\":4,\"133\":9,\"135\":1,\"136\":3,\"137\":5,\"139\":1,\"140\":9,\"141\":5,\"142\":6,\"143\":7,\"144\":3,\"146\":6,\"147\":1,\"148\":6,\"149\":5,\"150\":7,\"151\":2,\"156\":2,\"157\":4,\"159\":6,\"160\":1,\"161\":1,\"163\":1,\"164\":7,\"167\":3,\"168\":11,\"169\":9,\"171\":2,\"172\":7,\"173\":5,\"175\":4,\"176\":7,\"177\":8,\"178\":2,\"179\":1,\"180\":9,\"191\":2,\"192\":2,\"195\":1,\"197\":1,\"198\":1,\"199\":5,\"202\":1,\"203\":2,\"204\":1,\"205\":12,\"207\":1,\"209\":6,\"210\":2,\"211\":14,\"215\":4,\"216\":5,\"218\":2,\"223\":2,\"227\":1,\"229\":1,\"231\":3,\"232\":2,\"234\":3,\"237\":1,\"238\":4,\"240\":1,\"241\":3,\"242\":1,\"276\":1,\"283\":1,\"288\":1,\"299\":1,\"301\":3,\"305\":1,\"306\":5,\"307\":7,\"308\":13,\"313\":2,\"314\":20,\"330\":2,\"331\":1,\"332\":19,\"336\":3,\"337\":5,\"338\":1,\"344\":5,\"345\":2,\"347\":6,\"348\":4,\"349\":10,\"350\":6,\"351\":5,\"352\":6,\"353\":1,\"355\":1,\"356\":1,\"362\":2,\"378\":1,\"388\":1,\"392\":1,\"395\":3,\"407\":2}}],[\"思路三\",{\"0\":{\"308\":1}}],[\"思路\",{\"0\":{\"282\":1,\"288\":1,\"294\":1,\"300\":1,\"313\":1,\"325\":1,\"331\":1,\"337\":1},\"1\":{\"49\":1,\"50\":1,\"51\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"127\":2,\"159\":1,\"168\":1,\"172\":1}}],[\"思路二\",{\"0\":{\"26\":1,\"271\":1,\"277\":1,\"307\":1,\"320\":1}}],[\"思路一\",{\"0\":{\"25\":1,\"270\":1,\"276\":1,\"306\":1,\"319\":1}}],[\"runtimeexception\",{\"1\":{\"378\":1}}],[\"run\",{\"1\":{\"363\":1}}],[\"roll\",{\"1\":{\"365\":1}}],[\"round\",{\"1\":{\"355\":1}}],[\"rocks\",{\"1\":{\"257\":1}}],[\"row\",{\"1\":{\"257\":1}}],[\"root=\",{\"1\":{\"231\":1}}],[\"root=0\",{\"1\":{\"231\":1}}],[\"root\",{\"1\":{\"24\":2,\"25\":5,\"102\":5,\"257\":3,\"269\":1,\"275\":1,\"276\":4,\"277\":3,\"281\":1,\"283\":6,\"288\":2,\"293\":1,\"295\":3,\"301\":4,\"324\":1,\"326\":10,\"362\":4}}],[\"rayshinehub\",{\"1\":{\"265\":1}}],[\"rating\",{\"1\":{\"242\":2}}],[\"range\",{\"1\":{\"217\":8,\"218\":9}}],[\"random\",{\"1\":{\"211\":1,\"355\":1}}],[\"rank\",{\"1\":{\"149\":7,\"202\":8}}],[\"rpid\",{\"1\":{\"231\":2}}],[\"r代表区间右端点\",{\"1\":{\"219\":1}}],[\"r表示上一连续区间的最右端的点\",{\"1\":{\"215\":1}}],[\"r时\",{\"1\":{\"108\":1}}],[\"r​\",{\"1\":{\"51\":1}}],[\"r×r\",{\"1\":{\"51\":1}}],[\"r\",{\"1\":{\"34\":1,\"49\":8,\"51\":15,\"90\":6,\"105\":8,\"106\":8,\"108\":1,\"109\":7,\"110\":7,\"111\":6,\"113\":4,\"118\":1,\"120\":2,\"122\":2,\"129\":5,\"130\":7,\"173\":12,\"192\":10,\"209\":4,\"215\":8,\"216\":10,\"217\":4,\"218\":12,\"219\":10,\"276\":2,\"283\":3,\"301\":4,\"326\":2,\"344\":1,\"356\":2}}],[\"rsp\",{\"1\":{\"34\":1}}],[\"request\",{\"1\":{\"407\":1}}],[\"recentregisteredqueue\",{\"1\":{\"397\":1}}],[\"recentcanceledqueue\",{\"1\":{\"397\":1}}],[\"registerallstats\",{\"1\":{\"405\":1}}],[\"register\",{\"1\":{\"395\":2}}],[\"registrycount\",{\"1\":{\"404\":1}}],[\"registry\",{\"1\":{\"395\":2,\"397\":1,\"399\":1,\"400\":1,\"402\":2,\"404\":1}}],[\"regex\",{\"1\":{\"344\":1}}],[\"reed\",{\"1\":{\"370\":1}}],[\"releases\",{\"1\":{\"365\":1}}],[\"release\",{\"1\":{\"362\":1,\"364\":1}}],[\"replaceall\",{\"1\":{\"356\":1}}],[\"replace\",{\"1\":{\"344\":1}}],[\"reply\",{\"0\":{\"226\":1,\"227\":1,\"228\":1,\"229\":1},\"1\":{\"226\":1,\"228\":1,\"229\":5,\"231\":6,\"232\":5,\"238\":1}}],[\"remote\",{\"1\":{\"262\":1}}],[\"removeobjectargs\",{\"1\":{\"378\":1}}],[\"removeobject\",{\"1\":{\"378\":2}}],[\"removebucketargs\",{\"1\":{\"377\":1}}],[\"removebucket\",{\"1\":{\"377\":2}}],[\"remove\",{\"1\":{\"191\":2,\"192\":1,\"347\":2,\"348\":1,\"351\":1}}],[\"rebuild\",{\"1\":{\"249\":2,\"261\":2}}],[\"read\",{\"1\":{\"242\":1,\"249\":1}}],[\"redis\",{\"1\":{\"232\":4,\"241\":3,\"247\":1,\"259\":3}}],[\"reverseorder\",{\"1\":{\"342\":1,\"353\":1}}],[\"reverse\",{\"1\":{\"118\":1,\"211\":4}}],[\"ret\",{\"1\":{\"43\":2}}],[\"return\",{\"1\":{\"25\":5,\"33\":1,\"34\":1,\"35\":1,\"38\":1,\"43\":1,\"49\":1,\"50\":2,\"51\":1,\"58\":3,\"61\":3,\"62\":6,\"66\":2,\"67\":3,\"69\":2,\"75\":2,\"76\":2,\"77\":3,\"78\":3,\"79\":7,\"84\":1,\"85\":1,\"86\":3,\"87\":2,\"89\":1,\"90\":3,\"91\":1,\"92\":1,\"93\":2,\"94\":1,\"95\":1,\"97\":6,\"99\":1,\"100\":1,\"102\":2,\"105\":1,\"106\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"115\":2,\"116\":5,\"117\":2,\"118\":2,\"127\":3,\"129\":1,\"133\":1,\"137\":1,\"140\":3,\"141\":2,\"142\":2,\"143\":2,\"144\":2,\"148\":2,\"149\":5,\"150\":5,\"151\":2,\"155\":3,\"157\":4,\"163\":1,\"164\":1,\"165\":2,\"167\":1,\"169\":1,\"171\":2,\"172\":5,\"173\":3,\"176\":1,\"177\":6,\"178\":2,\"180\":1,\"182\":1,\"199\":1,\"200\":2,\"202\":1,\"203\":1,\"204\":1,\"207\":2,\"208\":1,\"209\":1,\"211\":2,\"215\":2,\"216\":2,\"217\":2,\"218\":2,\"219\":1,\"276\":2,\"277\":2,\"283\":3,\"289\":4,\"295\":3,\"301\":3,\"306\":3,\"307\":1,\"308\":3,\"314\":1,\"319\":1,\"326\":2,\"332\":2,\"337\":1,\"338\":2,\"353\":1,\"375\":1,\"382\":1,\"387\":1,\"401\":2}}],[\"resource\",{\"1\":{\"375\":1,\"377\":1}}],[\"reset\",{\"1\":{\"210\":1}}],[\"res++\",{\"1\":{\"93\":1,\"127\":1,\"151\":1,\"216\":1,\"218\":1,\"277\":1,\"306\":1,\"307\":1,\"308\":1}}],[\"res\",{\"1\":{\"32\":2,\"33\":7,\"49\":5,\"50\":3,\"51\":4,\"78\":4,\"92\":4,\"93\":2,\"127\":2,\"128\":2,\"130\":4,\"148\":3,\"149\":3,\"151\":1,\"157\":7,\"163\":6,\"164\":4,\"167\":6,\"169\":4,\"176\":4,\"177\":4,\"178\":7,\"180\":4,\"182\":3,\"216\":2,\"218\":4,\"277\":2,\"306\":2,\"307\":2,\"308\":4}}],[\"resize\",{\"1\":{\"31\":2}}],[\"right\",{\"1\":{\"25\":3,\"276\":1,\"277\":2,\"283\":1,\"295\":3,\"301\":1,\"326\":2}}],[\"item\",{\"1\":{\"378\":3}}],[\"itemresult\",{\"1\":{\"378\":2}}],[\"iterable<result<item>>\",{\"1\":{\"378\":1}}],[\"implements\",{\"1\":{\"387\":1}}],[\"impossible\",{\"1\":{\"148\":1}}],[\"imin\",{\"1\":{\"358\":1}}],[\"imax\",{\"1\":{\"358\":1}}],[\"ioexception\",{\"1\":{\"386\":1}}],[\"io\",{\"0\":{\"425\":1},\"1\":{\"257\":1,\"265\":1,\"364\":1,\"368\":1}}],[\"i的最小质因子\",{\"1\":{\"161\":1}}],[\"i的根节点指向j的根节点\",{\"1\":{\"59\":1}}],[\"i是素数\",{\"1\":{\"160\":1}}],[\"id>\",{\"1\":{\"365\":1}}],[\"id=\",{\"1\":{\"231\":3}}],[\"idx表示当前用到了哪个节点\",{\"1\":{\"191\":1,\"192\":1}}],[\"idx++\",{\"1\":{\"141\":1,\"143\":1,\"191\":1,\"192\":1}}],[\"idx\",{\"1\":{\"133\":5,\"141\":4,\"143\":4,\"144\":1,\"150\":1,\"151\":1,\"191\":8,\"192\":6,\"200\":2,\"207\":4,\"289\":6,\"308\":6}}],[\"id\",{\"1\":{\"133\":3,\"211\":1,\"231\":7,\"232\":2,\"237\":1,\"242\":2,\"257\":23,\"258\":2,\"259\":4,\"407\":2,\"408\":1}}],[\"i表示所有的情况\",{\"1\":{\"100\":1}}],[\"i表示从哪个数开始\",{\"1\":{\"77\":1}}],[\"isbucketexists\",{\"1\":{\"377\":4}}],[\"isblank\",{\"1\":{\"344\":1}}],[\"isend\",{\"1\":{\"288\":3,\"289\":4}}],[\"isempty\",{\"1\":{\"277\":1,\"307\":1,\"332\":2,\"344\":1,\"348\":1,\"349\":1,\"350\":1,\"351\":1,\"352\":1,\"353\":1}}],[\"is\",{\"1\":{\"99\":4,\"155\":1,\"157\":1,\"160\":8,\"344\":2,\"386\":1}}],[\"issymmetric\",{\"1\":{\"295\":1}}],[\"issubtree\",{\"1\":{\"25\":3}}],[\"issametree\",{\"1\":{\"25\":4,\"295\":4}}],[\"i==nums\",{\"1\":{\"97\":1}}],[\"i−1个\",{\"1\":{\"168\":1}}],[\"i−1均与\",{\"1\":{\"168\":1}}],[\"i−1\",{\"1\":{\"96\":1}}],[\"i+1\",{\"1\":{\"78\":1,\"172\":1}}],[\"i++\",{\"1\":{\"32\":1,\"33\":1,\"49\":1,\"50\":2,\"51\":3,\"57\":1,\"61\":3,\"62\":2,\"66\":2,\"67\":2,\"69\":2,\"75\":1,\"76\":2,\"77\":2,\"78\":2,\"79\":3,\"84\":3,\"85\":3,\"86\":6,\"87\":3,\"89\":4,\"90\":7,\"91\":1,\"92\":4,\"93\":4,\"94\":2,\"95\":3,\"97\":8,\"100\":2,\"102\":3,\"105\":1,\"106\":3,\"112\":2,\"115\":1,\"116\":1,\"117\":1,\"128\":1,\"133\":1,\"137\":1,\"146\":2,\"148\":3,\"149\":2,\"155\":1,\"156\":1,\"157\":3,\"159\":1,\"160\":3,\"161\":1,\"163\":1,\"167\":1,\"172\":1,\"175\":1,\"180\":2,\"195\":1,\"198\":1,\"199\":2,\"202\":1,\"215\":2,\"216\":2,\"217\":2,\"218\":1,\"219\":1,\"289\":2,\"306\":1,\"307\":1,\"308\":2,\"314\":1,\"319\":2,\"332\":2,\"337\":1,\"338\":2}}],[\"instanceinfo\",{\"0\":{\"391\":1},\"1\":{\"391\":4,\"392\":2,\"395\":2}}],[\"instanceconfig\",{\"0\":{\"390\":1},\"1\":{\"390\":4,\"392\":2}}],[\"instance\",{\"1\":{\"382\":6,\"394\":1,\"395\":1}}],[\"installed\",{\"1\":{\"386\":1}}],[\"install\",{\"1\":{\"365\":1}}],[\"insert\",{\"1\":{\"191\":1,\"192\":1,\"200\":1,\"207\":1,\"210\":2,\"287\":1,\"289\":1}}],[\"inverttree\",{\"1\":{\"326\":3}}],[\"in\",{\"1\":{\"231\":2,\"257\":1,\"349\":2}}],[\"inline\",{\"1\":{\"172\":1}}],[\"indexofsublist\",{\"1\":{\"356\":1}}],[\"indexof\",{\"1\":{\"344\":2}}],[\"index\",{\"1\":{\"231\":4,\"232\":3,\"238\":1,\"257\":9,\"259\":1,\"344\":4,\"345\":1,\"347\":4,\"369\":1}}],[\"index指向下一个指针\",{\"1\":{\"191\":1}}],[\"ind\",{\"1\":{\"102\":5}}],[\"info\",{\"1\":{\"402\":2}}],[\"infact\",{\"1\":{\"176\":4}}],[\"inf\",{\"1\":{\"89\":3,\"142\":3,\"146\":1,\"148\":3,\"149\":1}}],[\"initializing\",{\"1\":{\"402\":1}}],[\"initialized\",{\"1\":{\"402\":1}}],[\"initialize\",{\"1\":{\"401\":3,\"402\":2}}],[\"initialcapacity\",{\"1\":{\"347\":1}}],[\"initscheduledtasks\",{\"1\":{\"395\":1}}],[\"initconfig\",{\"1\":{\"394\":1}}],[\"initwithconfigurationsource\",{\"1\":{\"387\":1}}],[\"initeurekaservercontext\",{\"1\":{\"382\":1,\"383\":2,\"384\":1}}],[\"initeurekaenvironment\",{\"1\":{\"382\":2}}],[\"init\",{\"1\":{\"55\":1,\"57\":1,\"61\":2,\"62\":2,\"97\":2,\"149\":2,\"191\":1,\"192\":1,\"202\":1,\"385\":2,\"386\":1,\"388\":2,\"402\":2}}],[\"include<algorithm>\",{\"1\":{\"100\":1}}],[\"include<cstring>\",{\"1\":{\"100\":1}}],[\"include<iostream>\",{\"1\":{\"100\":1,\"180\":1}}],[\"include\",{\"1\":{\"49\":3,\"50\":3,\"51\":3,\"61\":3,\"62\":2,\"66\":4,\"67\":5,\"69\":3,\"75\":3,\"76\":3,\"77\":3,\"78\":3,\"79\":3,\"84\":3,\"85\":3,\"86\":10,\"87\":6,\"89\":2,\"90\":9,\"91\":3,\"92\":3,\"93\":3,\"94\":3,\"95\":3,\"96\":1,\"97\":1,\"99\":4,\"102\":1,\"112\":2,\"115\":2,\"116\":2,\"117\":2,\"118\":3,\"127\":2,\"140\":3,\"148\":1,\"149\":1,\"164\":4,\"172\":2,\"182\":2,\"199\":1,\"215\":2,\"216\":2,\"217\":3,\"218\":2,\"219\":4}}],[\"integer\",{\"1\":{\"349\":1,\"358\":2}}],[\"integer>\",{\"1\":{\"307\":1,\"332\":1,\"349\":4}}],[\"integer>>\",{\"1\":{\"307\":1,\"332\":1}}],[\"interface\",{\"0\":{\"226\":1},\"1\":{\"226\":1,\"229\":2}}],[\"int>>\",{\"1\":{\"319\":1}}],[\"int>\",{\"1\":{\"66\":1,\"67\":1,\"141\":1,\"157\":2,\"164\":1,\"210\":1,\"219\":1}}],[\"int\",{\"0\":{\"39\":1},\"1\":{\"32\":1,\"33\":5,\"34\":2,\"35\":3,\"38\":3,\"39\":5,\"43\":6,\"44\":9,\"45\":4,\"49\":4,\"50\":5,\"51\":11,\"57\":3,\"58\":4,\"59\":4,\"61\":14,\"62\":16,\"66\":11,\"67\":10,\"69\":7,\"75\":6,\"76\":7,\"77\":8,\"78\":10,\"79\":16,\"84\":10,\"85\":10,\"86\":32,\"87\":19,\"89\":15,\"90\":25,\"91\":6,\"92\":12,\"93\":14,\"94\":8,\"95\":14,\"96\":9,\"97\":25,\"99\":10,\"100\":9,\"102\":12,\"105\":4,\"106\":6,\"109\":4,\"110\":4,\"111\":5,\"112\":5,\"115\":7,\"116\":8,\"117\":7,\"118\":8,\"126\":2,\"127\":10,\"128\":1,\"129\":4,\"130\":1,\"133\":19,\"135\":4,\"136\":3,\"137\":5,\"140\":11,\"141\":10,\"142\":7,\"143\":10,\"144\":7,\"146\":5,\"148\":15,\"149\":17,\"150\":8,\"151\":8,\"155\":2,\"156\":3,\"157\":6,\"159\":4,\"160\":4,\"161\":5,\"163\":2,\"164\":5,\"165\":6,\"167\":4,\"168\":6,\"169\":5,\"171\":6,\"172\":1,\"173\":13,\"175\":2,\"176\":6,\"177\":14,\"178\":16,\"180\":9,\"182\":4,\"191\":5,\"192\":4,\"194\":2,\"195\":2,\"197\":1,\"198\":2,\"199\":6,\"200\":10,\"202\":9,\"203\":4,\"204\":5,\"205\":7,\"207\":6,\"208\":4,\"209\":3,\"211\":10,\"215\":8,\"216\":7,\"217\":6,\"218\":9,\"219\":6,\"276\":3,\"277\":2,\"283\":5,\"289\":6,\"301\":5,\"306\":8,\"307\":13,\"308\":15,\"314\":6,\"319\":4,\"332\":30,\"337\":5,\"338\":9,\"344\":6,\"345\":1,\"347\":7,\"353\":1,\"387\":1,\"404\":1}}],[\"i\",{\"0\":{\"41\":1},\"1\":{\"32\":4,\"33\":6,\"41\":1,\"49\":17,\"50\":13,\"51\":18,\"57\":4,\"59\":3,\"61\":10,\"62\":11,\"66\":7,\"67\":6,\"69\":9,\"75\":4,\"76\":9,\"77\":7,\"78\":9,\"79\":15,\"84\":20,\"85\":19,\"86\":30,\"87\":14,\"89\":25,\"90\":32,\"91\":16,\"92\":18,\"93\":22,\"94\":27,\"95\":26,\"96\":44,\"97\":44,\"99\":19,\"100\":15,\"102\":17,\"105\":11,\"106\":9,\"112\":7,\"115\":19,\"116\":29,\"117\":12,\"118\":12,\"120\":2,\"121\":1,\"127\":2,\"128\":5,\"133\":15,\"135\":5,\"136\":5,\"137\":10,\"140\":3,\"141\":7,\"142\":3,\"143\":7,\"144\":12,\"146\":10,\"148\":9,\"149\":10,\"150\":10,\"151\":9,\"155\":4,\"156\":7,\"157\":18,\"159\":6,\"160\":17,\"161\":15,\"163\":8,\"164\":7,\"167\":8,\"168\":26,\"172\":2,\"173\":30,\"175\":7,\"176\":9,\"177\":3,\"178\":22,\"180\":6,\"195\":4,\"198\":4,\"199\":16,\"200\":9,\"202\":5,\"203\":6,\"204\":6,\"205\":4,\"207\":5,\"209\":8,\"211\":1,\"215\":8,\"216\":9,\"217\":7,\"218\":8,\"219\":2,\"289\":6,\"306\":13,\"307\":7,\"308\":21,\"313\":4,\"314\":14,\"319\":9,\"332\":16,\"336\":1,\"337\":3,\"338\":6}}],[\"if\",{\"1\":{\"25\":3,\"32\":2,\"38\":1,\"43\":2,\"50\":3,\"58\":1,\"61\":2,\"62\":8,\"66\":1,\"67\":3,\"69\":2,\"75\":2,\"76\":2,\"77\":2,\"78\":3,\"79\":9,\"84\":1,\"85\":1,\"86\":2,\"87\":2,\"90\":4,\"91\":2,\"92\":2,\"93\":2,\"94\":2,\"95\":1,\"96\":1,\"97\":4,\"99\":4,\"100\":2,\"102\":3,\"105\":2,\"106\":2,\"109\":1,\"110\":1,\"111\":1,\"113\":1,\"115\":3,\"116\":5,\"117\":1,\"126\":3,\"129\":1,\"130\":3,\"133\":3,\"135\":1,\"136\":1,\"137\":2,\"140\":2,\"141\":3,\"142\":4,\"143\":3,\"144\":3,\"146\":1,\"148\":4,\"149\":6,\"150\":5,\"151\":3,\"155\":2,\"156\":2,\"157\":4,\"159\":1,\"160\":1,\"161\":2,\"163\":2,\"164\":1,\"167\":2,\"168\":2,\"169\":1,\"171\":1,\"172\":2,\"173\":5,\"175\":1,\"176\":1,\"177\":3,\"178\":2,\"180\":4,\"182\":1,\"194\":1,\"197\":1,\"198\":2,\"199\":3,\"200\":2,\"202\":2,\"203\":1,\"204\":1,\"205\":3,\"207\":1,\"208\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":3,\"219\":3,\"276\":1,\"277\":3,\"283\":1,\"289\":2,\"295\":1,\"301\":1,\"306\":3,\"307\":2,\"308\":5,\"314\":1,\"326\":1,\"332\":6,\"338\":2,\"349\":1,\"377\":1,\"382\":2,\"386\":1,\"395\":2}}],[\"qmi\",{\"1\":{\"169\":1,\"176\":2,\"177\":2}}],[\"query\",{\"1\":{\"200\":1}}],[\"queue\",{\"0\":{\"351\":1},\"1\":{\"143\":2,\"210\":2,\"351\":2,\"352\":2}}],[\"queue<e>\",{\"1\":{\"351\":1}}],[\"queue<pair<int\",{\"1\":{\"319\":1}}],[\"queue<pair<integer\",{\"1\":{\"307\":1,\"332\":1}}],[\"queue<pii\",{\"1\":{\"141\":1}}],[\"queue<pii>\",{\"1\":{\"66\":1}}],[\"queue<int\",{\"1\":{\"210\":1,\"217\":1}}],[\"queue<int>\",{\"1\":{\"136\":1,\"143\":1,\"144\":1}}],[\"queue<string>\",{\"1\":{\"67\":1}}],[\"quick\",{\"1\":{\"105\":3}}],[\"q\",{\"1\":{\"25\":6,\"61\":6,\"66\":6,\"67\":6,\"90\":4,\"105\":8,\"136\":6,\"137\":3,\"143\":8,\"144\":6,\"197\":4,\"198\":3,\"210\":1,\"277\":5,\"295\":6,\"307\":5,\"319\":7,\"332\":12,\"351\":1,\"352\":1}}],[\"peereurekanodes\",{\"1\":{\"399\":3,\"400\":1,\"402\":4}}],[\"peerawareinstanceregistryimpl\",{\"1\":{\"397\":3}}],[\"peeklast\",{\"1\":{\"352\":1}}],[\"peekfirst\",{\"1\":{\"352\":1}}],[\"peek\",{\"1\":{\"350\":1,\"351\":1,\"353\":1}}],[\"player\",{\"1\":{\"265\":1}}],[\"plugins\",{\"1\":{\"407\":1}}],[\"plugin\",{\"1\":{\"265\":1,\"407\":1,\"408\":1}}],[\"plus\",{\"1\":{\"43\":2}}],[\"provider\",{\"1\":{\"391\":1}}],[\"prop\",{\"1\":{\"386\":1}}],[\"properties\",{\"1\":{\"386\":6,\"387\":1,\"388\":1,\"394\":1}}],[\"props\",{\"1\":{\"386\":8}}],[\"protobuf\",{\"1\":{\"259\":2}}],[\"presignedobjecturl\",{\"1\":{\"378\":2}}],[\"presto\",{\"1\":{\"370\":1}}],[\"prerequisites\",{\"1\":{\"336\":2,\"337\":1}}],[\"prefix\",{\"1\":{\"287\":2,\"289\":2,\"375\":1}}],[\"principal\",{\"1\":{\"377\":1}}],[\"println\",{\"1\":{\"344\":2,\"377\":3,\"378\":6}}],[\"print\",{\"1\":{\"97\":2}}],[\"printf\",{\"1\":{\"31\":4,\"39\":1,\"69\":1,\"97\":1,\"102\":1,\"115\":1,\"116\":3,\"117\":1,\"133\":1,\"148\":1,\"172\":1,\"199\":1}}],[\"private\",{\"1\":{\"289\":3,\"375\":5,\"386\":2,\"401\":1}}],[\"primary\",{\"1\":{\"251\":2}}],[\"primes2\",{\"1\":{\"160\":4}}],[\"primes\",{\"1\":{\"159\":4,\"160\":3,\"161\":17,\"164\":4,\"168\":21,\"178\":9}}],[\"prime\",{\"1\":{\"155\":1,\"157\":2,\"160\":2,\"161\":1}}],[\"prim\",{\"1\":{\"148\":2}}],[\"priorityqueue<>\",{\"1\":{\"353\":2}}],[\"priorityqueue<e>\",{\"1\":{\"353\":4}}],[\"priorityqueue\",{\"0\":{\"353\":1},\"1\":{\"353\":4}}],[\"priority\",{\"1\":{\"141\":1,\"210\":2,\"217\":1,\"319\":1}}],[\"policyjsonstring\",{\"1\":{\"377\":2}}],[\"polllast\",{\"1\":{\"352\":1}}],[\"pollfirst\",{\"1\":{\"352\":1}}],[\"poll\",{\"1\":{\"307\":1,\"332\":1,\"351\":1,\"353\":1}}],[\"pow\",{\"1\":{\"355\":1}}],[\"pos\",{\"1\":{\"332\":3}}],[\"post\",{\"1\":{\"242\":1}}],[\"pop\",{\"1\":{\"66\":1,\"67\":1,\"116\":1,\"117\":1,\"118\":1,\"136\":1,\"141\":1,\"143\":2,\"144\":1,\"210\":6,\"217\":1,\"319\":1,\"350\":1}}],[\"ph\",{\"1\":{\"205\":4}}],[\"phi\",{\"1\":{\"167\":1,\"168\":5}}],[\"p+1\",{\"1\":{\"199\":1}}],[\"p为匹配串\",{\"1\":{\"199\":1}}],[\"pipeline\",{\"1\":{\"241\":1}}],[\"pi​​\",{\"1\":{\"180\":1}}],[\"pii\",{\"1\":{\"66\":1,\"141\":1,\"219\":1}}],[\"pm​​\",{\"1\":{\"180\":1}}],[\"pm​\",{\"1\":{\"180\":1}}],[\"pmam​​\",{\"1\":{\"167\":1}}],[\"p2​\",{\"1\":{\"180\":2}}],[\"p2^c2\",{\"1\":{\"164\":1}}],[\"p1​\",{\"1\":{\"180\":2}}],[\"p1^1\",{\"1\":{\"164\":1}}],[\"p1^0\",{\"1\":{\"164\":1}}],[\"p1^c1\",{\"1\":{\"164\":2}}],[\"p^k\",{\"1\":{\"209\":1}}],[\"p^3\",{\"1\":{\"178\":1}}],[\"p^2\",{\"1\":{\"178\":1}}],[\"p​∗cpa​pb​​\",{\"1\":{\"177\":1}}],[\"pk^1\",{\"1\":{\"164\":1}}],[\"pk^0\",{\"1\":{\"164\":1}}],[\"pk^ck\",{\"1\":{\"164\":2}}],[\"pj=0\",{\"1\":{\"161\":1}}],[\"pj一定是pj\",{\"1\":{\"161\":1}}],[\"pb\",{\"1\":{\"149\":2,\"177\":1}}],[\"python\",{\"1\":{\"370\":1}}],[\"python中的\",{\"1\":{\"37\":1}}],[\"py\",{\"1\":{\"149\":6,\"202\":6,\"370\":1}}],[\"px\",{\"1\":{\"149\":7,\"202\":6}}],[\"p3367\",{\"0\":{\"62\":1}}],[\"pull\",{\"1\":{\"363\":1}}],[\"push\",{\"1\":{\"66\":2,\"67\":2,\"86\":2,\"90\":2,\"97\":2,\"99\":1,\"115\":4,\"116\":3,\"117\":2,\"118\":2,\"130\":2,\"133\":2,\"136\":2,\"141\":2,\"143\":2,\"144\":2,\"157\":2,\"163\":2,\"178\":3,\"210\":6,\"217\":2,\"219\":3,\"319\":3,\"350\":1}}],[\"putall\",{\"1\":{\"386\":2}}],[\"putobjectargs\",{\"1\":{\"378\":1}}],[\"putobject\",{\"1\":{\"378\":2}}],[\"puts\",{\"1\":{\"69\":1,\"76\":1,\"77\":1,\"97\":1,\"148\":1,\"172\":1,\"182\":2}}],[\"put\",{\"1\":{\"61\":2,\"349\":2}}],[\"publicread\",{\"1\":{\"377\":1}}],[\"public\",{\"1\":{\"25\":1,\"276\":1,\"277\":1,\"283\":1,\"289\":4,\"295\":1,\"301\":1,\"306\":1,\"307\":1,\"308\":1,\"314\":1,\"319\":1,\"326\":1,\"332\":2,\"338\":1,\"353\":1,\"375\":3,\"382\":2,\"385\":1,\"387\":2,\"401\":3,\"402\":1}}],[\"pattern>\",{\"1\":{\"365\":1}}],[\"path\",{\"1\":{\"69\":3}}],[\"password=password\",{\"1\":{\"362\":2}}],[\"pascal中的\",{\"1\":{\"37\":1}}],[\"package\",{\"1\":{\"357\":1}}],[\"parseboolean\",{\"1\":{\"344\":1}}],[\"parseint\",{\"1\":{\"344\":1}}],[\"parent\",{\"1\":{\"257\":2,\"308\":1}}],[\"partitions\",{\"1\":{\"250\":1}}],[\"partition\",{\"1\":{\"250\":2}}],[\"params\",{\"1\":{\"43\":2}}],[\"pa\",{\"1\":{\"149\":2}}],[\"pair<k\",{\"0\":{\"357\":1},\"1\":{\"357\":1}}],[\"pair<>\",{\"1\":{\"307\":2,\"332\":2}}],[\"pair<integer\",{\"1\":{\"307\":1,\"332\":1}}],[\"pair<int\",{\"1\":{\"66\":1,\"141\":1,\"210\":1,\"219\":1}}],[\"pair<first\",{\"1\":{\"45\":1}}],[\"pair\",{\"1\":{\"45\":1,\"357\":1}}],[\"p\",{\"1\":{\"25\":6,\"43\":2,\"149\":8,\"164\":3,\"169\":5,\"176\":5,\"177\":31,\"178\":8,\"180\":4,\"199\":7,\"200\":11,\"202\":8,\"203\":8,\"204\":9,\"209\":10,\"242\":2,\"295\":6,\"308\":8,\"363\":2}}],[\"snail\",{\"1\":{\"408\":1}}],[\"snprintf\",{\"1\":{\"39\":1}}],[\"syncup\",{\"1\":{\"404\":1}}],[\"synchronousqueue<runnable>\",{\"1\":{\"395\":2}}],[\"synchronized\",{\"1\":{\"382\":1,\"401\":1}}],[\"system\",{\"0\":{\"420\":1},\"1\":{\"37\":1,\"344\":2,\"377\":3,\"378\":6}}],[\"src\",{\"1\":{\"382\":1}}],[\"s3\",{\"1\":{\"368\":1,\"370\":5,\"377\":2}}],[\"satrt\",{\"1\":{\"347\":1}}],[\"sb\",{\"1\":{\"345\":1}}],[\"ss\",{\"1\":{\"344\":1}}],[\"sscanf\",{\"1\":{\"39\":2}}],[\"sscnaf\",{\"1\":{\"39\":1}}],[\"s2\",{\"1\":{\"312\":1,\"313\":1,\"314\":7,\"344\":1}}],[\"s1\",{\"1\":{\"312\":1,\"313\":1,\"314\":7,\"344\":1}}],[\"shouldregisterwitheureka\",{\"1\":{\"395\":1}}],[\"shouldfetchregistry\",{\"1\":{\"395\":1}}],[\"short\",{\"1\":{\"261\":1,\"358\":2}}],[\"shell\",{\"1\":{\"362\":1}}],[\"shtml\",{\"1\":{\"361\":1}}],[\"shmin\",{\"1\":{\"358\":1}}],[\"shmax\",{\"1\":{\"358\":1}}],[\"shuffle\",{\"1\":{\"211\":1}}],[\"skiplist\",{\"1\":{\"259\":1}}],[\"skew\",{\"1\":{\"238\":1}}],[\"sdk\",{\"1\":{\"252\":1,\"370\":7}}],[\"scheduler\",{\"1\":{\"395\":1}}],[\"score\",{\"1\":{\"232\":1,\"259\":1,\"344\":2}}],[\"scanf\",{\"1\":{\"61\":1,\"102\":2,\"133\":2,\"172\":3}}],[\"sla\",{\"1\":{\"226\":1}}],[\"s+1\",{\"1\":{\"199\":1}}],[\"s++\",{\"1\":{\"156\":1,\"180\":1}}],[\"s为模式串\",{\"1\":{\"199\":1}}],[\"sg\",{\"1\":{\"186\":5,\"187\":4}}],[\"sg游戏\",{\"0\":{\"186\":1}}],[\"sino\",{\"1\":{\"408\":1}}],[\"singleflight\",{\"1\":{\"232\":1,\"261\":4}}],[\"sid\",{\"1\":{\"377\":1}}],[\"si​\",{\"1\":{\"180\":1}}],[\"sizethreshold>\",{\"1\":{\"365\":1}}],[\"sizeof\",{\"1\":{\"66\":1,\"79\":1,\"99\":1,\"100\":1,\"133\":1,\"140\":2,\"141\":1,\"142\":1,\"143\":1,\"148\":2,\"150\":1,\"151\":1}}],[\"size\",{\"1\":{\"31\":9,\"34\":2,\"40\":3,\"62\":15,\"66\":1,\"90\":1,\"97\":3,\"115\":7,\"116\":12,\"117\":5,\"118\":4,\"129\":1,\"136\":1,\"141\":1,\"143\":1,\"144\":1,\"178\":1,\"203\":5,\"205\":9,\"210\":7,\"211\":1,\"217\":1,\"219\":1,\"319\":1,\"331\":1,\"332\":3,\"347\":2,\"349\":1,\"350\":1,\"351\":1,\"352\":1,\"353\":1,\"365\":1}}],[\"s表示次幂\",{\"1\":{\"156\":1}}],[\"sqrt\",{\"1\":{\"155\":2,\"156\":5,\"355\":1}}],[\"specific\",{\"1\":{\"386\":1}}],[\"specified\",{\"1\":{\"386\":1}}],[\"spring\",{\"0\":{\"428\":1}}],[\"springcloud\",{\"2\":{\"411\":1}}],[\"springboot\",{\"0\":{\"373\":1},\"1\":{\"375\":1}}],[\"sprintf\",{\"1\":{\"39\":3}}],[\"spark\",{\"1\":{\"370\":1}}],[\"split\",{\"1\":{\"344\":2}}],[\"spm\",{\"1\":{\"242\":2}}],[\"spfa求最短路\",{\"1\":{\"143\":1}}],[\"spfa算法判断图中是否存在负环\",{\"0\":{\"144\":1}}],[\"spfa算法\",{\"0\":{\"143\":1}}],[\"spfa\",{\"1\":{\"139\":1,\"143\":1,\"144\":1}}],[\"spj\",{\"1\":{\"75\":1}}],[\"swap\",{\"1\":{\"67\":2,\"97\":1,\"105\":1,\"126\":1,\"173\":1,\"205\":6}}],[\"secretkey\",{\"1\":{\"375\":2,\"384\":1}}],[\"seconds\",{\"1\":{\"395\":2}}],[\"second存储节点编号\",{\"1\":{\"141\":1}}],[\"second\",{\"1\":{\"66\":2,\"130\":2,\"141\":1,\"164\":1,\"210\":2,\"219\":2,\"319\":1,\"357\":1}}],[\"second>\",{\"1\":{\"45\":1}}],[\"servletcontextevent\",{\"1\":{\"382\":1}}],[\"servercontext\",{\"1\":{\"400\":1,\"401\":4,\"402\":1}}],[\"serverconfig\",{\"1\":{\"397\":2}}],[\"servercodecs\",{\"1\":{\"397\":1,\"399\":1,\"400\":1}}],[\"server<\",{\"1\":{\"365\":2}}],[\"server\",{\"0\":{\"384\":1,\"385\":1},\"1\":{\"362\":4,\"363\":1,\"364\":2,\"365\":5,\"385\":1,\"386\":4,\"387\":1,\"388\":1,\"394\":4,\"395\":1,\"397\":3,\"402\":1,\"408\":1}}],[\"service>\",{\"1\":{\"365\":1}}],[\"service\",{\"0\":{\"228\":1,\"248\":1},\"1\":{\"228\":1,\"229\":1,\"241\":2,\"247\":5,\"248\":2}}],[\"separation\",{\"1\":{\"248\":1}}],[\"searchprefix\",{\"1\":{\"289\":3}}],[\"search\",{\"1\":{\"247\":1,\"287\":1,\"289\":1,\"350\":1,\"363\":1}}],[\"select\",{\"1\":{\"231\":5,\"238\":2,\"257\":3,\"370\":1}}],[\"self\",{\"1\":{\"43\":3}}],[\"setdaemon\",{\"1\":{\"395\":3}}],[\"setnameformat\",{\"1\":{\"395\":3}}],[\"setxx\",{\"1\":{\"391\":3}}],[\"setproperty\",{\"1\":{\"386\":1}}],[\"setbucketpolicyargs\",{\"1\":{\"377\":1}}],[\"setbucketpolicy\",{\"1\":{\"377\":1}}],[\"setvalue\",{\"1\":{\"349\":1}}],[\"set<k>\",{\"1\":{\"349\":1}}],[\"set<map\",{\"1\":{\"349\":1}}],[\"set<e>\",{\"1\":{\"348\":2}}],[\"set<integer>\",{\"1\":{\"347\":1}}],[\"set\",{\"0\":{\"348\":1},\"1\":{\"210\":5,\"232\":2,\"237\":1,\"241\":3,\"259\":1,\"347\":1,\"348\":3}}],[\"seg\",{\"1\":{\"130\":5}}],[\"segs\",{\"1\":{\"130\":5}}],[\"sundry\",{\"0\":{\"430\":1}}],[\"sublist\",{\"1\":{\"347\":1}}],[\"subject\",{\"1\":{\"231\":1,\"232\":1,\"238\":1,\"250\":1,\"257\":2,\"259\":1}}],[\"substring\",{\"1\":{\"344\":2}}],[\"substr\",{\"1\":{\"210\":1}}],[\"sub\",{\"1\":{\"116\":3}}],[\"subroot\",{\"1\":{\"24\":2,\"25\":8}}],[\"sum\",{\"1\":{\"43\":1,\"49\":1,\"178\":3}}],[\"solomon\",{\"1\":{\"370\":1}}],[\"solution\",{\"1\":{\"25\":1,\"276\":1,\"277\":1,\"283\":1,\"295\":1,\"301\":1,\"306\":1,\"307\":1,\"308\":1,\"314\":1,\"319\":1,\"326\":1,\"332\":2,\"338\":1}}],[\"son\",{\"1\":{\"200\":7}}],[\"sortedarraytobst\",{\"1\":{\"301\":1}}],[\"sortedset\",{\"1\":{\"259\":2}}],[\"sorted\",{\"1\":{\"232\":2,\"237\":1,\"241\":3,\"259\":1}}],[\"sort\",{\"1\":{\"38\":1,\"78\":1,\"105\":3,\"106\":3,\"112\":1,\"129\":1,\"130\":1,\"149\":1,\"163\":1,\"211\":4,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"242\":2,\"342\":2}}],[\"storage\",{\"1\":{\"257\":1,\"369\":1}}],[\"stl简介\",{\"0\":{\"210\":1}}],[\"stk\",{\"1\":{\"90\":7,\"194\":3,\"195\":2}}],[\"standardcharsets\",{\"1\":{\"344\":2}}],[\"stack类\",{\"1\":{\"350\":1}}],[\"stack<>\",{\"1\":{\"350\":1}}],[\"stack<e>\",{\"1\":{\"350\":1}}],[\"stack\",{\"1\":{\"210\":1,\"350\":6}}],[\"statuschangelistener\",{\"1\":{\"395\":1}}],[\"statobjectargs\",{\"1\":{\"378\":1}}],[\"statobjectresponse\",{\"1\":{\"378\":3}}],[\"statobject\",{\"1\":{\"378\":2}}],[\"statement\",{\"1\":{\"377\":1}}],[\"state=0\",{\"1\":{\"231\":1}}],[\"state\",{\"1\":{\"99\":4}}],[\"static\",{\"1\":{\"40\":1,\"382\":2,\"386\":1,\"401\":3}}],[\"startswith\",{\"1\":{\"287\":1,\"289\":1}}],[\"start\",{\"1\":{\"77\":3,\"356\":1,\"402\":2}}],[\"st\",{\"1\":{\"69\":4,\"75\":6,\"76\":4,\"79\":9,\"99\":3,\"130\":1,\"135\":3,\"136\":3,\"140\":3,\"141\":3,\"143\":5,\"144\":5,\"148\":3,\"151\":5,\"159\":4,\"161\":5,\"168\":4,\"178\":3,\"337\":1,\"338\":4}}],[\"stderr\",{\"1\":{\"362\":1}}],[\"stdc++\",{\"1\":{\"97\":1,\"102\":1,\"148\":1,\"149\":1}}],[\"std\",{\"1\":{\"42\":1,\"45\":1,\"49\":1,\"50\":1,\"51\":1,\"61\":1,\"62\":1,\"66\":1,\"67\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"84\":1,\"85\":1,\"86\":3,\"87\":2,\"89\":1,\"90\":3,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"99\":1,\"100\":1,\"102\":1,\"112\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"127\":2,\"140\":1,\"148\":1,\"149\":1,\"164\":1,\"172\":1,\"180\":1,\"182\":1,\"199\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1}}],[\"stdlib\",{\"1\":{\"39\":1}}],[\"stdout\",{\"1\":{\"37\":2,\"362\":2}}],[\"stream\",{\"1\":{\"378\":1}}],[\"strip\",{\"1\":{\"344\":1}}],[\"string>>\",{\"1\":{\"397\":2}}],[\"stringbuilder\",{\"0\":{\"345\":1},\"1\":{\"343\":5,\"345\":2}}],[\"string类型的参数需要转换一下\",{\"1\":{\"39\":1}}],[\"string\",{\"0\":{\"39\":1,\"40\":1,\"344\":1},\"1\":{\"31\":17,\"33\":1,\"39\":7,\"40\":4,\"67\":3,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"210\":1,\"232\":1,\"287\":3,\"289\":4,\"314\":2,\"343\":3,\"344\":24,\"345\":1,\"375\":4,\"377\":2,\"378\":1,\"382\":1,\"384\":2,\"386\":4}}],[\"str2\",{\"1\":{\"343\":1}}],[\"str1\",{\"1\":{\"343\":1}}],[\"strategy\",{\"1\":{\"241\":2}}],[\"struct\",{\"1\":{\"45\":1,\"86\":1,\"133\":1,\"142\":1,\"149\":1,\"211\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1}}],[\"str\",{\"1\":{\"31\":5,\"39\":9,\"93\":3,\"200\":6,\"209\":2,\"210\":1,\"344\":10,\"345\":1}}],[\"strlen\",{\"1\":{\"31\":3,\"93\":2}}],[\"s\",{\"1\":{\"31\":5,\"32\":2,\"33\":2,\"39\":4,\"49\":20,\"50\":14,\"51\":14,\"78\":6,\"86\":18,\"87\":8,\"93\":3,\"95\":5,\"120\":3,\"121\":5,\"123\":4,\"133\":4,\"156\":2,\"180\":2,\"185\":2,\"186\":2,\"199\":5,\"210\":4,\"344\":8,\"370\":2,\"395\":2}}],[\"看是否能找到匹配的\",{\"1\":{\"25\":1}}],[\"则用默认值\",{\"1\":{\"388\":1}}],[\"则用配置项的\",{\"1\":{\"388\":1}}],[\"则用\",{\"1\":{\"387\":1}}],[\"则只需要修改接口方法中引用常量的地方即可\",{\"1\":{\"384\":1}}],[\"则需要全局搜索用到的地方\",{\"1\":{\"384\":1}}],[\"则从0开始加1\",{\"1\":{\"349\":1}}],[\"则k在map中的值加1\",{\"1\":{\"349\":1}}],[\"则replace旧的value\",{\"1\":{\"349\":1}}],[\"则直接令\",{\"1\":{\"344\":1}}],[\"则直接减\",{\"1\":{\"116\":1}}],[\"则更新最大值\",{\"1\":{\"319\":1}}],[\"则后面的不再进行计算\",{\"1\":{\"294\":1}}],[\"则包含了prefix前缀\",{\"1\":{\"289\":1}}],[\"则包含word这个完整的字符串\",{\"1\":{\"289\":1}}],[\"则新建一个节点\",{\"1\":{\"288\":1}}],[\"则可得到树的深度\",{\"1\":{\"277\":1}}],[\"则可以通过扩展欧几里得来求解\",{\"1\":{\"171\":1}}],[\"则计数器\",{\"1\":{\"277\":1}}],[\"则一条子评论的发布\",{\"1\":{\"231\":1}}],[\"则无解\",{\"1\":{\"218\":1}}],[\"则点数+1\",{\"1\":{\"215\":1}}],[\"则往下沉\",{\"1\":{\"205\":1}}],[\"则最小的数为右儿子\",{\"1\":{\"205\":1}}],[\"则最小的数为左二子\",{\"1\":{\"205\":1}}],[\"则优先采取该行动\",{\"1\":{\"182\":1}}],[\"则系数应该是1\",{\"1\":{\"180\":1}}],[\"则n\",{\"1\":{\"180\":1}}],[\"则对于任意整数\",{\"1\":{\"177\":1}}],[\"则称该游戏为一个公平组合游戏\",{\"1\":{\"183\":1}}],[\"则称该局面必败\",{\"1\":{\"182\":1}}],[\"则称\",{\"1\":{\"176\":1}}],[\"则存在一个整数\",{\"1\":{\"176\":1}}],[\"则有\",{\"1\":{\"176\":1}}],[\"则数据保证\",{\"1\":{\"172\":1}}],[\"则为\",{\"1\":{\"169\":1}}],[\"则pj一定是i的最小公因子\",{\"1\":{\"161\":1}}],[\"则匹配成功\",{\"1\":{\"151\":1}}],[\"则这条交替路称为增广路\",{\"1\":{\"151\":1}}],[\"则这个数出现的次数就可以表示为\",{\"1\":{\"112\":1}}],[\"则加入这条边到集合中\",{\"1\":{\"149\":1}}],[\"则选择该点\",{\"1\":{\"148\":1}}],[\"则说明存在环\",{\"1\":{\"144\":1}}],[\"则把该点加入到队尾\",{\"1\":{\"143\":1}}],[\"则返回相应的索引\",{\"1\":{\"356\":1}}],[\"则返回defaultvalue\",{\"1\":{\"349\":1}}],[\"则返回null\",{\"1\":{\"349\":1}}],[\"则返回inf\",{\"1\":{\"148\":1}}],[\"则返回true\",{\"1\":{\"144\":1,\"348\":1,\"349\":2}}],[\"则返回\",{\"1\":{\"141\":1,\"142\":1,\"342\":1}}],[\"则每左移一位\",{\"1\":{\"126\":1}}],[\"则向高位借位\",{\"1\":{\"116\":1}}],[\"则减去b\",{\"1\":{\"116\":1}}],[\"则压入c数组中\",{\"1\":{\"115\":1}}],[\"则将\",{\"1\":{\"344\":1}}],[\"则将其与相邻四个方向上的\",{\"1\":{\"308\":1}}],[\"则将其加入队列\",{\"1\":{\"307\":1}}],[\"则将其转化为\",{\"1\":{\"116\":1}}],[\"则将这两个连通块合并\",{\"1\":{\"149\":1}}],[\"则将剩余那一部分直接接在临时序列的后面\",{\"1\":{\"106\":1}}],[\"则将该元素入栈\",{\"1\":{\"90\":1}}],[\"则设\",{\"1\":{\"102\":1}}],[\"则不会获取\",{\"1\":{\"395\":1}}],[\"则不包含这个字符串\",{\"1\":{\"289\":1}}],[\"则不需要将j重复插入\",{\"1\":{\"143\":1}}],[\"则不合法\",{\"1\":{\"79\":1}}],[\"则不能被均分为三份\",{\"1\":{\"50\":1}}],[\"则输入为\",{\"1\":{\"67\":1}}],[\"则输出结果\",{\"1\":{\"198\":1}}],[\"则输出\",{\"1\":{\"61\":1,\"67\":1,\"172\":1}}],[\"则表示该切割点不行\",{\"1\":{\"50\":1}}],[\"则第二段也一定相等\",{\"1\":{\"50\":1}}],[\"则\",{\"1\":{\"49\":1,\"127\":2,\"167\":1,\"336\":1,\"397\":1}}],[\"则递归往下判断\",{\"1\":{\"25\":1}}],[\"则和叶节点的空子节点匹配\",{\"1\":{\"25\":1}}],[\"匹配完成后的具体操作\",{\"1\":{\"199\":1}}],[\"匹配完我输出一下\",{\"1\":{\"199\":1}}],[\"匹配操作\",{\"1\":{\"199\":1}}],[\"匹配时\",{\"1\":{\"199\":2}}],[\"匹配边\",{\"1\":{\"151\":1}}],[\"匹配\",{\"1\":{\"25\":1,\"151\":3}}],[\"也有一个加载配置文件的方法\",{\"1\":{\"394\":1}}],[\"也能通过剩余的数据块和校验块恢复原始数据\",{\"1\":{\"370\":1}}],[\"也能使用云存储服务提供的\",{\"1\":{\"369\":1}}],[\"也会根据\",{\"1\":{\"395\":1}}],[\"也会被移除\",{\"1\":{\"344\":1}}],[\"也会更新其根评论的计数\",{\"1\":{\"238\":1}}],[\"也支持动态的模型打分\",{\"1\":{\"241\":1}}],[\"也包括为了策略迭代而需要新开发的流式的窗口聚合数据\",{\"1\":{\"241\":1}}],[\"也包括各类热评排序算法\",{\"1\":{\"240\":1}}],[\"也对系统的吞吐能力提出了更高要求\",{\"1\":{\"241\":1}}],[\"也就造成了错误的增量更新\",{\"1\":{\"238\":1}}],[\"也就是即使你启动了\",{\"1\":{\"362\":1}}],[\"也就是\",{\"1\":{\"308\":1}}],[\"也就是做\",{\"1\":{\"294\":1}}],[\"也就是在查询第一页的时候会将后两页评论数据也一起加载进缓存\",{\"1\":{\"259\":1}}],[\"也就是它是回复哪条评论的\",{\"1\":{\"257\":1}}],[\"也就是用\",{\"1\":{\"238\":1}}],[\"也就是最少需要多少辆缆车\",{\"1\":{\"78\":1}}],[\"也就是说线程\",{\"1\":{\"382\":1}}],[\"也就是说\",{\"1\":{\"14\":1}}],[\"也不能通过api等对外暴露\",{\"1\":{\"237\":1}}],[\"也称静态链表\",{\"1\":{\"191\":1}}],[\"也是通过接口方法里面的\",{\"1\":{\"394\":1}}],[\"也是\",{\"1\":{\"168\":1}}],[\"也是亲戚\",{\"1\":{\"61\":1}}],[\"也将其倍数从\",{\"1\":{\"160\":1}}],[\"也可为字符数组\",{\"1\":{\"344\":1}}],[\"也可能是长整数\",{\"1\":{\"40\":1}}],[\"也可以通过\",{\"1\":{\"353\":1}}],[\"也可以作为栈\",{\"1\":{\"350\":1}}],[\"也可以不删除任何字符\",{\"1\":{\"312\":1}}],[\"也可以发一条友善的评论\",{\"1\":{\"242\":1}}],[\"也可以守护新人up主成长\",{\"1\":{\"242\":1}}],[\"也可以看到一些多元化的观点\",{\"1\":{\"242\":1}}],[\"也可以看做它自身的一棵子树\",{\"1\":{\"24\":1}}],[\"也可以用来判断奇数和偶数\",{\"1\":{\"169\":1}}],[\"也可以简写成这样\",{\"1\":{\"58\":1}}],[\"也可以换成更安全的\",{\"1\":{\"39\":1}}],[\"的话\",{\"1\":{\"401\":1}}],[\"的配置信息\",{\"1\":{\"397\":1}}],[\"的地方很相似\",{\"1\":{\"394\":1}}],[\"的代码如下所示\",{\"1\":{\"391\":1}}],[\"的获取配置项的方法\",{\"1\":{\"388\":1}}],[\"的签名url\",{\"1\":{\"378\":1}}],[\"的状态\",{\"1\":{\"378\":1}}],[\"的常用\",{\"0\":{\"376\":1}}],[\"的基本对象\",{\"1\":{\"375\":1}}],[\"的逻辑空间\",{\"1\":{\"375\":1}}],[\"的存储机制使用纠删码\",{\"1\":{\"370\":1}}],[\"的产品\",{\"1\":{\"370\":1}}],[\"的编排\",{\"1\":{\"370\":1}}],[\"的替代品\",{\"1\":{\"370\":1}}],[\"的特性\",{\"1\":{\"350\":1}}],[\"的包装类型\",{\"1\":{\"349\":1}}],[\"的有向边\",{\"1\":{\"337\":1}}],[\"的烂橘子\",{\"1\":{\"331\":1}}],[\"的新鲜橘子都会腐烂\",{\"1\":{\"330\":1}}],[\"的滑动窗口从数组的最左侧移动到数组的最右侧\",{\"1\":{\"318\":1}}],[\"的含义是\",{\"1\":{\"313\":1}}],[\"的中序遍历是升序的\",{\"1\":{\"300\":1}}],[\"的左子树与\",{\"1\":{\"294\":1}}],[\"的左子树是否对称\",{\"1\":{\"294\":1}}],[\"的左儿子为\",{\"1\":{\"205\":1}}],[\"的右子树是否对称\",{\"1\":{\"294\":1}}],[\"的右子树与\",{\"1\":{\"294\":1}}],[\"的右儿子为\",{\"1\":{\"205\":1}}],[\"的子节点列表中\",{\"1\":{\"288\":2}}],[\"的子序列\",{\"1\":{\"312\":2}}],[\"的子序列的字符串长度最长是多少\",{\"1\":{\"91\":1}}],[\"的子序列又是\",{\"1\":{\"91\":1}}],[\"的列表存储当前节点对应出现过的字符的子节点\",{\"1\":{\"288\":1}}],[\"的位置会直接返回\",{\"1\":{\"306\":1}}],[\"的位置\",{\"1\":{\"288\":1,\"308\":1}}],[\"的前缀之一为\",{\"1\":{\"287\":1}}],[\"的前提下\",{\"1\":{\"199\":1}}],[\"的访问频次\",{\"1\":{\"262\":1}}],[\"的升级\",{\"1\":{\"262\":1}}],[\"的查询压力\",{\"1\":{\"261\":1}}],[\"的消息\",{\"1\":{\"261\":1}}],[\"的消费者中处理\",{\"1\":{\"259\":1}}],[\"的消费者\",{\"1\":{\"229\":1}}],[\"的指令\",{\"1\":{\"261\":1}}],[\"的指定位\",{\"1\":{\"126\":1}}],[\"的压力更小\",{\"1\":{\"261\":1}}],[\"的压力\",{\"1\":{\"261\":1}}],[\"的原理可以看这篇文章\",{\"1\":{\"261\":1}}],[\"的时间复杂度\",{\"1\":{\"259\":1}}],[\"的时候\",{\"1\":{\"31\":1}}],[\"的实现类有\",{\"1\":{\"350\":1}}],[\"的实现\",{\"1\":{\"259\":1}}],[\"的构建\",{\"1\":{\"259\":1}}],[\"的评论内容\",{\"1\":{\"257\":1}}],[\"的设计思想\",{\"1\":{\"257\":1}}],[\"的好处是\",{\"1\":{\"251\":1}}],[\"的方法\",{\"1\":{\"387\":1}}],[\"的方法是同步的\",{\"1\":{\"350\":1}}],[\"的方式进行分发\",{\"1\":{\"250\":1}}],[\"的方案数\",{\"1\":{\"96\":1}}],[\"的吞吐模型理解为\",{\"1\":{\"250\":1}}],[\"的思路\",{\"1\":{\"249\":1,\"262\":1}}],[\"的瓶颈\",{\"1\":{\"241\":1}}],[\"的分布可能出现同一个值堆叠多个元素\",{\"1\":{\"241\":1}}],[\"的分页排序\",{\"1\":{\"241\":1}}],[\"的理解\",{\"1\":{\"240\":1}}],[\"的字段\",{\"1\":{\"232\":1}}],[\"的字符串以及\",{\"1\":{\"93\":1}}],[\"的字符串\",{\"1\":{\"91\":1}}],[\"的定义是\",{\"1\":{\"222\":1}}],[\"的用法和\",{\"1\":{\"211\":1}}],[\"的第三个参数传入一个元素\",{\"1\":{\"211\":1}}],[\"的第一个元素\",{\"1\":{\"110\":1}}],[\"的减法\",{\"1\":{\"211\":1}}],[\"的哈希值\",{\"1\":{\"209\":1}}],[\"的经验值是\",{\"1\":{\"209\":1}}],[\"的偏移量\",{\"1\":{\"204\":1}}],[\"的距离\",{\"1\":{\"204\":1}}],[\"的sg函数值构成的集合再执行mex\",{\"1\":{\"186\":1}}],[\"的每一个集合状态\",{\"1\":{\"180\":1}}],[\"的集合\",{\"1\":{\"180\":1}}],[\"的乘法逆元为\",{\"1\":{\"176\":1}}],[\"的乘法逆元\",{\"1\":{\"176\":1}}],[\"的模\",{\"1\":{\"176\":1}}],[\"的逆元不存在\",{\"1\":{\"176\":1}}],[\"的逆元\",{\"1\":{\"176\":1}}],[\"的解\",{\"1\":{\"171\":1}}],[\"的欧拉函数即为\",{\"1\":{\"168\":1}}],[\"的质因子\",{\"1\":{\"161\":1,\"168\":1}}],[\"的表中划去\",{\"1\":{\"160\":1}}],[\"的表中筛得素数的同时\",{\"1\":{\"160\":1}}],[\"的素数表\",{\"1\":{\"160\":1}}],[\"的约数\",{\"1\":{\"159\":1}}],[\"的唯一质因子\",{\"1\":{\"156\":1}}],[\"的因子\",{\"1\":{\"156\":3}}],[\"的更新方式为\",{\"1\":{\"142\":1}}],[\"的点\",{\"1\":{\"137\":1}}],[\"的个数\",{\"1\":{\"127\":2}}],[\"的低\",{\"1\":{\"126\":6}}],[\"的商和余数\",{\"1\":{\"118\":1}}],[\"的值为\",{\"1\":{\"126\":1}}],[\"的值\",{\"1\":{\"117\":1,\"177\":1,\"178\":1}}],[\"的问题\",{\"1\":{\"111\":1,\"261\":1}}],[\"的最大整数\",{\"1\":{\"211\":1}}],[\"的最大值\",{\"1\":{\"199\":1}}],[\"的最小整数的下标\",{\"1\":{\"211\":1}}],[\"的最小质因子也就是\",{\"1\":{\"161\":1}}],[\"的最小质因子就是\",{\"1\":{\"161\":1}}],[\"的最小质因子\",{\"1\":{\"161\":2,\"168\":3}}],[\"的最后一位\",{\"1\":{\"127\":1}}],[\"的最后一个元素\",{\"1\":{\"110\":1}}],[\"的最低位为\",{\"1\":{\"126\":1}}],[\"的最短hamilton路径\",{\"1\":{\"100\":1}}],[\"的所有因数\",{\"1\":{\"156\":1}}],[\"的所有出边\",{\"1\":{\"143\":1}}],[\"的所有路径\",{\"1\":{\"100\":1}}],[\"的所有方案\",{\"1\":{\"99\":1}}],[\"的棋盘可以摆放不同的\",{\"1\":{\"99\":1}}],[\"的树里各个数字有多少个\",{\"1\":{\"97\":1}}],[\"的各位数字有多少个\",{\"1\":{\"97\":2}}],[\"的出现次数\",{\"1\":{\"97\":1}}],[\"的一种划分\",{\"1\":{\"96\":1}}],[\"的一棵子树包括\",{\"1\":{\"24\":1}}],[\"的某个位置插入某个字符\",{\"1\":{\"94\":1}}],[\"的某个节点和这个节点的所有后代节点\",{\"1\":{\"24\":1}}],[\"的背包\",{\"1\":{\"87\":1}}],[\"的写法\",{\"1\":{\"86\":1}}],[\"的形式存储\",{\"1\":{\"141\":1}}],[\"的形式\",{\"1\":{\"79\":1}}],[\"的初始网格描绘出来\",{\"1\":{\"67\":1}}],[\"的网格中\",{\"1\":{\"67\":2}}],[\"的二进制表示\",{\"1\":{\"127\":1}}],[\"的二进制表示中第\",{\"1\":{\"127\":1,\"169\":1}}],[\"的二进制表示下的每一位是不是\",{\"1\":{\"41\":1}}],[\"的二进制位右移\",{\"1\":{\"126\":1}}],[\"的二进制位\",{\"1\":{\"126\":1}}],[\"的二维整数数组\",{\"1\":{\"66\":1}}],[\"的操作方式\",{\"1\":{\"94\":1}}],[\"的操作\",{\"1\":{\"62\":1,\"261\":1,\"357\":1,\"375\":1}}],[\"的高度只存在于平衡二叉树\",{\"1\":{\"62\":1}}],[\"的主要功能就是从某个节点向上遍历到根节点\",{\"1\":{\"62\":1}}],[\"的不平衡状况\",{\"1\":{\"59\":1}}],[\"的正方形\",{\"1\":{\"51\":1}}],[\"的正余数\",{\"0\":{\"35\":1}}],[\"的数目\",{\"1\":{\"308\":1}}],[\"的数据\",{\"1\":{\"262\":2}}],[\"的数整除\",{\"1\":{\"155\":1}}],[\"的数对的个数\",{\"1\":{\"112\":1}}],[\"的数组\",{\"1\":{\"50\":1}}],[\"的数列\",{\"1\":{\"49\":1,\"127\":1}}],[\"的组合有多少种\",{\"1\":{\"49\":1}}],[\"的差值必然是\",{\"1\":{\"49\":1}}],[\"的余数相等\",{\"1\":{\"49\":1}}],[\"的和\",{\"1\":{\"49\":1}}],[\"的和是k的倍数\",{\"1\":{\"49\":1}}],[\"的和是\",{\"1\":{\"49\":1}}],[\"的目的是可以在\",{\"1\":{\"43\":1}}],[\"的元素\",{\"1\":{\"211\":1,\"353\":1}}],[\"的元素的位置的迭代器\",{\"1\":{\"211\":1}}],[\"的元素到\",{\"1\":{\"42\":1}}],[\"的元素赋值到当前的\",{\"1\":{\"42\":1}}],[\"的倍数时\",{\"1\":{\"176\":1}}],[\"的倍数的个数\",{\"1\":{\"49\":1}}],[\"的倍数\",{\"1\":{\"36\":1,\"49\":3,\"171\":1,\"176\":1}}],[\"的成员函数c\",{\"1\":{\"31\":1}}],[\"的\",{\"1\":{\"31\":2,\"57\":1,\"79\":1,\"232\":2,\"241\":1,\"247\":1,\"250\":1,\"257\":1,\"261\":2,\"262\":1,\"314\":2,\"357\":1,\"388\":1,\"395\":2,\"401\":2,\"402\":1}}],[\"的长度均不超过\",{\"1\":{\"92\":1}}],[\"的长度\",{\"1\":{\"31\":1,\"92\":1}}],[\"的长度时会被截断\",{\"1\":{\"31\":1}}],[\"的真实长度\",{\"1\":{\"31\":1}}],[\"否则poll\",{\"1\":{\"351\":1}}],[\"否则不需要更换\",{\"1\":{\"353\":1}}],[\"否则不更新\",{\"1\":{\"319\":1}}],[\"否则不存在拓扑序列\",{\"1\":{\"137\":1}}],[\"否则匹配成功返回node\",{\"1\":{\"289\":1}}],[\"否则更新\",{\"1\":{\"288\":1}}],[\"否则两条同时发布的评论\",{\"1\":{\"229\":1}}],[\"否则返回一个负数值\",{\"1\":{\"356\":1}}],[\"否则返回null\",{\"1\":{\"351\":2}}],[\"否则返回最小生成树的树边权重之和\",{\"1\":{\"148\":1}}],[\"否则返回\",{\"1\":{\"116\":1,\"337\":1}}],[\"否则返回flase\",{\"1\":{\"116\":1}}],[\"否则返回false\",{\"1\":{\"116\":1,\"144\":1,\"344\":1,\"348\":2,\"349\":3,\"350\":1,\"351\":2,\"352\":1,\"353\":1}}],[\"否则需要再加一辆车\",{\"1\":{\"78\":1}}],[\"否则输出\",{\"1\":{\"61\":1,\"62\":1}}],[\"否则将会得到超过限制限制的结果\",{\"1\":{\"37\":1}}],[\"否则\",{\"1\":{\"24\":1,\"25\":1,\"90\":1,\"287\":2,\"336\":1}}],[\"返回存储桶的列表\",{\"1\":{\"377\":1}}],[\"返回布尔值\",{\"1\":{\"377\":1}}],[\"返回list1中最后一个等于list2的子列表的索引\",{\"1\":{\"356\":1}}],[\"返回list1中第一个等于list2的子列表的索引\",{\"1\":{\"356\":1}}],[\"返回集合中最小的元素\",{\"1\":{\"356\":1}}],[\"返回集合中最大的元素\",{\"1\":{\"356\":1}}],[\"返回类型为double\",{\"1\":{\"355\":1}}],[\"返回值大于0\",{\"1\":{\"353\":1}}],[\"返回值为栈顶元素e\",{\"1\":{\"350\":1}}],[\"返回值为元素e\",{\"1\":{\"350\":1}}],[\"返回栈中元素个数\",{\"1\":{\"350\":1}}],[\"返回栈顶元素\",{\"1\":{\"210\":1}}],[\"返回出栈元素e\",{\"1\":{\"350\":1}}],[\"返回这个映射的值\",{\"1\":{\"349\":1}}],[\"返回这个映射的键\",{\"1\":{\"349\":1}}],[\"返回这两个字符串的最长公共子序列的长度\",{\"1\":{\"312\":1}}],[\"返回map中中键值对<k\",{\"1\":{\"349\":1}}],[\"返回map中key对应的value\",{\"1\":{\"349\":2}}],[\"返回map\",{\"1\":{\"349\":1}}],[\"返回value值\",{\"1\":{\"349\":1}}],[\"返回有序集合中第一个元素\",{\"1\":{\"348\":1}}],[\"返回有多少个1\",{\"1\":{\"210\":1}}],[\"返回false\",{\"1\":{\"348\":1}}],[\"返回动态数组所存元素个数\",{\"1\":{\"347\":1}}],[\"返回元素位置在index的元素e\",{\"1\":{\"347\":1}}],[\"返回元素个数\",{\"1\":{\"210\":1}}],[\"返回之前的内容\",{\"1\":{\"347\":1}}],[\"返回缓冲字符串长度\",{\"1\":{\"345\":1}}],[\"返回index位置的char\",{\"1\":{\"345\":1}}],[\"返回index位置的字符char\",{\"1\":{\"344\":1}}],[\"返回一个随机数\",{\"1\":{\"355\":1}}],[\"返回一个collection<v>\",{\"1\":{\"349\":1}}],[\"返回一个set\",{\"1\":{\"349\":1}}],[\"返回一个与构建起或缓冲器内容相同的字符串\",{\"1\":{\"345\":1}}],[\"返回一个新的字符串全部转成大写\",{\"1\":{\"344\":1}}],[\"返回一个新的字符串全部转成小写\",{\"1\":{\"344\":1}}],[\"返回一个新字符串string\",{\"1\":{\"344\":1}}],[\"返回一个字符串\",{\"1\":{\"342\":1}}],[\"返回str最后出现的位置\",{\"1\":{\"344\":1}}],[\"返回str第一个出现的位置\",{\"1\":{\"344\":1}}],[\"返回从begin开始后面所有的字符片段\",{\"1\":{\"344\":1}}],[\"返回字符片段\",{\"1\":{\"344\":1}}],[\"返回字符串所在字符数组的起始地址\",{\"1\":{\"210\":1}}],[\"返回字符串长度\",{\"1\":{\"210\":1,\"344\":1}}],[\"返回与arr类型相同的一个数组\",{\"1\":{\"342\":1}}],[\"返回翻转后的二叉树的根节点\",{\"1\":{\"326\":1}}],[\"返回每次的根节点即可\",{\"1\":{\"325\":1}}],[\"返回不为空\",{\"1\":{\"289\":1}}],[\"返回不为空且节点标记为尾节点\",{\"1\":{\"289\":1}}],[\"返回该pair的字符串表示\",{\"1\":{\"357\":1}}],[\"返回该pair的value值\",{\"1\":{\"357\":1}}],[\"返回该pair的key值\",{\"1\":{\"357\":1}}],[\"返回该节点的最大深度\",{\"1\":{\"283\":1}}],[\"返回该树的\",{\"1\":{\"281\":1}}],[\"返回其最大深度\",{\"1\":{\"275\":1}}],[\"返回指向第一个大于等于\",{\"1\":{\"211\":1}}],[\"返回去重\",{\"1\":{\"211\":1}}],[\"返回大于x的最小的数的迭代器\",{\"1\":{\"210\":1}}],[\"返回大于等于x的最小的数的迭代器\",{\"1\":{\"210\":1}}],[\"返回某一个数的个数\",{\"1\":{\"210\":1}}],[\"返回前驱和后继\",{\"1\":{\"210\":1}}],[\"返回堆顶元素\",{\"1\":{\"210\":1}}],[\"返回队中元素个数\",{\"1\":{\"351\":1}}],[\"返回队尾元素\",{\"1\":{\"210\":1}}],[\"返回队头元素\",{\"1\":{\"210\":1}}],[\"返回子串\",{\"1\":{\"210\":1}}],[\"返回是否为空\",{\"1\":{\"210\":1}}],[\"返回x应该插入的位置\",{\"1\":{\"208\":1}}],[\"返回x的下标\",{\"1\":{\"208\":1}}],[\"返回x的祖宗节点\",{\"1\":{\"202\":1,\"203\":1,\"204\":1}}],[\"返回a的b次方\",{\"1\":{\"355\":1}}],[\"返回a的绝对值\",{\"1\":{\"355\":1}}],[\"返回a和b的最小值\",{\"1\":{\"355\":1}}],[\"返回a和b的最大值\",{\"1\":{\"355\":1}}],[\"返回a\",{\"1\":{\"116\":1}}],[\"返回true\",{\"1\":{\"116\":2}}],[\"返回父亲节点\",{\"1\":{\"58\":1}}],[\"返回按照查找规则找到的第一个字符或者子串的位置\",{\"1\":{\"40\":1}}],[\"返回c风格字符串长度\",{\"1\":{\"31\":1}}],[\"返回\",{\"1\":{\"24\":2,\"25\":3,\"31\":3,\"40\":1,\"44\":2,\"127\":1,\"269\":1,\"287\":4,\"312\":1,\"318\":1,\"326\":1,\"330\":2,\"331\":1,\"336\":2,\"337\":1}}],[\"中配置\",{\"1\":{\"375\":1}}],[\"中文文档地址\",{\"1\":{\"370\":1}}],[\"中文官网\",{\"1\":{\"368\":1}}],[\"中新增了一个\",{\"1\":{\"357\":1}}],[\"中也可以使用\",{\"1\":{\"352\":1}}],[\"中实现堆栈数据结构\",{\"1\":{\"350\":1}}],[\"中键如果是基本数据类型\",{\"1\":{\"349\":1}}],[\"中标准的对象创建方式\",{\"1\":{\"344\":1}}],[\"中序遍历\",{\"1\":{\"269\":1}}],[\"中序\",{\"1\":{\"269\":1}}],[\"中查找小于等于\",{\"1\":{\"211\":1}}],[\"中查找大于等于\",{\"1\":{\"211\":1}}],[\"中能整除\",{\"1\":{\"180\":1}}],[\"中能被\",{\"1\":{\"180\":1}}],[\"中至少一个数整除的整数有多少个\",{\"1\":{\"180\":1}}],[\"中p的次数是\",{\"1\":{\"178\":1}}],[\"中国剩余定理\",{\"0\":{\"172\":1}}],[\"中计算过了\",{\"1\":{\"168\":1}}],[\"中与\",{\"1\":{\"167\":1}}],[\"中最多只包含一个大于\",{\"1\":{\"156\":1}}],[\"中找到\",{\"1\":{\"112\":2}}],[\"中的方法在\",{\"1\":{\"352\":1}}],[\"中的元素和\",{\"1\":{\"349\":1}}],[\"中的一个节点\",{\"1\":{\"306\":1}}],[\"中的数据最终是面向运营体系提供服务能力\",{\"1\":{\"251\":1}}],[\"中的数据被\",{\"1\":{\"251\":1}}],[\"中的次数\",{\"1\":{\"178\":1}}],[\"中的所有质数\",{\"1\":{\"159\":1}}],[\"中的每个数加上c\",{\"1\":{\"122\":1}}],[\"中的\",{\"1\":{\"110\":2,\"237\":1,\"276\":1,\"357\":1,\"375\":1,\"387\":1}}],[\"中的某个字符替换为另一个字符\",{\"1\":{\"94\":1}}],[\"中的某个字符删除\",{\"1\":{\"94\":1}}],[\"中\",{\"1\":{\"106\":1,\"108\":1,\"247\":1,\"250\":1,\"251\":2,\"313\":1,\"314\":2,\"319\":1,\"330\":1,\"331\":1,\"350\":1,\"386\":1,\"388\":1}}],[\"中使用当前类的成员函数和成员变量\",{\"1\":{\"43\":1}}],[\"中含有空字符\",{\"1\":{\"31\":1}}],[\"中是否包含和\",{\"1\":{\"24\":1}}],[\"中间件流式消费\",{\"1\":{\"251\":1}}],[\"中间件解决了异构网络环境下软件互联和互操作等共性问题\",{\"1\":{\"14\":1}}],[\"中间件与操作系统和数据库共同构成基础软件三大支柱\",{\"1\":{\"14\":1}}],[\"中间件不仅仅实现互连\",{\"1\":{\"14\":1}}],[\"中间件是一类软件统称\",{\"1\":{\"14\":1}}],[\"中间件在客户服务器的操作系统\",{\"1\":{\"14\":1}}],[\"中间件\",{\"0\":{\"14\":1},\"1\":{\"14\":1},\"2\":{\"366\":1,\"371\":1,\"379\":1}}],[\"和之前初始化\",{\"1\":{\"394\":1}}],[\"和之前讲过的\",{\"1\":{\"390\":1}}],[\"和定义常量来获取配置项的方式不同\",{\"1\":{\"384\":1}}],[\"和定义逻辑自恰\",{\"1\":{\"326\":1}}],[\"和校验和\",{\"1\":{\"370\":1}}],[\"和传统对象存储相比\",{\"1\":{\"370\":1}}],[\"和可变字符串\",{\"1\":{\"343\":1}}],[\"和尽可能高的写吞吐\",{\"1\":{\"241\":1}}],[\"和上面类似\",{\"1\":{\"210\":1}}],[\"和条件\",{\"1\":{\"183\":1}}],[\"和前面每一个都组合一下\",{\"1\":{\"49\":1}}],[\"和\",{\"1\":{\"24\":1,\"31\":2,\"49\":3,\"51\":1,\"61\":4,\"66\":1,\"68\":1,\"78\":1,\"79\":1,\"91\":2,\"92\":2,\"93\":1,\"94\":1,\"97\":2,\"105\":1,\"106\":1,\"109\":1,\"110\":1,\"111\":1,\"117\":1,\"118\":1,\"139\":1,\"150\":1,\"160\":2,\"171\":1,\"172\":2,\"180\":1,\"210\":1,\"232\":1,\"241\":2,\"248\":1,\"305\":1,\"308\":2,\"312\":1,\"313\":1,\"314\":5,\"350\":1,\"357\":1,\"365\":1,\"370\":2,\"384\":1,\"392\":1,\"395\":1,\"397\":1}}],[\"资料等等\",{\"1\":{\"19\":1}}],[\"资源共享\",{\"1\":{\"14\":1}}],[\"帮助创建\",{\"1\":{\"343\":1}}],[\"帮助学习\",{\"1\":{\"18\":1}}],[\"帮助用户灵活\",{\"1\":{\"14\":1}}],[\"常量的方式不易于修改\",{\"1\":{\"384\":1}}],[\"常量的方式较容易取错变量\",{\"1\":{\"384\":1}}],[\"常规的广度优先搜索只有一个起点\",{\"1\":{\"331\":1}}],[\"常见的有阿里云对象存储服务\",{\"1\":{\"369\":1}}],[\"常见模型\",{\"1\":{\"195\":1,\"198\":1}}],[\"常见问题分类\",{\"1\":{\"128\":1}}],[\"常见中间件主要分为\",{\"1\":{\"14\":1}}],[\"常用语言的\",{\"1\":{\"370\":1}}],[\"常用方法\",{\"1\":{\"344\":1}}],[\"常用api\",{\"0\":{\"341\":1}}],[\"常用库函数\",{\"0\":{\"211\":1}}],[\"常用来对一个数据的某些位设置为1\",{\"1\":{\"126\":1}}],[\"常用模版\",{\"1\":{\"95\":1}}],[\"常用于配合\",{\"1\":{\"40\":1}}],[\"常用框架\",{\"0\":{\"17\":1},\"2\":{\"410\":1}}],[\"为保持\",{\"1\":{\"356\":1}}],[\"为接口\",{\"1\":{\"351\":1}}],[\"为了判断是否有永远不会腐烂的橘子\",{\"1\":{\"331\":1}}],[\"为了保证数据完整性\",{\"1\":{\"232\":1}}],[\"为根的这棵二叉树已经被翻转\",{\"1\":{\"326\":1}}],[\"为根的这棵二叉树翻转\",{\"1\":{\"326\":1}}],[\"为什么还会有其他\",{\"1\":{\"394\":1}}],[\"为什么每次遇到岛屿\",{\"1\":{\"306\":1}}],[\"为什么基础功能的原子化实现需要架构的补充呢\",{\"1\":{\"229\":1}}],[\"为子节点\",{\"1\":{\"288\":2}}],[\"为业务在评论区获得更好的曝光展现\",{\"1\":{\"235\":1}}],[\"为一些长耗时\",{\"1\":{\"229\":1}}],[\"为评论基础功能的原子化实现\",{\"1\":{\"229\":1}}],[\"为多个内部管理后台提供服务\",{\"1\":{\"227\":1}}],[\"为用户营造更好的评论区氛围\",{\"1\":{\"223\":1}}],[\"为x的后继节点y1\",{\"1\":{\"186\":1}}],[\"为求出不属于集合s的最小非负整数的运算\",{\"1\":{\"185\":1}}],[\"为质数时\",{\"1\":{\"176\":1}}],[\"为避免这种情况\",{\"1\":{\"126\":1}}],[\"为右下角的子矩阵中的所有元素加上c\",{\"1\":{\"123\":1}}],[\"为右下角的子矩阵的和为\",{\"1\":{\"121\":1}}],[\"为左上角\",{\"1\":{\"121\":1,\"123\":1}}],[\"为高兴值\",{\"1\":{\"102\":1}}],[\"为父亲\",{\"1\":{\"102\":1}}],[\"为\",{\"1\":{\"62\":1,\"126\":2,\"176\":2,\"180\":1,\"257\":1}}],[\"为亲戚\",{\"1\":{\"61\":1}}],[\"为人数\",{\"1\":{\"61\":1}}],[\"为第\",{\"1\":{\"102\":2}}],[\"为第三段\",{\"1\":{\"50\":1}}],[\"为第一段\",{\"1\":{\"50\":1}}],[\"为空\",{\"1\":{\"25\":1}}],[\"为应用软件间共享资源提供了可复用的\",{\"1\":{\"14\":1}}],[\"为上层应用软件提供开发\",{\"1\":{\"14\":1}}],[\"并放到\",{\"1\":{\"386\":1}}],[\"并将这些块分散存储在不同的磁盘上\",{\"1\":{\"370\":1}}],[\"并将热点标识传递至bff层\",{\"1\":{\"234\":1}}],[\"并形成一个全局的命名空间\",{\"1\":{\"370\":1}}],[\"并调整堆\",{\"1\":{\"353\":1}}],[\"并返回原来的值\",{\"1\":{\"349\":1}}],[\"并返回删除元素e\",{\"1\":{\"347\":1}}],[\"并返回其根节点\",{\"1\":{\"324\":1}}],[\"并令引用变量\",{\"1\":{\"344\":1}}],[\"并填入arr的值\",{\"1\":{\"342\":1}}],[\"并提供了修改字符串的方法\",{\"1\":{\"343\":1}}],[\"并提供标准接口\",{\"1\":{\"14\":1}}],[\"并提升整个热评模块的可观测水平\",{\"1\":{\"241\":1}}],[\"并发事务导致的\",{\"1\":{\"238\":1}}],[\"并发查询楼中楼评论列表\",{\"1\":{\"231\":1}}],[\"并结合在线数据库刷新部分实时性要求较高的字段\",{\"1\":{\"227\":1}}],[\"并转换为视图模型\",{\"1\":{\"226\":1}}],[\"并在gi上行动一步\",{\"1\":{\"187\":1}}],[\"并不是第一行\",{\"1\":{\"173\":1}}],[\"并回代得到方程的解\",{\"1\":{\"173\":1}}],[\"并非真正的无穷大\",{\"1\":{\"142\":1}}],[\"并非字符串的首地址\",{\"1\":{\"31\":1}}],[\"并逐位执行操作\",{\"1\":{\"125\":1}}],[\"并且\",{\"1\":{\"370\":1}}],[\"并且除了\",{\"1\":{\"370\":1}}],[\"并且支持跨越多个数据中心\",{\"1\":{\"370\":1}}],[\"并且忽略挂起\",{\"1\":{\"362\":1}}],[\"并且相同索引对应的元素都相同\",{\"1\":{\"342\":1}}],[\"并且学习课程\",{\"1\":{\"337\":1}}],[\"并且每座岛屿只能由水平方向和\",{\"1\":{\"305\":1}}],[\"并且对于相同前缀只存储一次\",{\"1\":{\"288\":1}}],[\"并且对于任意的整数\",{\"1\":{\"176\":1}}],[\"并且评论之间是通过赞数进行排序的\",{\"1\":{\"257\":1}}],[\"并且从每个局面向沿着合法行动能够到达的下一个局面连有向边\",{\"1\":{\"184\":1}}],[\"并且判断是否有解\",{\"1\":{\"172\":1}}],[\"并且边长之和最小\",{\"1\":{\"148\":1}}],[\"并且一般\",{\"1\":{\"95\":1}}],[\"并且可以捕获一定范围内的变量\",{\"1\":{\"43\":1}}],[\"并进行路径压缩\",{\"1\":{\"58\":1}}],[\"并按引用捕获\",{\"1\":{\"43\":1}}],[\"并作为副本在函数体中使用\",{\"1\":{\"43\":1}}],[\"并作为引用在函数体中使用\",{\"1\":{\"43\":1}}],[\"并查集核心操作\",{\"1\":{\"149\":1}}],[\"并查集的父节点数组\",{\"1\":{\"149\":1}}],[\"并查集是一种非常精巧实用的数据结构\",{\"1\":{\"55\":1}}],[\"并查集\",{\"0\":{\"54\":1,\"62\":1,\"201\":1,\"308\":1},\"1\":{\"3\":1},\"2\":{\"64\":1,\"310\":1}}],[\"英语\",{\"1\":{\"14\":1}}],[\"lmin\",{\"1\":{\"358\":1}}],[\"lmax\",{\"1\":{\"358\":1}}],[\"lru\",{\"1\":{\"261\":1}}],[\"l代表区间左端点\",{\"1\":{\"219\":1}}],[\"lucas\",{\"0\":{\"177\":1},\"1\":{\"177\":4}}],[\"lcs\",{\"1\":{\"313\":2,\"314\":4}}],[\"lcm\",{\"1\":{\"165\":1}}],[\"lca\",{\"1\":{\"55\":1}}],[\"ln\",{\"1\":{\"159\":4}}],[\"license\",{\"1\":{\"368\":1}}],[\"listobjectsargs\",{\"1\":{\"378\":1}}],[\"listobjects\",{\"1\":{\"378\":4}}],[\"listbuckets\",{\"1\":{\"377\":2}}],[\"list2\",{\"1\":{\"356\":2}}],[\"list1\",{\"1\":{\"356\":2}}],[\"list\",{\"0\":{\"347\":1,\"412\":1},\"1\":{\"347\":3,\"348\":2,\"351\":1}}],[\"list<bucket>\",{\"1\":{\"377\":1}}],[\"list<e>\",{\"1\":{\"347\":2,\"348\":1,\"356\":4}}],[\"list<integer>\",{\"1\":{\"337\":3,\"338\":2,\"347\":2}}],[\"list<int\",{\"1\":{\"332\":2}}],[\"list<treenode>\",{\"1\":{\"277\":2}}],[\"linkedhashset\",{\"1\":{\"348\":2}}],[\"linkedlist\",{\"1\":{\"337\":1,\"338\":1,\"347\":2,\"350\":1,\"351\":1}}],[\"linkedlist<>\",{\"1\":{\"277\":2,\"307\":1,\"332\":1,\"337\":1,\"338\":1,\"347\":1,\"351\":1,\"352\":1}}],[\"linux\",{\"0\":{\"362\":1},\"1\":{\"7\":1,\"362\":1}}],[\"lived\",{\"1\":{\"261\":1}}],[\"like\",{\"1\":{\"231\":1,\"232\":1,\"241\":2}}],[\"limit\",{\"1\":{\"93\":3,\"231\":2}}],[\"lb\",{\"1\":{\"93\":4}}],[\"loadproperties\",{\"1\":{\"386\":1}}],[\"loadcascadedpropertiesfromresources\",{\"1\":{\"386\":2}}],[\"load\",{\"1\":{\"262\":1}}],[\"localhost\",{\"1\":{\"364\":1,\"375\":1}}],[\"local\",{\"1\":{\"262\":2}}],[\"logger\",{\"1\":{\"386\":1,\"402\":2}}],[\"log>\",{\"1\":{\"365\":1}}],[\"logpath>\",{\"1\":{\"365\":1}}],[\"logs<\",{\"1\":{\"365\":1}}],[\"log10\",{\"1\":{\"355\":1}}],[\"logo\",{\"1\":{\"240\":1}}],[\"logk\",{\"1\":{\"169\":1}}],[\"log\",{\"1\":{\"149\":1,\"156\":1,\"165\":1,\"355\":3,\"362\":4}}],[\"logn\",{\"1\":{\"62\":2,\"210\":3,\"241\":1,\"259\":1,\"342\":1,\"353\":2,\"356\":1}}],[\"lowbit\",{\"1\":{\"127\":5}}],[\"lower\",{\"1\":{\"90\":1,\"112\":3,\"210\":4,\"211\":4}}],[\"longestcommonsubsequence\",{\"1\":{\"314\":1}}],[\"long\",{\"1\":{\"49\":2,\"50\":2,\"51\":2,\"99\":2,\"112\":2,\"148\":2,\"160\":2,\"164\":2,\"172\":2,\"180\":2,\"209\":4,\"358\":2}}],[\"lld\",{\"1\":{\"133\":1,\"172\":6}}],[\"ll\",{\"1\":{\"49\":4,\"50\":3,\"51\":1,\"99\":2,\"112\":3,\"148\":1,\"160\":7,\"164\":4,\"172\":15,\"176\":4,\"177\":10,\"180\":2}}],[\"l\",{\"1\":{\"49\":8,\"90\":4,\"105\":8,\"106\":7,\"108\":2,\"109\":8,\"110\":8,\"111\":6,\"113\":5,\"120\":2,\"122\":2,\"129\":4,\"130\":5,\"192\":8,\"209\":4,\"215\":3,\"216\":5,\"217\":5,\"218\":10,\"219\":9,\"276\":2,\"283\":3,\"301\":5,\"326\":2}}],[\"language\",{\"0\":{\"424\":1}}],[\"lazy\",{\"1\":{\"259\":1}}],[\"la\",{\"1\":{\"93\":4}}],[\"lamda\",{\"1\":{\"43\":1}}],[\"lambda\",{\"1\":{\"43\":4}}],[\"lambda表达式\",{\"0\":{\"43\":1}}],[\"lastindexofsublist\",{\"1\":{\"356\":1}}],[\"lastindexof\",{\"1\":{\"344\":2}}],[\"last\",{\"1\":{\"42\":2,\"97\":4,\"348\":1}}],[\"len\",{\"1\":{\"32\":2,\"90\":5,\"95\":12}}],[\"len++\",{\"1\":{\"32\":1,\"95\":2}}],[\"length\",{\"1\":{\"31\":6,\"210\":1,\"289\":2,\"301\":1,\"306\":4,\"307\":2,\"308\":2,\"314\":2,\"332\":4,\"342\":1,\"344\":1,\"345\":1,\"378\":1}}],[\"left\",{\"1\":{\"25\":3,\"276\":1,\"277\":2,\"283\":1,\"295\":3,\"301\":1,\"326\":2}}],[\"leetcode\",{\"0\":{\"5\":1,\"417\":1}}],[\"架构\",{\"1\":{\"245\":1}}],[\"架构以及系统架构方面的笔记知识点\",{\"1\":{\"6\":1}}],[\"架构设计等同于数据设计\",{\"1\":{\"247\":1}}],[\"架构设计最重要的就是\",{\"1\":{\"246\":1}}],[\"架构设计\",{\"0\":{\"6\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"247\":1},\"2\":{\"243\":1,\"253\":1,\"263\":1}}],[\"剑指offer\",{\"0\":{\"20\":1}}],[\"剑指\",{\"0\":{\"4\":1}}],[\"搜索结束\",{\"1\":{\"307\":1}}],[\"搜索\",{\"0\":{\"65\":1},\"1\":{\"3\":1,\"223\":1,\"246\":1,\"337\":1,\"363\":1}}],[\"搜索与图论\",{\"0\":{\"132\":1},\"1\":{\"2\":1}}],[\"笔记\",{\"0\":{\"3\":1},\"2\":{\"46\":1,\"52\":1,\"63\":1,\"72\":1,\"80\":1}}],[\"笔试题和面试题等\",{\"1\":{\"1\":1}}],[\"贪心\",{\"0\":{\"213\":1},\"1\":{\"2\":1},\"2\":{\"220\":1}}],[\"数学\",{\"2\":{\"188\":1}}],[\"数学知识\",{\"0\":{\"153\":1},\"1\":{\"2\":1}}],[\"数之间用空格隔开\",{\"1\":{\"172\":1}}],[\"数对\",{\"1\":{\"112\":1}}],[\"数位统计类dp\",{\"0\":{\"97\":1}}],[\"数列\",{\"1\":{\"92\":1}}],[\"数字类型包装类都支持两个常量\",{\"1\":{\"358\":1}}],[\"数字三角形\",{\"0\":{\"89\":1}}],[\"数字\",{\"1\":{\"79\":1}}],[\"数组降序排序排序\",{\"1\":{\"342\":1}}],[\"数组记录遍历过的节点防止走回头路\",{\"1\":{\"306\":1}}],[\"数组时\",{\"1\":{\"199\":2}}],[\"数组和匹配的操作类似\",{\"1\":{\"199\":1}}],[\"数组模拟链表\",{\"0\":{\"190\":1}}],[\"数组进行备份\",{\"1\":{\"142\":1}}],[\"数组的备份\",{\"1\":{\"142\":1}}],[\"数组是上一次迭代后\",{\"1\":{\"142\":1}}],[\"数组b也是从低位\",{\"1\":{\"115\":1,\"116\":1}}],[\"数组a\",{\"1\":{\"115\":1,\"116\":1}}],[\"数组中只包含\",{\"1\":{\"66\":1}}],[\"数组\",{\"0\":{\"342\":1},\"1\":{\"62\":1,\"199\":2,\"211\":2,\"306\":1,\"308\":1,\"344\":1,\"347\":1}}],[\"数据存储高容错\",{\"1\":{\"370\":1}}],[\"数据\",{\"1\":{\"257\":1,\"261\":1}}],[\"数据表设计\",{\"0\":{\"257\":1},\"1\":{\"257\":1}}],[\"数据双向请求等\",{\"1\":{\"247\":1}}],[\"数据局部性集中与散列相结合\",{\"1\":{\"241\":1}}],[\"数据更新方式\",{\"1\":{\"241\":1}}],[\"数据提供方很难也不应该承受热评业务的巨大流量\",{\"1\":{\"241\":1}}],[\"数据量级规模的增加\",{\"1\":{\"241\":1}}],[\"数据报表丰富\",{\"1\":{\"241\":1}}],[\"数据读写阶段均考虑了一致性风险\",{\"1\":{\"237\":1}}],[\"数据安全\",{\"0\":{\"237\":1},\"1\":{\"236\":1}}],[\"数据稀疏\",{\"1\":{\"234\":1}}],[\"数据组装在服务编排之后执行\",{\"1\":{\"226\":1}}],[\"数据字段多\",{\"1\":{\"226\":1}}],[\"数据保证\",{\"1\":{\"66\":1}}],[\"数据用空格隔开\",{\"1\":{\"51\":2}}],[\"数据范围较大时\",{\"1\":{\"86\":1}}],[\"数据范围\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"66\":1,\"68\":1,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"86\":1,\"92\":1}}],[\"数据库已经无法实现这样复杂的\",{\"1\":{\"241\":1}}],[\"数据库与缓存均是双机房独立部署的\",{\"1\":{\"235\":1}}],[\"数据库更新后\",{\"1\":{\"232\":1}}],[\"数据库设计\",{\"0\":{\"231\":1}}],[\"数据库中间件\",{\"1\":{\"14\":1}}],[\"数据库之间\",{\"1\":{\"14\":1}}],[\"数据库\",{\"0\":{\"11\":1},\"1\":{\"7\":1,\"258\":1}}],[\"数据结构\",{\"0\":{\"189\":1},\"1\":{\"2\":1},\"2\":{\"27\":1,\"63\":1,\"212\":1,\"272\":1,\"278\":1,\"284\":1,\"296\":1,\"302\":1,\"321\":1,\"327\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
