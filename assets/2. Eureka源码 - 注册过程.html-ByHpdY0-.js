import{_ as i,c as s,o as a,e}from"./app-Da3TD5uR.js";const n={},t=e(`<h1 id="_2-领导-叕-让我研究-eureka-源码-注册过程" tabindex="-1"><a class="header-anchor" href="#_2-领导-叕-让我研究-eureka-源码-注册过程"><span>2. 领导“叕”让我研究 Eureka 源码：注册过程</span></a></h1><blockquote><p>转载自<strong>悟空聊架构</strong>，原文链接：<a href="https://mp.weixin.qq.com/s?__biz=MzAwMjI0ODk0NA==&amp;mid=2451959433&amp;idx=1&amp;sn=469d9bcd1ad1b43cf2f8f59c98a7d328&amp;chksm=8d1c1716ba6b9e0015848c3dbcab570c792337b13935ebc3adea225afc00619ef4ce0e55613a&amp;cur_album_id=2083392961806925826&amp;scene=189#wechat_redirect" target="_blank" rel="noopener noreferrer">领导“叕”让我研究 Eureka 源码：注册过程</a></p></blockquote><p>这次我们来分析<strong>客户端</strong>是如何注册的。</p><p>Eureka Client 就是客户端，可以是 Eureka Server 自身，也可以是要注册的服务实例，比如订单服务、商品服务等。</p><p>后续讲到 <code>@EnableEurekaClient</code> 注解时，其实是将当前 Application 当作一个 eureka client，注册到 eureka 服务上。</p><p>那么 Eureka Client 是如何注册的呢？</p><p>我们可以通过 Eureka 源码提供的示例类 <code>ExampleEurekaClient</code> 来看下 Eureka Client 的构造和注册过程。</p><p>首先从 <code>main</code> 方法方法看起，但是只看 <code>main</code> 表面，看不出来注册的代码在哪，那我们就来研究下底层的源码。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] args) throws UnknownHostException {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    injectEurekaConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ExampleEurekaClient</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sampleClient </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ExampleEurekaClient</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // create the client</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ApplicationInfoManager</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> applicationInfoManager </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> initializeApplicationInfoManager</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyDataCenterInstanceConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    EurekaClient</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> client </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> initializeEurekaClient</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(applicationInfoManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DefaultEurekaClientConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // shutdown the client</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    eurekaClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shutdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们来一步一步分析 <code>main</code> 里面做了什么事情。</p><p>先放一张时序图，下文会逐步讲解。</p><figure><img src="https://cloud.braumace.cn/f/eL3T5/2_1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、初始化配置" tabindex="-1"><a class="header-anchor" href="#一、初始化配置"><span>一、初始化配置</span></a></h2><h3 id="_1-1-初始化变量" tabindex="-1"><a class="header-anchor" href="#_1-1-初始化变量"><span>1.1 初始化变量</span></a></h3><p><code>injectEurekaConfiguration()</code> 方法初始化了 Eureka 的一些变量，比如端口号、当前服务的访问路径、是否需要抓取注册表信息等等。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> injectEurekaConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() throws UnknownHostException {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> myHostName </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> InetAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getLocalHost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getHostName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> myServiceUrl </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;http://&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> myHostName </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;:8080/v2/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;eureka.name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;eureka&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;eureka.port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;8080&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-获取配置文件配置" tabindex="-1"><a class="header-anchor" href="#_1-2-获取配置文件配置"><span>1.2 获取配置文件配置</span></a></h3><p>在这一行代码中，将配置文件 eureka-client.properties 中的配置读取后，放到了 EurekaInstanceConfig 中。这个 EurekaInstanceConfig 是用来初始化 applicationInfoManager 信息管理器的。</p><p>看下面代码，创建了一个 <code>MyDataCenterInstanceConfig</code>，其实就是创建了 <code>EurekaInstanceConfig</code>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyDataCenterInstanceConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那 <code>MyDataCenterInstanceConfig</code> 和 <code>EurekaInstanceConfig</code> 是什么关系呢？</p><figure><img src="https://cloud.braumace.cn/f/V2XcN/2_2.png" alt="InstanceConfig 类图" tabindex="0" loading="lazy"><figcaption>InstanceConfig 类图</figcaption></figure><p>从类图关系中可以看到 <code>MyDataCenterInstanceConfig</code> 继承 <code>PropertiesInstanceConfig</code> 类，实现了 <code>EurekaInstanceConfig</code> 接口。这种接口之前专门讲过，通过接口来获取配置信息，类似这种方法 <code>getXX()</code>。</p><p>然后在 <code>PropertiesInstanceConfig</code> 类的<strong>构造函数</strong>调用了一个工具类，读取了配置文件 eureka-client.properties 中的值。<strong>这个隐藏的有点深啊！</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Archaius1Utils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">initConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CommonConstants</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CONFIG_FILE_NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_1-3-初始化实例信息" tabindex="-1"><a class="header-anchor" href="#_1-3-初始化实例信息"><span>1.3 初始化实例信息</span></a></h3><p>主要就是构造出 instanceInfo 实例信息。这个里面的信息包含了第一步初始化变量中的配置信息。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InstanceInfo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> instanceInfo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> EurekaConfigBasedInstanceInfoProvider</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(instanceConfig)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://cloud.braumace.cn/f/m2KT1/2_3.png" alt="intanceInfo 信息" tabindex="0" loading="lazy"><figcaption>intanceInfo 信息</figcaption></figure><h3 id="_1-4-初始化实例信息管理器" tabindex="-1"><a class="header-anchor" href="#_1-4-初始化实例信息管理器"><span>1.4 初始化实例信息管理器</span></a></h3><p>就是将 instanceConfig 和 instanceInfo 交给实例信息管理器来管理。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">applicationInfoManager </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ApplicationInfoManager</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(instanceConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> instanceInfo)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="二、构造-eurekaclient" tabindex="-1"><a class="header-anchor" href="#二、构造-eurekaclient"><span>二、构造 EurekaClient</span></a></h2><h3 id="_2-1-构造流程" tabindex="-1"><a class="header-anchor" href="#_2-1-构造流程"><span>2.1 构造流程</span></a></h3><p>构造 eurekaClient 的代码</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">eurekaClient </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DiscoveryClient</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(applicationInfoManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> clientConfig)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>DiscoveryClient</code> 是 <code>EurekaClient</code> 的子类，构造 DiscoveryClient 做了以下几件事：</p><figure><img src="https://cloud.braumace.cn/f/YQOu8/2_4.png" alt="构造 EurekaClient 流程" tabindex="0" loading="lazy"><figcaption>构造 EurekaClient 流程</figcaption></figure><ul><li><p>加载配置文件</p></li><li><p>初始化网络传输组件</p></li><li><p>将服务实例配置、配置文件配置、网络传输组件都赋值给了 DiscoveryClient。</p></li><li><p>初始化两个线程，一个用来心跳检测，一个用来刷新缓存。</p></li><li><p>初始化网络通信组件 EurekaTransport</p></li><li><p>尝试抓取注册表信息，如果没有抓取到，则从备用的注册表中获取。</p></li><li><p>初始化调度任务的方法中，启动了定时调度任务：心跳检测 heartbeat、缓存刷新 cacheRefresh。（这两个功能在后续篇章中都会讲到，请持续关注）</p></li><li><p>初始化调度任务的方法中，初始化了一个 InstanceInfoReplicator，用来向 eureka server 注册的。</p></li><li><p>初始化调度任务的方法中，初始化了一个状态变更的监听器 StatusChangeListener，这个里面也有注册的逻辑。</p></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在初始化调度任务的方法，会根据是否设置了抓取注册表信息和是否注册将 eureka-client 注册到 eureka-server 来执行上面的初始化操作。</p></div><p>如下代码所示：</p><figure><img src="https://cloud.braumace.cn/f/aVQIo/2_5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、eureka-client-注册" tabindex="-1"><a class="header-anchor" href="#三、eureka-client-注册"><span>三、Eureka Client 注册</span></a></h2><h3 id="_3-1-注册流程" tabindex="-1"><a class="header-anchor" href="#_3-1-注册流程"><span>3.1 注册流程</span></a></h3><p><strong>Eureka Client 向 Server 注册的代码隐藏的比较深，很难找到，不是直接调用注册的方法，而是通过一个后台线程去做的</strong>，而且调用注册方法的类的名字起得也有争议，叫做 <code>InstanceInfoReplicator</code>，“Replicator” 是拷贝副本的意思，而注册其实不是拷贝副本，而是将新的注册信息发送到 eureka server 上去的，所以这个类的名字起得不太好，这也是容易造成找不到注册代码的一个原因。</p><p>下面来看下 eureka client 是怎么向 eureka server 注册的。</p><p>（1）注册是通过 <code>InstanceInfoReplicator</code> 类来注册的。它是在构造 DiscoveryClient 时创建出来的。</p><p>启动了一个延时 40 s 的线程，</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">instanceInfoReplicator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">40</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 40 s后执行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（2）然后将一个标志位设置为 true，用来标记是否注册过了。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">instanceInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setIsDirty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（3）然后调用注册的方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">discoveryClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>register() 里面的核心代码就是</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">httpResponse </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> eurekaTransport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">registrationClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(instanceInfo);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>返回的 <code>httpResponse</code> 大家可以想到这是一个 HTTP 请求，eureka client 注册时就是发送的 http 请求。</p><p><strong>eurekaTransport</strong>：底层的传输组件，在初始化 DiscoveryClient 时初始化出来的。</p><p><strong>registrationClient</strong>：它是一个抽象类，在初始化 DiscoveryClient  时，通过调用 <code>scheduleServerEndpointTask()</code> 初始化了专门用于注册的 registrationClient，这里就是 SessionedEurekaHttpClient。</p><p><strong>instanceInfo</strong>：就是要发送给 eureka server 的当前实例信息，用来注册的信息。</p><p>（4）发送 post 注册请求</p><p>执行 <code>register()</code> 方法，发送注册请求的类是 <code>AbstractJerseyEurekaHttpClient</code>，这个类在工程 eureka-client-jersey2 里面，用到的是 Jersey 框架，国内用这个框架的不多，就是一个支持 restful 的 Java 框架，不用深究，下篇还会讲到这一块。请求的 url 为</p><blockquote><p>http://localhost:8080/v2/apps/EUREKA</p></blockquote><figure><img src="https://cloud.braumace.cn/f/GQrTV/2_6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注册的方法里面发送了 post 请求。至此，Client 就注册到 Server 那边了。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">response </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> resourceBuilder</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">accept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MediaType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">APPLICATION_JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">acceptEncoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;gzip&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">post</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">json</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(info));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>那么 Server 是如何将注册信息保存到自己注册表里面的呢？</strong> 下篇我们再来讲解。</p><h2 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结"><span>四、总结</span></a></h2><p>Eureka Client 向 Eureka Server 注册的过程：</p><p>（1）Eureka Client 初始化了一个 DiscoveryClient，抓取注册表，执行调度任务。</p><p>（2）InstanceInfoReplicator 对象启动了一个延迟 40 s 的后台线程，执行注册。</p><p>（3）然后使用 AbstractJersey2EurekaHttpClient 发送 post 请求，将 instanceInfo 实例信息发送给 Eureka Server。</p><p>时序图如下：</p><figure><img src="https://cloud.braumace.cn/f/eL3T5/2_1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="留个问题" tabindex="-1"><a class="header-anchor" href="#留个问题"><span>留个问题</span></a></h3><p>我们使用 Eureka 时，Service 启动后，Eureka 很快就发现了 Service 的存在，如下图所示的控制台界面：</p><figure><img src="https://cloud.braumace.cn/f/8XVI3/2_7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>并不需要等待 40 s 才能注册到 Eureka，那这又是为什么呢？</p><p>好了，本篇接近尾声，下一篇，我们来看下 Eureka Server 是如何将 Eureka Client 发送过来的注册信息保存起来的。</p>`,78),l=[t];function h(r,p){return a(),s("div",null,l)}const d=i(n,[["render",h],["__file","2. Eureka源码 - 注册过程.html.vue"]]),c=JSON.parse('{"path":"/framework/spring-cloud/%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/2.%20Eureka%E6%BA%90%E7%A0%81%20-%20%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B.html","title":"2. 领导“叕”让我研究 Eureka 源码：注册过程","lang":"zh-CN","frontmatter":{"date":"2024-05-16T00:00:00.000Z","category":["常用框架"],"tag":["SpringCloud"],"reprint":true,"description":"2. 领导“叕”让我研究 Eureka 源码：注册过程 转载自悟空聊架构，原文链接：领导“叕”让我研究 Eureka 源码：注册过程 这次我们来分析客户端是如何注册的。 Eureka Client 就是客户端，可以是 Eureka Server 自身，也可以是要注册的服务实例，比如订单服务、商品服务等。 后续讲到 @EnableEurekaClient...","head":[["meta",{"property":"og:url","content":"https://blog.braumace.cn/ByteLighting/framework/spring-cloud/%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/2.%20Eureka%E6%BA%90%E7%A0%81%20-%20%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"ByteLighting"}],["meta",{"property":"og:title","content":"2. 领导“叕”让我研究 Eureka 源码：注册过程"}],["meta",{"property":"og:description","content":"2. 领导“叕”让我研究 Eureka 源码：注册过程 转载自悟空聊架构，原文链接：领导“叕”让我研究 Eureka 源码：注册过程 这次我们来分析客户端是如何注册的。 Eureka Client 就是客户端，可以是 Eureka Server 自身，也可以是要注册的服务实例，比如订单服务、商品服务等。 后续讲到 @EnableEurekaClient..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cloud.braumace.cn/f/eL3T5/2_1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-23T07:58:59.000Z"}],["meta",{"property":"article:author","content":"BraumAce"}],["meta",{"property":"article:tag","content":"SpringCloud"}],["meta",{"property":"article:published_time","content":"2024-05-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-23T07:58:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. 领导“叕”让我研究 Eureka 源码：注册过程\\",\\"image\\":[\\"https://cloud.braumace.cn/f/eL3T5/2_1.png\\",\\"https://cloud.braumace.cn/f/V2XcN/2_2.png\\",\\"https://cloud.braumace.cn/f/m2KT1/2_3.png\\",\\"https://cloud.braumace.cn/f/YQOu8/2_4.png\\",\\"https://cloud.braumace.cn/f/aVQIo/2_5.png\\",\\"https://cloud.braumace.cn/f/GQrTV/2_6.png\\",\\"https://cloud.braumace.cn/f/eL3T5/2_1.png\\",\\"https://cloud.braumace.cn/f/8XVI3/2_7.png\\"],\\"datePublished\\":\\"2024-05-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-23T07:58:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BraumAce\\",\\"url\\":\\"https://blog.braumace.cn/article\\"}]}"]]},"headers":[{"level":2,"title":"一、初始化配置","slug":"一、初始化配置","link":"#一、初始化配置","children":[{"level":3,"title":"1.1 初始化变量","slug":"_1-1-初始化变量","link":"#_1-1-初始化变量","children":[]},{"level":3,"title":"1.2 获取配置文件配置","slug":"_1-2-获取配置文件配置","link":"#_1-2-获取配置文件配置","children":[]},{"level":3,"title":"1.3 初始化实例信息","slug":"_1-3-初始化实例信息","link":"#_1-3-初始化实例信息","children":[]},{"level":3,"title":"1.4 初始化实例信息管理器","slug":"_1-4-初始化实例信息管理器","link":"#_1-4-初始化实例信息管理器","children":[]}]},{"level":2,"title":"二、构造 EurekaClient","slug":"二、构造-eurekaclient","link":"#二、构造-eurekaclient","children":[{"level":3,"title":"2.1 构造流程","slug":"_2-1-构造流程","link":"#_2-1-构造流程","children":[]}]},{"level":2,"title":"三、Eureka Client 注册","slug":"三、eureka-client-注册","link":"#三、eureka-client-注册","children":[{"level":3,"title":"3.1 注册流程","slug":"_3-1-注册流程","link":"#_3-1-注册流程","children":[]}]},{"level":2,"title":"四、总结","slug":"四、总结","link":"#四、总结","children":[{"level":3,"title":"留个问题","slug":"留个问题","link":"#留个问题","children":[]}]}],"git":{"createdTime":1724399939000,"updatedTime":1724399939000,"contributors":[{"name":"BraumAce","email":"1693717911@qq.com","commits":1}]},"readingTime":{"minutes":5.54,"words":1663},"filePathRelative":"framework/spring-cloud/源码剖析/2. Eureka源码 - 注册过程.md","localizedDate":"2024年5月16日","excerpt":"\\n<blockquote>\\n<p>转载自<strong>悟空聊架构</strong>，原文链接：<a href=\\"https://mp.weixin.qq.com/s?__biz=MzAwMjI0ODk0NA==&amp;mid=2451959433&amp;idx=1&amp;sn=469d9bcd1ad1b43cf2f8f59c98a7d328&amp;chksm=8d1c1716ba6b9e0015848c3dbcab570c792337b13935ebc3adea225afc00619ef4ce0e55613a&amp;cur_album_id=2083392961806925826&amp;scene=189#wechat_redirect\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">领导“叕”让我研究 Eureka 源码：注册过程</a></p>\\n</blockquote>","autoDesc":true}');export{d as comp,c as data};
