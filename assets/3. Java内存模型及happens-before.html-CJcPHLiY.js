import{_ as s,c as n,a as e,b as i,d as t,o as p}from"./app-BMoLMsUF.js";const l={};function o(r,a){return p(),n("div",null,[a[0]||(a[0]=e("h1",{id:"java-内存模型及-happens-before",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#java-内存模型及-happens-before"},[e("span",null,"Java 内存模型及 happens-before")])],-1)),i(" more "),a[1]||(a[1]=t(`<h2 id="_1-jmm-介绍" tabindex="-1"><a class="header-anchor" href="#_1-jmm-介绍"><span>1. JMM 介绍</span></a></h2><div class="hint-container info"><p class="hint-container-title">什么是线程安全？</p><p>关于线程安全问题，《深入理解Java虚拟机》中给出的定义如下：</p><p>当多个线程访问同一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替运行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获取正确的结果，那这个对象就是线程安全的。</p></div><p>出现线程安全的问题一般是因为<strong>主内存和工作内存数据不一致性</strong>和<strong>重排序</strong>导致的，而解决线程安全的问题最重要的就是理解这两种问题是怎么来的，其核心在于理解 java 内存模型（JMM）。</p><p>在多线程条件下，多个线程肯定会相互协作完成一件事情，一般来说就会涉及到<strong>多个线程间相互通信告知彼此的状态以及当前的执行结果</strong>等，另外，为了性能优化，还会涉及到<strong>编译器指令重排序和处理器指令重排序</strong>。</p><h2 id="_2-线程通信" tabindex="-1"><a class="header-anchor" href="#_2-线程通信"><span>2. 线程通信</span></a></h2><p>线程间协作通信可以类比人与人之间的协作的方式。</p><p>在现实生活中，网上有个流行语 “你妈喊你回家吃饭了”，就以这个生活场景为例，小明在外面玩耍，小明妈妈在家里做饭，做晚饭后准备叫小明回家吃饭，那么就存在两种方式：</p><p>一种方式是：小明妈妈要去上班了十分紧急这个时候手机又没有电了，于是就在桌子上贴了一张纸条 “饭做好了，放在...”。小明回家后看到纸条如愿吃到妈妈做的饭菜，那么，如果将小明妈妈和小明作为两个线程，那么这张纸条就是这两个线程间通信的共享变量，通过读写共享变量实现两个线程间协作；</p><p>另一种方式是：妈妈的手机还有电，妈妈在赶去坐公交的路上给小明打了个电话，这种方式就是通知机制来完成协作。同样，可以引申到线程间通信机制。</p><p>通过上面的例子，大概有个了解。在并发编程中主要需要解决两个问题：</p><ol><li><strong>线程之间如何通信</strong>；</li><li><strong>线程之间如何完成同步</strong>（这里的线程指的是并发执行的活动实体）。</li></ol><p>通信是指线程之间以何种机制来交换信息，主要有两种：<strong>共享内存</strong>和<strong>消息传递</strong>。</p><p>java 内存模型是<strong>共享内存的并发模型</strong>，线程之间主要通过读-写共享变量来完成隐式通信。</p><div class="hint-container tip"><p class="hint-container-title">哪些是共享变量</p><p>在java程序中所有<strong>实例域，静态域和数组元素</strong>都是放在堆内存中（所有线程均可访问到，是可以共享的）；</p><p>而局部变量，方法定义参数和异常处理器参数不会在线程间共享。</p><p>共享数据会出现线程安全的问题，而非共享数据不会出现线程安全的问题。</p></div><h2 id="_3-jmm-抽象结构模型" tabindex="-1"><a class="header-anchor" href="#_3-jmm-抽象结构模型"><span>3. JMM 抽象结构模型</span></a></h2><p>我们知道 CPU 的处理速度和主存的读写速度不是一个量级的，为了平衡这种巨大的差距，每个 CPU 都会有缓存。因此，共享变量会先放在主存中，每个线程都有属于自己的工作内存，并且会把位于主存中的共享变量拷贝到自己的工作内存，之后的读写操作均使用位于工作内存的变量副本，并在某个时刻将工作内存的变量副本写回到主存中去。JMM 就从抽象层次定义了这种方式，并且 JMM 决定了一个线程对共享变量的写入何时对其他线程是可见的。</p><figure><img src="https://cloud.braumace.cn/f/oYaT2/3.1 JMM内存结构抽象结构示意图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上图为 JMM 抽象示意图，线程 A 和线程 B 之间要完成通信的话，要经历如下两步：</p><ol><li>线程 A 从主内存中将共享变量读入线程 A 的工作内存后并进行操作，之后将数据重新写回到主内存中</li><li>线程 B 从主存中读取最新的共享变量</li></ol><p>从横向上看，线程 A 和线程 B 就好像通过共享变量在进行隐式通信。</p><p>这其中有一个问题，如果线程 A 更新后数据并没有及时写回到主存，而此时线程 B 读到的是过期的数据，这就出现了 “<strong>脏读</strong>” 现象。针对这种情况，可以通过同步机制（控制不同线程间操作发生的相对顺序）来解决或者通过 <code>volatile</code> 关键字使得每次 <code>volatile</code> 变量都能够强制刷新到主存，从而对每个线程都是可见的。</p><h2 id="_4-重排序" tabindex="-1"><a class="header-anchor" href="#_4-重排序"><span>4. 重排序</span></a></h2><p>一个好的内存模型实际上会放松对处理器和编译器规则的束缚，也就是说软件技术和硬件技术都为同一个目标而进行奋斗：在不改变程序执行结果的前提下，尽可能提高并行度。JMM 对底层尽量减少约束，使其能够发挥自身优势。因此，在执行程序时，<strong>为了提高性能，编译器和处理器常常会对指令进行重排序</strong>。一般重排序可以分为如下三种：</p><figure><img src="https://cloud.braumace.cn/f/nEGIz/3.2 从源码到最终执行的指令序列的示意图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序</li><li>指令级并行的重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果<strong>不存在数据依赖性</strong>，处理器可以改变语句对应机器指令的执行顺序</li><li>内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行的。</li></ol><p>如图，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 属于编译器重排序，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> 统称为处理器重排序。这些重排序会导致线程安全的问题，一个很经典的例子就是 DCL 问题。</p><ul><li>针对<strong>编译器重排序</strong>，JMM 的编译器重排序规则会<strong>禁止一些特定类型的编译器重排序</strong>；</li><li>针对<strong>处理器重排序</strong>，编译器在生成指令序列的时候会通过<strong>插入内存屏障指令来禁止某些特殊的处理器重排序</strong>。</li></ul><p>那么什么情况下，不能进行重排序？比如数据依赖性。有如下代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> pi </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3.14</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //A</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //B</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> area </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> pi </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> r  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//C</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个计算圆面积的代码，由于 A，B 之间没有任何关系，对最终结果也不会存在关系，它们之间执行顺序可以重排序。因此可以执行顺序可以是 A-&gt;B-&gt;C 或者 B-&gt;A-&gt;C，执行最终结果都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3.14</mn></mrow><annotation encoding="application/x-tex">3.14</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3.14</span></span></span></span>，即 A 和 B 之间没有数据依赖性。具体的定义为：</p><p>**如果两个操作访问同一个变量，且这两个操作有一个为写操作，此时这两个操作就存在数据依赖性。**这里就存在三种情况：</p><ol><li>读后写；</li><li>写后写；</li><li>写后读。</li></ol><p>这三种操作都是存在数据依赖性的，如果重排序会对最终执行结果会存在影响。<strong>编译器和处理器在重排序时，会遵守数据依赖性，编译器和处理器不会改变存在数据依赖性关系的两个操作的执行顺序。</strong></p><p>另外，还有一个比较有意思的就是 <code>as-if-serial</code> 语义。</p><p><code>as-if-serial</code> 语义的意思是：不管怎么重排序（编译器和处理器为了提供并行度），（单线程）程序的执行结果不能被改变。编译器，<code>runtime</code> 和处理器都必须遵守 <code>as-if-serial</code> 语义。<code>as-if-serial</code> 语义把单线程程序保护了起来，遵守 <code>as-if-serial</code> 语义的编译器，<code>runtime</code> 和处理器共同为编写单线程程序的程序员创建了一个幻觉：单线程程序是按程序的顺序来执行的。比如上面计算圆面积的代码，在单线程中，会让人感觉代码是一行一行顺序执行上，实际上 A，B 两行不存在数据依赖性可能会进行重排序，即 A，B 不是顺序执行的。<code>as-if-serial</code> 语义使程序员不必担心单线程中重排序的问题干扰他们，也无需担心内存可见性问题。</p><h2 id="_5-happens-before-规则" tabindex="-1"><a class="header-anchor" href="#_5-happens-before-规则"><span>5. happens-before 规则</span></a></h2><p>上面的重排序原则，一会是编译器重排序一会是处理器重排序，如果让程序员再去了解这些底层的实现以及具体规则，那么程序员的负担就太重了，严重影响了并发编程的效率。因此，JMM 为程序员在上层提供了六条规则，这样我们就可以根据规则去推论跨线程的内存可见性问题，而不用再去理解底层重排序的规则。下面以两个方面来说。</p><h3 id="_5-1-happens-before-定义" tabindex="-1"><a class="header-anchor" href="#_5-1-happens-before-定义"><span>5.1 happens-before 定义</span></a></h3><p>happens-before 的概念最初由 Leslie Lamport 提出。JSR-133 使用 happens-before 的概念来指定两个操作之间的执行顺序。由于这两个操作可以在一个线程之内，也可以是在不同线程之间。因此，JMM 可以通过 happens-before 关系向程序员提供跨线程的内存可见性保证（如果 A 线程的写操作 <code>a</code> 与 B 线程的读操作 <code>b</code> 之间存在 happens-before 关系，尽管 <code>a</code> 操作和 <code>b</code> 操作在不同的线程中执行，但 JMM 向程序员保证 <code>a</code> 操作将对 <code>b</code> 操作可见）。具体的定义为：</p><ol><li>如果一个操作 happens-before 另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。</li><li>两个操作之间存在 happens-before 关系，并不意味着 Java 平台的具体实现必须要按照 happens-before 关系指定的顺序来执行。如果重排序之后的执行结果，与按 happens-before 关系来执行的结果一致，那么这种重排序并不非法（也就是说，JMM 允许这种重排序）。</li></ol><p>上面的第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 点是 <strong>JMM 对程序员的承诺</strong>。从程序员的角度来说，可以这样理解 happens-before 关系：如果A happens-before B，那么 Java 内存模型将向程序员保证 —— A 操作的结果将对 B 可见，且 A 的执行顺序排在 B 之前。注意，这只是 Java 内存模型向程序员做出的保证！</p><p>上面的第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> 点是 <strong>JMM 对编译器和处理器重排序的约束原则</strong>。正如前面所言，JMM 其实是在遵循一个基本原则：只要不改变程序的执行结果（指的是单线程程序和正确同步的多线程程序），编译器和处理器怎么优化都行。JMM 这么做的原因是：程序员对于这两个操作是否真的被重排序并不关心，程序员关心的是程序执行时的语义不能被改变（即执行结果不能被改变）。因此，happens-before 关系本质上和 as-if-serial 语义是一回事。</p><div class="hint-container info"><p class="hint-container-title">as-if-serial VS happens-before</p><ol><li>as-if-serial 语义保证单线程内程序的执行结果不被改变，happens-before 关系保证正确同步的多线程程序的执行结果不被改变。</li><li>as-if-serial 语义给编写单线程程序的程序员创造了一个幻境：单线程程序是按程序的顺序来执行的。happens-before 关系给编写正确同步的多线程程序的程序员创造了一个幻境：正确同步的多线程程序是按 happens-before 指定的顺序来执行的。</li><li>as-if-serial 语义和 happens-before 这么做的目的，都是为了在不改变程序执行结果的前提下，尽可能地提高程序执行的并行度。</li></ol></div><h3 id="_5-2-具体规则" tabindex="-1"><a class="header-anchor" href="#_5-2-具体规则"><span>5.2 具体规则</span></a></h3><p>具体的一共有六项规则：</p><ol><li>程序顺序规则：一个线程中的每个操作，happens-before 于该线程中的任意后续操作。</li><li>监视器锁规则：对一个锁的解锁，happens-before 于随后对这个锁的加锁。</li><li>volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。</li><li>传递性：如果 A happens-before B，且 B happens-before C，那么 A happens-before C。</li><li><code>start()</code> 规则：如果线程 A 执行操作 <code>ThreadB.start()</code>（启动线程B），那么 A 线程的 <code>ThreadB.start()</code> 操作 happens-before 于线程 B 中的任意操作。</li><li><code>join()</code> 规则：如果线程 A 执行操作 <code>ThreadB.join()</code> 并成功返回，那么线程 B 中的任意操作 happens-before 于线程 A 从 <code>ThreadB.join()</code> 操作成功返回。</li><li>程序中断规则：对线程 <code>interrupted()</code> 方法的调用先行于被中断线程的代码检测到中断时间的发生。</li><li>对象 finalize 规则：一个对象的初始化完成（构造函数执行结束）先行于发生它的 <code>finalize()</code> 方法的开始。</li></ol><p>下面以一个具体的例子来讲下如何使用这些规则进行推论：</p><p>依旧以上面计算圆面积的进行描述。利用程序顺序规则（规则1）存在三个 happens-before 关系：</p><ol><li>A happens-before B；</li><li>B happens-before C；</li><li>A happens-before C。</li></ol><p>这里的第三个关系是利用传递性进行推论的。A happens-before B，定义 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 要求 A 执行结果对 B 可见，并且 A 操作的执行顺序在 B 操作之前，但与此同时利用定义中的第二条，A，B 操作彼此不存在数据依赖性，两个操作的执行顺序对最终结果都不会产生影响，在不改变最终结果的前提下，允许 A，B 两个操作重排序，即 happens-before 关系并不代表了最终的执行顺序。</p><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span>6. 总结</span></a></h2><p>我们从三个方面做个总结。</p><ol><li>如果让我们设计 JMM 应该从哪些方面考虑，也就是说 JMM 承担哪些功能</li><li>happens-before 与 JMM 的关系</li><li>由于 JMM，多线程情况下可能会出现哪些问题？</li></ol><h3 id="_6-1-jmm-的设计" tabindex="-1"><a class="header-anchor" href="#_6-1-jmm-的设计"><span>6.1 JMM 的设计</span></a></h3><figure><img src="https://cloud.braumace.cn/f/dwzT0/3.3 JMM层级图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>JMM 是语言级的内存模型，在我的理解中 JMM 处于中间层，包含了两个方面：<br> （1）内存模型；（2）重排序以及 happens-before 规则。</p><p>同时，为了禁止特定类型的重排序会对编译器和处理器指令序列加以控制。而上层会有基于 JMM 的关键字和 J.U.C 包下的一些具体类用来方便程序员能够迅速高效率的进行并发编程。站在 JMM 设计者的角度，在设计 JMM 时需要考虑两个关键因素:</p><ol><li><strong>程序员对内存模型的使用</strong>。程序员希望内存模型易于理解、易于编程。程序员希望基于一个强内存模型来编写代码。</li><li><strong>编译器和处理器对内存模型的实现</strong>。编译器和处理器希望内存模型对它们的束缚越少越好，这样它们就可以做尽可能多的优化来提高性能。编译器和处理器希望实现一个弱内存模型。</li></ol><p>另外还要一个特别有意思的事情就是关于重排序问题，更简单的说，重排序可以分为两类：</p><ol><li>会改变程序执行结果的重排序。</li><li>不会改变程序执行结果的重排序。</li></ol><p>JMM 对这两种不同性质的重排序，采取了不同的策略，如下。</p><ol><li>对于<strong>会</strong>改变程序执行结果的重排序，JMM 要求编译器和处理器必须禁止这种重排序。</li><li>对于<strong>不会</strong>改变程序执行结果的重排序，JMM 对编译器和处理器不做要求（JMM 允许这种重排序）</li></ol><p>JMM的设计图为：</p><figure><img src="https://cloud.braumace.cn/f/pEgFB/3.4 JMM设计示意图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上图中可以看出：</p><ol><li><strong>JMM 向程序员提供的 happens-before 规则能满足程序员的需求。</strong> JMM 的 happens-before 规则不但简单易懂，而且也向程序员提供了足够强的内存可见性保证（有些内存可见性保证其实并不一定真实存在，比如上面的 A happens-before B）。</li><li><strong>JMM 对编译器和处理器的束缚已经尽可能少。</strong> 从上面的分析可以看出，JMM 其实是在遵循一个基本原则：只要不改变程序的执行结果（指的是单线程程序和正确同步的多线程程序），编译器和处理器怎么优化都行。例如，如果编译器经过细致的分析后，认定一个锁只会被单个线程访问，那么这个锁可以被消除。再如，如果编译器经过细致的分析后，认定一个 volatile 变量只会被单个线程访问，那么编译器可以把这个 volatile 变量当作一个普通变量来对待。这些优化既不会改变程序的执行结果，又能提高程序的执行效率。</li></ol><h3 id="_6-2-happens-before-与-jmm-的关系" tabindex="-1"><a class="header-anchor" href="#_6-2-happens-before-与-jmm-的关系"><span>6.2 happens-before 与 JMM 的关系</span></a></h3><figure><img src="https://cloud.braumace.cn/f/ka5F5/3.5 happens-before与JMM的关系.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一个 happens-before 规则对应于一个或多个编译器和处理器重排序规则。对于 Java 程序员来说，happens-before 规则简单易懂，它避免 Java 程序员为了理解 JMM 提供的内存可见性保证而去学习复杂的重排序规则以及这些规则的具体实现方法。</p><h3 id="_6-3-今后可能需要关注的问题" tabindex="-1"><a class="header-anchor" href="#_6-3-今后可能需要关注的问题"><span>6.3 今后可能需要关注的问题</span></a></h3><p>从上面内存抽象结构来说，可能出在数据 “脏读” 的现象，这就是<strong>数据可见性</strong>的问题，另外，重排序在多线程中不注意的话也容易存在一些问题，比如一个很经典的问题就是 DCL（双重检验锁），这就是需要<strong>禁止重排序</strong>，另外，在多线程下原子操作例如 <code>i++</code> 不加以注意的也容易出现线程安全的问题。但总的来说，在多线程开发时需要从<strong>原子性，有序性，可见性</strong>三个方面进行考虑。</p>`,71))])}const c=s(l,[["render",o],["__file","3. Java内存模型及happens-before.html.vue"]]),d=JSON.parse('{"path":"/computer/language/java/JUC%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3.%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%8F%8Ahappens-before.html","title":"Java 内存模型及 happens-before","lang":"zh-CN","frontmatter":{"category":["并发编程"],"tag":["JUC"],"head":[["meta",{"property":"og:url","content":"https://blog.braumace.cn/computer/language/java/JUC%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3.%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%8F%8Ahappens-before.html"}],["meta",{"property":"og:site_name","content":"ByteLighting"}],["meta",{"property":"og:title","content":"Java 内存模型及 happens-before"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cloud.braumace.cn/f/oYaT2/3.1%20JMM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E6%8A%BD%E8%B1%A1%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-05T12:57:31.000Z"}],["meta",{"property":"article:tag","content":"JUC"}],["meta",{"property":"article:modified_time","content":"2024-10-05T12:57:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 内存模型及 happens-before\\",\\"image\\":[\\"https://cloud.braumace.cn/f/oYaT2/3.1%20JMM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E6%8A%BD%E8%B1%A1%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png\\",\\"https://cloud.braumace.cn/f/nEGIz/3.2%20%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%B0%E6%9C%80%E7%BB%88%E6%89%A7%E8%A1%8C%E7%9A%84%E6%8C%87%E4%BB%A4%E5%BA%8F%E5%88%97%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png\\",\\"https://cloud.braumace.cn/f/dwzT0/3.3%20JMM%E5%B1%82%E7%BA%A7%E5%9B%BE.png\\",\\"https://cloud.braumace.cn/f/pEgFB/3.4%20JMM%E8%AE%BE%E8%AE%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.png\\",\\"https://cloud.braumace.cn/f/ka5F5/3.5%20happens-before%E4%B8%8EJMM%E7%9A%84%E5%85%B3%E7%B3%BB.png\\"],\\"dateModified\\":\\"2024-10-05T12:57:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BraumAce\\",\\"url\\":\\"https://blog.braumace.cn/article\\"}]}"]]},"headers":[{"level":2,"title":"1. JMM 介绍","slug":"_1-jmm-介绍","link":"#_1-jmm-介绍","children":[]},{"level":2,"title":"2. 线程通信","slug":"_2-线程通信","link":"#_2-线程通信","children":[]},{"level":2,"title":"3. JMM 抽象结构模型","slug":"_3-jmm-抽象结构模型","link":"#_3-jmm-抽象结构模型","children":[]},{"level":2,"title":"4. 重排序","slug":"_4-重排序","link":"#_4-重排序","children":[]},{"level":2,"title":"5. happens-before 规则","slug":"_5-happens-before-规则","link":"#_5-happens-before-规则","children":[{"level":3,"title":"5.1 happens-before 定义","slug":"_5-1-happens-before-定义","link":"#_5-1-happens-before-定义","children":[]},{"level":3,"title":"5.2 具体规则","slug":"_5-2-具体规则","link":"#_5-2-具体规则","children":[]}]},{"level":2,"title":"6. 总结","slug":"_6-总结","link":"#_6-总结","children":[{"level":3,"title":"6.1 JMM 的设计","slug":"_6-1-jmm-的设计","link":"#_6-1-jmm-的设计","children":[]},{"level":3,"title":"6.2 happens-before 与 JMM 的关系","slug":"_6-2-happens-before-与-jmm-的关系","link":"#_6-2-happens-before-与-jmm-的关系","children":[]},{"level":3,"title":"6.3 今后可能需要关注的问题","slug":"_6-3-今后可能需要关注的问题","link":"#_6-3-今后可能需要关注的问题","children":[]}]}],"git":{"createdTime":1726999122000,"updatedTime":1728133051000,"contributors":[{"name":"BraumAce","email":"1693717911@qq.com","commits":2}]},"readingTime":{"minutes":16.16,"words":4848},"filePathRelative":"computer/language/java/JUC 并发编程/3. Java内存模型及happens-before.md","localizedDate":"2024年9月22日","excerpt":"\\n"}');export{c as comp,d as data};
