import{_ as a,c as n,a as e,b as s,d as t,o as r}from"./app-DLVwBMKT.js";const o={};function l(p,i){return r(),n("div",null,[i[0]||(i[0]=e("h1",{id:"深入理解-ioc",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#深入理解-ioc"},[e("span",null,"深入理解 IoC")])],-1)),s(" more "),i[1]||(i[1]=t(`<h2 id="_1-ioc-理论" tabindex="-1"><a class="header-anchor" href="#_1-ioc-理论"><span>1. IoC 理论</span></a></h2><p>IoC 全称为 Inversion of Control，翻译为 “控制反转”，它还有一个别名为 DI（Dependency Injection），即依赖注入。</p><p>如何理解 “控制反转” 呢？关键在于我们需要回答如下四个问题：</p><ol><li>谁控制谁</li><li>控制什么</li><li>为何是反转</li><li>哪些方面反转了</li></ol><p>在回答这四个问题之前，我们先看 IoC 的定义：</p><div class="hint-container info"><p class="hint-container-title">IoC</p><p>所谓 IoC ，就是由 Spring IoC 容器来负责对象的生命周期和对象之间的关系。</p></div><p>在没有引入 IoC 的时候，被注入的对象直接依赖于被依赖的对象，有了 IoC 后，两者及其他们的关系都是通过 Ioc Service Provider 来统一管理维护的。被注入的对象需要什么，直接跟 IoC Service Provider 打声招呼，后者就会把相应的被依赖对象注入到被注入的对象中，从而达到 IoC Service Provider 为被注入对象服务的目的。所以 IoC 就是这么简单！原来是需要什么东西自己去拿，现在是需要什么东西让别人（IoC Service Provider）送过来。</p><p>流程如下：</p><figure><img src="https://cloud.braumace.cn/f/pJEFB/1.1 IoC过程.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在在看上面那四个问题，答案就显得非常明显了:</p><ol><li><strong>谁控制谁</strong>：在传统的开发模式下，我们都是采用直接 new 一个对象的方式来创建对象，也就是说你依赖的对象直接由你自己控制，但是有了 IoC 容器后，则直接由 IoC 容器来控制。所以“谁控制谁”，当然是 IoC 容器控制对象</li><li><strong>控制什么</strong>：控制对象。</li><li><strong>为何是反转</strong>：没有 IoC 的时候我们都是在自己对象中主动去创建被依赖的对象，这是正转。但是有了 IoC 后，所依赖的对象直接由 IoC 容器创建后注入到被注入的对象中，依赖的对象由原来的主动获取变成被动接受，所以是反转。</li><li><strong>哪些方面反转了</strong>：所依赖对象的获取被反转了。</li></ol><h2 id="_2-bromon-的-blog-上对-ioc-与-di-浅显易懂的讲解" tabindex="-1"><a class="header-anchor" href="#_2-bromon-的-blog-上对-ioc-与-di-浅显易懂的讲解"><span>2. Bromon 的 blog 上对 IoC 与 DI 浅显易懂的讲解</span></a></h2><h3 id="_2-1-ioc" tabindex="-1"><a class="header-anchor" href="#_2-1-ioc"><span>2.1 IoC</span></a></h3><p>首先想说说 IoC（Inversion of Control，控制反转）。这是 spring 的核心，贯穿始终。</p><p><strong>所谓 IoC，对于 spring 框架来说，就是由 spring 来负责控制对象的生命周期和对象间的关系。</strong></p><p>这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己 new 一个，或者从 JNDI 中查询一个），使用完之后还要将对象销毁（比如 Connection 等），对象始终会和其他的接口或类藕合起来。</p><p>那么 IoC 是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，<strong>所有的类都会在 spring 容器中登记，告诉 spring 你是个什么东西，你需要什么东西，然后 spring 会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。</strong></p><p><strong>所有的类的创建、销毁都由 spring 来控制，也就是说控制对象生存周期的不再是引用它的对象，而是 spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被 spring 控制，所以这叫控制反转。</strong></p><p>即：<strong>获得依赖对象的方式反转了</strong>。</p><h3 id="_2-2-di" tabindex="-1"><a class="header-anchor" href="#_2-2-di"><span>2.2 DI</span></a></h3><p>IoC 的一个重点是在系统运行中，<strong>动态的向某个对象提供它所需要的其他对象</strong>。这一点是通过 <strong>DI</strong>（Dependency Injection，依赖注入）来实现的。</p><p>比如对象 A 需要操作数据库，以前我们总是要在 A 中自己编写代码来获得一个 Connection 对象，有了 spring 我们就只需要告诉 spring，A 中需要一个 Connection，至于这个 Connection 怎么构造，何时构造，A 不需要知道。在系统运行时，spring 会在适当的时候制造一个 Connection，然后像打针一样，注射到 A 当中，这样就完成了对各个对象之间关系的控制。A 需要依赖 Connection 才能正常运行，而这个 Connection 是由 spring 注入到 A 中的，依赖注入的名字就这么来的。</p><p>那么 DI 是如何实现的呢？Java 1.3 之后一个重要特征是<strong>反射</strong>（reflection），<strong>它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性</strong>，spring 就是通过反射来实现注入的。</p><p>理解了 IoC 和 DI 的概念后，一切都将变得简单明了，剩下的工作只是在 spring 的框架中堆积木而已。</p><h2 id="_3-注入形式" tabindex="-1"><a class="header-anchor" href="#_3-注入形式"><span>3. 注入形式</span></a></h2><p>IoC Service Provider 为被注入对象提供被依赖对象有如下几种方式：构造方法注入、stter方法注入、接口注入。</p><p>1）构造器注入</p><p>构造器注入，顾名思义就是被注入的对象通过在其构造方法中声明依赖对象的参数列表，让外部知道它需要哪些依赖对象。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">YoungMan</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BeautifulGirl</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> beautifulGirl) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">beautifulGirl</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> beautifulGirl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造器注入方式比较直观，对象构造完毕后就可以直接使用，这就好比你出生你家里就给你指定了你媳妇。</p><p>2）<code>setter</code> 方法注入</p><p>对于 JavaBean 对象而言，我们一般都是通过 <code>getter</code> 和 <code>setter</code> 方法来访问和设置对象的属性。所以，当前对象只需要为其所依赖的对象提供相对应的 <code>setter</code> 方法，就可以通过该方法将相应的依赖对象设置到被注入对象中。如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> YoungMan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BeautifulGirl</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> beautifulGirl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setBeautifulGirl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BeautifulGirl</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> beautifulGirl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">beautifulGirl</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> beautifulGirl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比于构造器注入，<code>setter</code> 方式注入会显得比较宽松灵活些，它可以在任何时候进行注入（当然是在使用依赖对象之前），这就好比你可以先把自己想要的妹子想好了，然后再跟婚介公司打招呼，你可以要林志玲款式的，赵丽颖款式的，甚至凤姐哪款的，随意性较强。</p><p>3）接口方式注入</p><p>接口方式注入显得比较霸道，因为它需要被依赖的对象实现不必要的接口，带有侵入性。一般都不推荐这种方式。</p><p>可以看下 <a href="http://wiki.jikexueyuan.com/project/spring-ioc/iocordi-1.html#6e5dfcd838f3a79e9129641785cf736f" target="_blank" rel="noopener noreferrer">《依赖注入的三种实现形式 —— 接口注入（Interface Injection）》</a></p><h2 id="_4-各个组件" tabindex="-1"><a class="header-anchor" href="#_4-各个组件"><span>4. 各个组件</span></a></h2><p>先上图：</p><figure><img src="https://cloud.braumace.cn/f/k1ki5/1.2 ClassPathXmIApplicationContext的类继承体系结构.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>该图为 ClassPathXmlApplicationContext 的类继承体系结构，虽然只有一部分，但是它基本上包含了 IoC 体系中大部分的核心类和接口。</p><p>下面我们就针对这个图进行简单的拆分和补充说明</p><h3 id="_4-1-resource-体系" tabindex="-1"><a class="header-anchor" href="#_4-1-resource-体系"><span>4.1 Resource 体系</span></a></h3><p><code>org.springframework.core.io.Resource</code>，对资源的抽象。它的每一个实现类都代表了一种资源的访问策略，如 ClassPathResource、RLResource、FileSystemResource 等。</p><figure><img src="https://cloud.braumace.cn/f/2OOsZ/1.3 Resource 类图.png" alt="Resource 类图" tabindex="0" loading="lazy"><figcaption>Resource 类图</figcaption></figure><h3 id="_4-2-resourceloader-体系" tabindex="-1"><a class="header-anchor" href="#_4-2-resourceloader-体系"><span>4.2 ResourceLoader 体系</span></a></h3><p>有了资源，就应该有资源加载，Spring 利用 <code>org.springframework.core.io.ResourceLoader</code> 来进行统一资源加载，类图如下：</p><figure><img src="https://cloud.braumace.cn/f/D6VSX/1.4 ResourceLoader 类图.png" alt="ResourceLoader 类图" tabindex="0" loading="lazy"><figcaption>ResourceLoader 类图</figcaption></figure><h3 id="_4-3-beanfactory-体系" tabindex="-1"><a class="header-anchor" href="#_4-3-beanfactory-体系"><span>4.3 BeanFactory 体系</span></a></h3><p><code>org.springframework.beans.factory.BeanFactory</code>，是一个非常纯粹的 bean 容器，它是 IoC 必备的数据结构，其中 BeanDefinition 是它的基本结构。BeanFactory 内部维护着一个BeanDefinition map ，并可根据 BeanDefinition 的描述进行 bean 的创建和管理。</p><figure><img src="https://cloud.braumace.cn/f/LeGsl/1.5 BeanFactory 类图.png" alt="BeanFactory 类图" tabindex="0" loading="lazy"><figcaption>BeanFactory 类图</figcaption></figure><ul><li>BeanFactory 有三个直接子类 ListableBeanFactory、HierarchicalBeanFactory 和 AutowireCapableBeanFactory 。</li><li>DefaultListableBeanFactory 为最终默认实现，它实现了所有接口。</li></ul><h3 id="_4-4-beandefinition-体系" tabindex="-1"><a class="header-anchor" href="#_4-4-beandefinition-体系"><span>4.4 BeanDefinition 体系</span></a></h3><p><code>org.springframework.beans.factory.config.BeanDefinition</code>，用来描述 Spring 中的 Bean 对象。</p><figure><img src="https://cloud.braumace.cn/f/W1zc7/1.6 BeanDefinition 类图.png" alt="BeanDefinition 类图" tabindex="0" loading="lazy"><figcaption>BeanDefinition 类图</figcaption></figure><h3 id="_4-5-beandefinitionreader-体系" tabindex="-1"><a class="header-anchor" href="#_4-5-beandefinitionreader-体系"><span>4.5 BeanDefinitionReader 体系</span></a></h3><p><code>org.springframework.beans.factory.support.BeanDefinitionReader</code> 的作用是读取 Spring 的配置文件的内容，并将其转换成 Ioc 容器内部的数据结构：BeanDefinition 。</p><figure><img src="https://cloud.braumace.cn/f/lZ8UD/1.7 BeanDefinitionReader 类图.png" alt="BeanDefinitionReader 类图" tabindex="0" loading="lazy"><figcaption>BeanDefinitionReader 类图</figcaption></figure><h3 id="_4-6-applicationcontext-体系" tabindex="-1"><a class="header-anchor" href="#_4-6-applicationcontext-体系"><span>4.6 ApplicationContext 体系</span></a></h3><p><code>org.springframework.context.ApplicationContext</code>，这个就是大名鼎鼎的 Spring 容器，它叫做应用上下文，与我们应用息息相关。它继承 BeanFactory ，所以它是 BeanFactory 的扩展升级版，如果BeanFactory 是屌丝的话，那么 ApplicationContext 则是名副其实的高富帅。由于 ApplicationContext 的结构就决定了它与 BeanFactory 的不同，其主要区别有：</p><ol><li>继承 <code>org.springframework.context.MessageSource</code> 接口，提供国际化的标准访问策略。</li><li>继承 <code>org.springframework.context.ApplicationEventPublisher</code> 接口，提供强大的事件机制。</li><li>扩展 <code>ResourceLoader</code> ，可以用来加载多种 Resource ，可以灵活访问不同的资源。</li><li>对 Web 应用的支持。</li></ol><p>下图来源：<a href="https://blog.csdn.net/yujin753/article/details/47043143" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/yujin753/article/details/47043143</a></p><figure><img src="https://cloud.braumace.cn/f/E6ziY/1.8 ApplicationContext 类图.png" alt="ApplicationContext 类图" tabindex="0" loading="lazy"><figcaption>ApplicationContext 类图</figcaption></figure><h3 id="_4-7-小结" tabindex="-1"><a class="header-anchor" href="#_4-7-小结"><span>4.7 小结</span></a></h3><p>上面五个体系可以说是 Spring IoC 中最核心的部分，后续也会针对这五个部分进行分析。其实 IoC 咋一看还是挺简单的，无非就是将配置文件（暂且认为是 xml 文件）进行解析（分析 xml 谁不会啊），然后放到一个 Map 里面就差不多了，初看有道理，其实要面临的问题还是有很多的。</p><p>另外，通过上面五个体系，我们可以看出，IoC 主要由 <code>spring-beans</code> 和 <code>spring-context</code> 项目，进行实现。</p>`,66))])}const d=a(o,[["render",l],["__file","1. 深入理解IoC.html.vue"]]),h=JSON.parse('{"path":"/framework/spring/IOC/1.%20%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3IoC.html","title":"深入理解 IoC","lang":"zh-CN","frontmatter":{"category":["常用框架"],"tag":["Spring"],"head":[["meta",{"property":"og:url","content":"https://blog.braumace.cn/ByteLighting/framework/spring/IOC/1.%20%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3IoC.html"}],["meta",{"property":"og:site_name","content":"ByteLighting"}],["meta",{"property":"og:title","content":"深入理解 IoC"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cloud.braumace.cn/f/pJEFB/1.1%20IoC%E8%BF%87%E7%A8%8B.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-05T12:57:18.000Z"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:modified_time","content":"2024-10-05T12:57:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入理解 IoC\\",\\"image\\":[\\"https://cloud.braumace.cn/f/pJEFB/1.1%20IoC%E8%BF%87%E7%A8%8B.png\\",\\"https://cloud.braumace.cn/f/k1ki5/1.2%20ClassPathXmIApplicationContext%E7%9A%84%E7%B1%BB%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png\\",\\"https://cloud.braumace.cn/f/2OOsZ/1.3%20Resource%20%E7%B1%BB%E5%9B%BE.png\\",\\"https://cloud.braumace.cn/f/D6VSX/1.4%20ResourceLoader%20%E7%B1%BB%E5%9B%BE.png\\",\\"https://cloud.braumace.cn/f/LeGsl/1.5%20BeanFactory%20%E7%B1%BB%E5%9B%BE.png\\",\\"https://cloud.braumace.cn/f/W1zc7/1.6%20BeanDefinition%20%E7%B1%BB%E5%9B%BE.png\\",\\"https://cloud.braumace.cn/f/lZ8UD/1.7%20BeanDefinitionReader%20%E7%B1%BB%E5%9B%BE.png\\",\\"https://cloud.braumace.cn/f/E6ziY/1.8%20ApplicationContext%20%E7%B1%BB%E5%9B%BE.png\\"],\\"dateModified\\":\\"2024-10-05T12:57:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BraumAce\\",\\"url\\":\\"https://blog.braumace.cn/article\\"}]}"]]},"headers":[{"level":2,"title":"1. IoC 理论","slug":"_1-ioc-理论","link":"#_1-ioc-理论","children":[]},{"level":2,"title":"2. Bromon 的 blog 上对 IoC 与 DI 浅显易懂的讲解","slug":"_2-bromon-的-blog-上对-ioc-与-di-浅显易懂的讲解","link":"#_2-bromon-的-blog-上对-ioc-与-di-浅显易懂的讲解","children":[{"level":3,"title":"2.1 IoC","slug":"_2-1-ioc","link":"#_2-1-ioc","children":[]},{"level":3,"title":"2.2 DI","slug":"_2-2-di","link":"#_2-2-di","children":[]}]},{"level":2,"title":"3. 注入形式","slug":"_3-注入形式","link":"#_3-注入形式","children":[]},{"level":2,"title":"4. 各个组件","slug":"_4-各个组件","link":"#_4-各个组件","children":[{"level":3,"title":"4.1 Resource 体系","slug":"_4-1-resource-体系","link":"#_4-1-resource-体系","children":[]},{"level":3,"title":"4.2 ResourceLoader 体系","slug":"_4-2-resourceloader-体系","link":"#_4-2-resourceloader-体系","children":[]},{"level":3,"title":"4.3 BeanFactory 体系","slug":"_4-3-beanfactory-体系","link":"#_4-3-beanfactory-体系","children":[]},{"level":3,"title":"4.4 BeanDefinition 体系","slug":"_4-4-beandefinition-体系","link":"#_4-4-beandefinition-体系","children":[]},{"level":3,"title":"4.5 BeanDefinitionReader 体系","slug":"_4-5-beandefinitionreader-体系","link":"#_4-5-beandefinitionreader-体系","children":[]},{"level":3,"title":"4.6 ApplicationContext 体系","slug":"_4-6-applicationcontext-体系","link":"#_4-6-applicationcontext-体系","children":[]},{"level":3,"title":"4.7 小结","slug":"_4-7-小结","link":"#_4-7-小结","children":[]}]}],"git":{"createdTime":1727614895000,"updatedTime":1728133038000,"contributors":[{"name":"BraumAce","email":"1693717911@qq.com","commits":2}]},"readingTime":{"minutes":8.81,"words":2644},"filePathRelative":"framework/spring/IOC/1. 深入理解IoC.md","localizedDate":"2024年9月29日","excerpt":"\\n"}');export{d as comp,h as data};
