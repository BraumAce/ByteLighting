import{_ as a,c as l,a as s,b as n,d as e,o as t}from"./app-C6mtOOWK.js";const h={};function p(k,i){return t(),l("div",null,[i[0]||(i[0]=s("h1",{id:"spring-开发准备",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#spring-开发准备"},[s("span",null,"Spring 开发准备")])],-1)),n(" more "),i[1]||(i[1]=e(`<h2 id="_1-开发规范" tabindex="-1"><a class="header-anchor" href="#_1-开发规范"><span>1. 开发规范</span></a></h2><h3 id="_1-1-rest-风格" tabindex="-1"><a class="header-anchor" href="#_1-1-rest-风格"><span>1.1 REST 风格</span></a></h3><p>在前后端分离的开发模式中，前后端开发人员都需要根据提前定义好的接口文档，来进行前后端功能的开发。</p><blockquote><p>后端开发人员：必须严格遵守提供的接口文档进行后端功能开发（保障开发的功能可以和前端对接）</p></blockquote><p>而在前后端进行交互的时候，我们需要基于当前主流的 REST 风格的 API 接口进行交互。</p><ul><li><strong>REST</strong>（Representational State Transfer），表述性状态转换，它是一种软件架构风格。</li></ul><p><strong>传统 URL 风格如下：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>http://localhost:8080/user/getById?id=1     GET：查询id为1的用户</span></span>
<span class="line"><span>http://localhost:8080/user/saveUser         POST：新增用户</span></span>
<span class="line"><span>http://localhost:8080/user/updateUser       POST：修改用户</span></span>
<span class="line"><span>http://localhost:8080/user/deleteUser?id=1  GET：删除id为1的用户</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原始的传统URL，定义比较复杂，而且将资源的访问行为对外暴露出来了。</p><p><strong>基于 REST 风格 URL 如下：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>http://localhost:8080/users/1  GET：查询id为1的用户</span></span>
<span class="line"><span>http://localhost:8080/users    POST：新增用户</span></span>
<span class="line"><span>http://localhost:8080/users    PUT：修改用户</span></span>
<span class="line"><span>http://localhost:8080/users/1  DELETE：删除id为1的用户</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 URL 定位要操作的资源，通过 HTTP 动词（请求方式）来描述具体的操作。</p><p>在 REST 风格的 URL 中，通过四种请求方式，来操作数据的增删改查。</p><ul><li><code>GET</code> ： 查询</li><li><code>POST </code>：新增</li><li><code>PUT</code> ：修改</li><li><code>DELETE</code> ：删除</li></ul><p>我们看到如果是基于 REST 风格，定义的 URL 将会更加简洁、更加规范、更加优雅。</p><blockquote><p>注意事项：</p><ul><li>REST 是风格，是约定方式，约定不是规定，可以打破</li><li>描述模块的功能通常使用复数，也就是加 &#39;s&#39; 的格式来描述，表示此类资源，而非单个资源。如：users、emps、books…</li></ul></blockquote><h3 id="_1-2-统一响应结果" tabindex="-1"><a class="header-anchor" href="#_1-2-统一响应结果"><span>1.2 统一响应结果</span></a></h3><p>前后端工程在进行交互时，使用统一响应结果 Result。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Data</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">NoArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">AllArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> code</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//响应码，1 代表成功; 0 代表失败</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //响应信息 描述字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //返回的数据</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //增删改 成功响应</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Result</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> success</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;success&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //查询 成功响应</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Result</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> success</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;success&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, data);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //失败响应</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Result</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, msg, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-开发流程" tabindex="-1"><a class="header-anchor" href="#_1-3-开发流程"><span>1.3 开发流程</span></a></h3><p>在进行功能开发时，都是根据如下流程进行：</p><figure><img src="https://cloud.bytelighting.cn/f/X5Jt0/开发流程.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>查看页面原型明确需求 <ul><li>根据页面原型和需求，进行表结构设计、编写接口文档(已提供)</li></ul></li><li>阅读接口文档</li><li>思路分析</li><li>功能接口开发 <ul><li>就是开发后台的业务功能，一个业务功能，我们称为一个接口</li></ul></li><li>功能接口测试 <ul><li>功能开发完毕后，先通过测试工具进行功能接口测试，测试通过后，再和前端进行联调测试</li></ul></li><li>前后端联调测试 <ul><li>和前端开发人员开发好的前端工程一起测试</li></ul></li></ol><h2 id="_2-文件上传" tabindex="-1"><a class="header-anchor" href="#_2-文件上传"><span>2. 文件上传</span></a></h2><h3 id="_2-1-程序示例" tabindex="-1"><a class="header-anchor" href="#_2-1-程序示例"><span>2.1 程序示例</span></a></h3><p><strong>文件上传</strong>，是指将本地图片、视频、音频等文件上传到服务器，供其他用户浏览或下载的过程。</p><p>想要完成文件上传这个功能需要涉及到两个部分：</p><ol><li>前端程序</li><li>服务端程序</li></ol><p>示例如下：</p><p>前端程序中的代码：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">form</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/upload&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;post&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> enctype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;multipart/form-data&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    姓名: &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">input</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;username&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">br</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    年龄: &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">input</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">br</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    头像: &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">input</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;file&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;image&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">br</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">input</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;submit&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;提交&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">form</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上传文件的原始form表单，要求表单必须具备以下三点（上传文件页面三要素）：</p><ul><li><p>表单必须有 <code>file</code> 域，用于选择要上传的文件</p><blockquote><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">input</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;file&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;image&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote></li><li><p>表单提交方式必须为 <code>POST</code></p><blockquote><p>通常上传的文件会比较大，所以需要使用 POST 提交方式</p></blockquote></li><li><p>表单的编码类型 enctype 必须要设置为：<code>multipart/form-data</code></p><blockquote><p>普通默认的编码格式是不适合传输大型的二进制数据的，所以在文件上传时，表单的编码格式必须设置为 <code>multipart/form-data</code></p></blockquote></li></ul><p>后端程序实现：</p><ul><li><p>首先在服务端先定义一个 Controller，用来进行文件上传，然后在 Controller 当中定义一个方法来处理 <code>/upload</code> 请求</p></li><li><p>在定义的方法中接收提交过来的数据（方法中的形参名和请求参数的名字保持一致）</p><ul><li>用户名：<code>String name</code></li><li>年龄：<code>Integer age</code></li><li>文件：<code>MultipartFile image</code></li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">如果表单项的名字和方法中形参名不一致，该怎么办？</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 	public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Result</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> upload</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> 	                     Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> 	                     MultipartFile</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> file) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//file形参名和请求参数名image不一致</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法：使用 <code>@RequestParam</code> 注解进行参数绑定</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 	public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Result</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> upload</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> 	                     Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	                     @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestParam</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;image&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MultipartFile</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> file)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>程序运行后，我们上传文件，会发现产生了一个临时文件，而当程序结束后，这个临时文件会被自动删除。</p><p>所以，我们需要将这个临时文件，转存到目标路径中，实现真正的文件上传。</p><h3 id="_2-2-本地存储" tabindex="-1"><a class="header-anchor" href="#_2-2-本地存储"><span>2.2 本地存储</span></a></h3><p>以本地存储为例，将上传的文件保存在服务器的本地磁盘上。</p><p>代码实现：</p><ol><li>在服务器本地磁盘上创建 images 目录，用来存储上传的文件；</li><li>使用 <code>MultipartFile</code> 类提供的API方法，把临时文件转存到本地磁盘目录下。</li></ol><div class="hint-container info"><p class="hint-container-title">MultipartFile 常见方法</p><ul><li><code>String getOriginalFilename();</code> // 获取原始文件名</li><li><code>void transferTo(File dest);</code> // 将接收的文件转存到磁盘文件中</li><li><code>long getSize();</code> // 获取文件的大小，单位：字节</li><li><code>byte[] getBytes();</code> // 获取文件内容的字节数组</li><li><code>InputStream getInputStream();</code> // 获取接收到的文件内容的输入流</li></ul></div><p>示例代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RestController</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UploadController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/upload&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Result</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> upload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MultipartFile</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;文件上传：{}, {}, {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, username, age, image);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         * 获取原始文件名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         * 但是使用原始文件名作为所上传文件的存储名字，当再次上传一个同名文件时，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         * 会把之前已经上传成功的文件覆盖掉</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         * 所以需要保证每次上传文件时文件名都唯一的</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         */</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> originalFilename</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getOriginalFilename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 将文件存储在服务器的磁盘目录</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transferTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;E:/images/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> originalFilename));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 构建新的文件名=随机名+文件扩展名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 保证每次上传文件时文件名唯一（使用UUID获取随机文件名）</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> extname</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> originalFilename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">substring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">originalFilename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lastIndexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> newFileName</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> UUID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">randomUUID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">extname;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 将文件存储在服务器的磁盘目录</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transferTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;E:/images/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> newFileName));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">success</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 SpringBoot 中，文件上传时默认单个文件最大大小为 <code>1M</code>。</p><p>如果需要上传大文件，可以在 application.properties 进行如下配置：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 配置单个文件最大上传大小</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.servlet.multipart.max-file-size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">10MB</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 配置单个请求最大上传大小(一次请求可以上传多个文件)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.servlet.multipart.max-request-size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">100MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是如果直接存储在服务器的磁盘目录中，存在以下缺点：</p><ul><li>不安全：磁盘如果损坏，所有的文件就会丢失</li><li>容量有限：如果存储大量的图片，磁盘空间有限(磁盘不可能无限制扩容)</li><li>无法直接访问</li></ul><p>为了解决上述问题，通常有两种解决方案：</p><ul><li>自己搭建存储服务器，如：fastDFS 、MinIO</li><li>使用现成的云服务，如：阿里云，腾讯云，华为云</li></ul><h2 id="_3-配置文件" tabindex="-1"><a class="header-anchor" href="#_3-配置文件"><span>3. 配置文件</span></a></h2><h3 id="_3-1-参数配置化" tabindex="-1"><a class="header-anchor" href="#_3-1-参数配置化"><span>3.1 参数配置化</span></a></h3><p>在项目开发过程中，少不了会有一些配置信息，如果直接写死在 Java 代码中（硬编码），即每涉及到一个第三方技术服务，就将其参数硬编码，那么在 Java 程序中会存在两个问题：</p><ol><li><p>如果这些参数发生变化了，就必须在源程序代码中改动这些参数，然后需要重新进行代码的编译，将 Java 代码编译成 class 字节码文件再重新运行程序。（比较繁琐）</p></li><li><p>在实际开发过程中，Java 类有很多，如果将这些参数分散的定义在各个 Java 类当中，我们要修改一个参数值，我们就需要在众多的 Java 代码当中来定位到对应的位置，再来修改参数，修改完毕之后再重新编译再运行。（参数配置过于分散，不方便集中的管理和维护）</p></li></ol><p>为了解决以上分析的问题，可以将参数配置在配置文件中。</p><p>示例如下：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 配置端口号</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">server.port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">8080</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 配置数据库连接信息</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.datasource.url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">jdbc:mysql://127.0.0.1:3306/testdb</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">sing.datasource.username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">root</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.datasource.password</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">root</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Spring 配置信息官网：<a href="https://docs.spring.io/spring-boot/appendix/application-properties/index.html#appendix.application-properties" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-boot/appendix/application-properties/index.html#appendix.application-properties</a></p></blockquote><p>那我们怎么读取配置呢？</p><p>因为 application.properties 是 springboot 项目默认的配置文件，所以 springboot 程序在启动时会默认读取 application.properties 配置文件，而我们可以使用一个现成的注解：<code>@Value</code>，获取配置文件中的数据。</p><p><code>@Value</code> 注解通常用于外部配置的属性注入，具体用法为： <code>@Value(&quot;\${配置文件中的key}&quot;)</code>，比如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SpringUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${server.port}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> serverPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${spring.datasource.url}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dbUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${sing.datasource.username}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dbUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${spring.datasource.password}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dbPassword</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-yml-配置文件" tabindex="-1"><a class="header-anchor" href="#_3-2-yml-配置文件"><span>3.2 yml 配置文件</span></a></h3><p>springboot 支持多种配置方式的，除了支持 properties 配置文件以外，还支持 yml 格式的配置文件。</p><p>由于 properties 配置是以 key-value 的形式配置的，从上面的配置文件来看，properties 配置中会有很多冗余的信息。</p><p>想要解决这个问题，就可以使用 yml 配置文件的格式化（实际工作中也是 yml 用的更多）</p><ul><li><p>application.properties</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">server.port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">8080</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">server.address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">127.0.0.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>application.yml</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8080</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">127.0.0.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>application.yaml</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8080</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">127.0.0.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>yml 格式的配置文件，后缀名有两种：</p><ul><li>yml （推荐）</li><li>yaml</li></ul></blockquote><p>yml 格式的数据有以下特点：</p><ul><li>容易阅读</li><li>容易与脚本语言交互</li><li>以数据为核心，重数据轻格式</li></ul><p>yml 配置文件的基本语法：</p><ul><li>大小写敏感</li><li>数值前边必须有空格，作为分隔符</li><li>使用缩进表示层级关系，缩进时，不允许使用 Tab 键，只能用空格（Idea中会自动将 Tab 转换为空格）</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li><code>#</code>表示注释，从这个字符一直到行尾，都会被解析器忽略</li></ul><figure><img src="https://cloud.bytelighting.cn/f/xAEFl/yml语法格式.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>yml文件中常见的数据格式：</p><ol><li>定义 对象 或 Map 集合</li></ol><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">zhangsan</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">18</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  password</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123456</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>定义 数组、list 或 set 集合</li></ol><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hobby</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">java</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">game</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">sport</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-注解-configurationproperties" tabindex="-1"><a class="header-anchor" href="#_3-3-注解-configurationproperties"><span>3.3 注解 @ConfigurationProperties</span></a></h3><p>在 Spring 中提供了一种简化方式，可以直接将配置文件中配置项的值自动的注入到对象的属性中。</p><p>Spring 提供的简化方式套路：</p><ol><li><p>需要创建一个实现类，且实体类中的属性名和配置文件当中 key 的名字必须要一致。</p><blockquote><p>比如：配置文件当中叫 endpoints，实体类当中的属性也得叫 endpoints，另外实体类当中的属性还需要提供 getter / setter 方法</p></blockquote></li><li><p>需要将实体类交给 Spring 的 IOC 容器管理，成为 IOC 容器当中的 bean 对象。</p></li><li><p>在实体类上添加 <code>@ConfigurationProperties</code> 注解，并通过 <code>prefix</code> 属性来指定配置参数项的前缀。</p></li></ol><figure><img src="https://cloud.bytelighting.cn/f/vK5uE/@ConfigurationProperties注解.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在添加上注解后，还需要引入一个依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-configuration-processor&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当在 pom.xml 文件当中配置了这项依赖之后，重新启动服务，就会看到在 properties 或者是 yml 配置文件当中，就会提示阿里云 OSS 相关的配置项。</p><p>所以这项依赖它的作用就是会自动的识别被 <code>@ConfigurationProperties</code> 注解标识的 bean 对象。</p><div class="hint-container tip"><p class="hint-container-title">@ConfigurationProperties 和 @Value 注解的区别：</p><p>相同点：都是用来注入外部配置的属性的。</p><p>不同点：</p><ul><li><p><code>@Value</code> 注解只能一个一个的进行外部属性的注入。</p></li><li><p><code>@ConfigurationProperties</code> 可以批量的将外部的属性配置注入到 bean 对象的属性中。</p></li></ul></div><p>如果要注入的属性非常的多，并且还想做到复用，就可以定义这么一个 bean 对象，通过 <code>@ConfigurationProperties</code> 批量的将外部的属性配置直接注入到 bean 对象的属性当中。</p><p>在其他的类当中，若想获取到注入进来的属性，直接注入 bean 对象，然后调用 <code>get</code> 方法，就可以获取到对应的属性值了。</p><h2 id="_4-常用注解" tabindex="-1"><a class="header-anchor" href="#_4-常用注解"><span>4. 常用注解</span></a></h2><h3 id="_4-1-pathvariable" tabindex="-1"><a class="header-anchor" href="#_4-1-pathvariable"><span>4.1 @PathVariable</span></a></h3><p>在 Controller中接收请求路径中的路径参数。</p><h3 id="_4-2-deletemapping" tabindex="-1"><a class="header-anchor" href="#_4-2-deletemapping"><span>4.2 @DeleteMapping</span></a></h3><p>限定请求方式为 <code>delete</code>。</p><p>类似还有 <code>@GetMapping</code>，<code>@PostMapping</code>。</p><h3 id="_4-3-requestbody" tabindex="-1"><a class="header-anchor" href="#_4-3-requestbody"><span>4.3 @RequestBody</span></a></h3><p>在 Controller 中接收 json 格式的请求参数。</p><h3 id="_4-4-requestmapping" tabindex="-1"><a class="header-anchor" href="#_4-4-requestmapping"><span>4.4 @RequestMapping</span></a></h3><p>指定请求路径。</p><blockquote><p>注意：一个完整的请求路径，应该是<strong>类</strong>上 @RequestMapping 的 value 属性 + <strong>方法</strong>上的 @RequestMapping 的 value 属性</p></blockquote><h3 id="_4-5-requestparam" tabindex="-1"><a class="header-anchor" href="#_4-5-requestparam"><span>4.5 @RequestParam</span></a></h3><p><code>@RequestParam(defaultValue=&quot;默认值&quot;)</code></p><p>设置请求参数默认值。</p><h3 id="_4-6-value" tabindex="-1"><a class="header-anchor" href="#_4-6-value"><span>4.6 @Value</span></a></h3><p><code>@Value</code> 注解通常用于外部配置的属性 <strong>单个</strong> 注入，具体用法为：</p><p><code>@Value(&quot;\${配置文件中的key}&quot;)</code></p><h3 id="_4-7-configurationproperties" tabindex="-1"><a class="header-anchor" href="#_4-7-configurationproperties"><span>4.7 @ConfigurationProperties</span></a></h3><p>可以批量的将外部的属性配置 <strong>批量</strong> 注入到 bean 对象的属性中。</p><h3 id="_4-8-webfilter" tabindex="-1"><a class="header-anchor" href="#_4-8-webfilter"><span>4.8 @WebFilter</span></a></h3><p><code>@WebFilter</code> 注解用于添加在 Filter 类上，指定属性 <code>urlPatterns</code> 指定过滤器要拦截哪些请求。</p><h3 id="_4-9-servletcomponentscan" tabindex="-1"><a class="header-anchor" href="#_4-9-servletcomponentscan"><span>4.9 @ServletComponentScan</span></a></h3><p>在启动类上面加上一个注解 <code>@ServletComponentScan</code>，通过这个注解来开启 SpringBoot 项目对于 Servlet 组件的支持。</p><h3 id="_4-10-restcontrolleradvice" tabindex="-1"><a class="header-anchor" href="#_4-10-restcontrolleradvice"><span>4.10 @RestControllerAdvice</span></a></h3><p>定义一个类，在类上加上一个注解 <code>@RestControllerAdvice</code>，代表定义了一个全局异常处理器。</p><blockquote><p>@RestControllerAdvice = @ControllerAdvice + @ResponseBody</p><p>处理异常的方法返回值会转换为 json 后再响应给前端</p></blockquote><h3 id="_4-11-exceptionhandler" tabindex="-1"><a class="header-anchor" href="#_4-11-exceptionhandler"><span>4.11 @ExceptionHandler</span></a></h3><p>在全局异常处理器当中，需要定义一个方法来捕获异常，在这个方法上需要加上注解 <code>@ExceptionHandler</code> 。</p><p>通过 <code>@ExceptionHandler</code> 注解当中的 <code>value</code> 属性来指定要捕获的是哪一类型的异常。</p><blockquote><p>@ExceptionHandler(Exception.class) // 表示处理所有异常类型</p></blockquote>`,122))])}const d=a(h,[["render",p],["__file","2. Spring开发准备.html.vue"]]),g=JSON.parse('{"path":"/framework/spring-boot/2.%20Spring%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87.html","title":"Spring 开发准备","lang":"zh-CN","frontmatter":{"category":["常用框架"],"tag":["Spring"],"head":[["meta",{"property":"og:url","content":"https://blog.bytelighting.cn/framework/spring-boot/2.%20Spring%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87.html"}],["meta",{"property":"og:site_name","content":"ByteLighting"}],["meta",{"property":"og:title","content":"Spring 开发准备"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cloud.bytelighting.cn/f/X5Jt0/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T02:42:14.000Z"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:modified_time","content":"2025-06-17T02:42:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 开发准备\\",\\"image\\":[\\"https://cloud.bytelighting.cn/f/X5Jt0/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.png\\",\\"https://cloud.bytelighting.cn/f/xAEFl/yml%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F.png\\",\\"https://cloud.bytelighting.cn/f/vK5uE/@ConfigurationProperties%E6%B3%A8%E8%A7%A3.png\\"],\\"dateModified\\":\\"2025-06-17T02:42:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BraumAce\\",\\"url\\":\\"https://blog.bytelighting.cn/article\\"}]}"]]},"headers":[{"level":2,"title":"1. 开发规范","slug":"_1-开发规范","link":"#_1-开发规范","children":[{"level":3,"title":"1.1 REST 风格","slug":"_1-1-rest-风格","link":"#_1-1-rest-风格","children":[]},{"level":3,"title":"1.2 统一响应结果","slug":"_1-2-统一响应结果","link":"#_1-2-统一响应结果","children":[]},{"level":3,"title":"1.3 开发流程","slug":"_1-3-开发流程","link":"#_1-3-开发流程","children":[]}]},{"level":2,"title":"2. 文件上传","slug":"_2-文件上传","link":"#_2-文件上传","children":[{"level":3,"title":"2.1 程序示例","slug":"_2-1-程序示例","link":"#_2-1-程序示例","children":[]},{"level":3,"title":"2.2 本地存储","slug":"_2-2-本地存储","link":"#_2-2-本地存储","children":[]}]},{"level":2,"title":"3. 配置文件","slug":"_3-配置文件","link":"#_3-配置文件","children":[{"level":3,"title":"3.1 参数配置化","slug":"_3-1-参数配置化","link":"#_3-1-参数配置化","children":[]},{"level":3,"title":"3.2 yml 配置文件","slug":"_3-2-yml-配置文件","link":"#_3-2-yml-配置文件","children":[]},{"level":3,"title":"3.3 注解 @ConfigurationProperties","slug":"_3-3-注解-configurationproperties","link":"#_3-3-注解-configurationproperties","children":[]}]},{"level":2,"title":"4. 常用注解","slug":"_4-常用注解","link":"#_4-常用注解","children":[{"level":3,"title":"4.1 @PathVariable","slug":"_4-1-pathvariable","link":"#_4-1-pathvariable","children":[]},{"level":3,"title":"4.2 @DeleteMapping","slug":"_4-2-deletemapping","link":"#_4-2-deletemapping","children":[]},{"level":3,"title":"4.3 @RequestBody","slug":"_4-3-requestbody","link":"#_4-3-requestbody","children":[]},{"level":3,"title":"4.4 @RequestMapping","slug":"_4-4-requestmapping","link":"#_4-4-requestmapping","children":[]},{"level":3,"title":"4.5 @RequestParam","slug":"_4-5-requestparam","link":"#_4-5-requestparam","children":[]},{"level":3,"title":"4.6 @Value","slug":"_4-6-value","link":"#_4-6-value","children":[]},{"level":3,"title":"4.7 @ConfigurationProperties","slug":"_4-7-configurationproperties","link":"#_4-7-configurationproperties","children":[]},{"level":3,"title":"4.8 @WebFilter","slug":"_4-8-webfilter","link":"#_4-8-webfilter","children":[]},{"level":3,"title":"4.9 @ServletComponentScan","slug":"_4-9-servletcomponentscan","link":"#_4-9-servletcomponentscan","children":[]},{"level":3,"title":"4.10 @RestControllerAdvice","slug":"_4-10-restcontrolleradvice","link":"#_4-10-restcontrolleradvice","children":[]},{"level":3,"title":"4.11 @ExceptionHandler","slug":"_4-11-exceptionhandler","link":"#_4-11-exceptionhandler","children":[]}]}],"git":{"createdTime":1735059199000,"updatedTime":1750128134000,"contributors":[{"name":"BraumAce","email":"1693717911@qq.com","commits":3}]},"readingTime":{"minutes":11.68,"words":3505},"filePathRelative":"framework/spring-boot/2. Spring开发准备.md","localizedDate":"2024年12月24日","excerpt":"\\n"}');export{d as comp,g as data};
