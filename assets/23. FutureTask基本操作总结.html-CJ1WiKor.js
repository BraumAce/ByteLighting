import{_ as i,c as t,a,b as e,d as n,o as l}from"./app-CKXkW8v_.js";const r={};function p(k,s){return l(),t("div",null,[s[0]||(s[0]=a("h1",{id:"futuretask-基本操作总结",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#futuretask-基本操作总结"},[a("span",null,"FutureTask 基本操作总结")])],-1)),e(" more "),s[1]||(s[1]=n(`<h2 id="_1-futuretask-简介" tabindex="-1"><a class="header-anchor" href="#_1-futuretask-简介"><span>1. FutureTask 简介</span></a></h2><p>在 Executors 框架体系中，FutureTask 用来表示可获取结果的异步任务。</p><p>FutureTask 实现了 Future 接口，FutureTask 提供了启动和取消异步任务，查询异步任务是否计算结束以及获取最终的异步任务的结果的一些常用的方法。</p><p>通过 <code>get()</code> 方法来获取异步任务的结果，但是会阻塞当前线程直至异步任务执行结束。一旦任务执行结束，任务不能重新启动或取消，除非调用 <code>runAndReset()</code> 方法。</p><p>在 FutureTask 的源码中为其定义了这些状态：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> NEW          </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> COMPLETING   </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> NORMAL       </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> EXCEPTIONAL  </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CANCELLED    </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> INTERRUPTING </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> INTERRUPTED  </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，在《Java并发编程的艺术》一书，作者根据 <code>FutureTask.run()</code> 方法的执行的时机，将 FutureTask 分为了3种状态：</p><ol><li><strong>未启动</strong>。<code>FutureTask.run()</code> 方法还没有被执行之前，FutureTask 处于未启动状态。当创建一个 FutureTask，还没有执行 <code>FutureTask.run()</code> 方法之前，FutureTask 处于未启动状态。</li><li><strong>已启动</strong>。<code>FutureTask.run()</code> 方法被执行的过程中，FutureTask 处于已启动状态。</li><li><strong>已完成</strong>。<code>FutureTask.run()</code> 方法执行结束，或者调用 <code>FutureTask.cancel(...)</code> 方法取消任务，或者在执行任务期间抛出异常，这些情况都称之为 FutureTask 的已完成状态。</li></ol><p>下图总结了 FutureTask 的状态变化的过程：</p><figure><img src="https://cloud.braumace.cn/f/VrVSN/23.1 FutureTask状态迁移图.png" alt="FutureTask 状态迁移图" tabindex="0" loading="lazy"><figcaption>FutureTask 状态迁移图</figcaption></figure><p>由于 FutureTask 具有这三种状态，因此执行 FutureTask 的 <code>get</code> 方法和 <code>cancel</code> 方法，当前处于不同的状态对应的结果也是大不相同。</p><p>这里对 <code>get</code> 方法和 <code>cancel</code> 方法做个总结：</p><p><strong>get 方法</strong></p><ol><li><p>当 FutureTask 处于未启动或已启动状态时，执行 <code>FutureTask.get()</code> 方法将导致调用线程阻塞。</p></li><li><p>如果 FutureTask 处于已完成状态，调用 <code>FutureTask.get()</code> 方法将导致调用线程立即返回结果或者抛出异常。</p></li></ol><p><strong>cancel 方法</strong></p><ol><li><p>当 FutureTask 处于未启动状态时，执行 <code>FutureTask.cancel()</code> 方法将此任务永远不会执行。</p></li><li><p>当 FutureTask 处于已启动状态时，执行 <code>FutureTask.cancel(true)</code> 方法将以中断线程的方式来阻止任务继续进行，如果执行 <code>FutureTask.cancel(false)</code> 将不会对正在执行任务的线程有任何影响。</p></li><li><p>当 FutureTask 处于已完成状态时，执行 <code>FutureTask.cancel(...)</code> 方法将返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">false</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">se</span></span></span></span>。</p></li></ol><p>对 Future 的 <code>get()</code> 方法和 <code>cancel()</code> 方法用下图进行总结：</p><figure><img src="https://cloud.braumace.cn/f/ew6t5/23.2 FutureTask的get和cancel的执行示意图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-futuretask-的基本使用" tabindex="-1"><a class="header-anchor" href="#_2-futuretask-的基本使用"><span>2. FutureTask 的基本使用</span></a></h2><p>FutureTask 除了实现 Future 接口外，还实现了 Runnable 接口。因此，FutureTask 可以交给 Executor 执行，也可以由调用的线程直接执行（<code>FutureTask.run()</code>）。</p><p>另外，FutureTask 的获取也可以通过 <code>ExecutorService.submit()</code> 方法返回一个 FutureTask 对象，然后在通过 <code>FutureTask.get()</code> 或者 <code>FutureTask.cancel</code> 方法。</p><p><strong>应用场景</strong>：当一个线程需要等待另一个线程把某个任务执行完后它才能继续执行，此时可以使用 FutureTask。假设有多个线程执行若干任务，每个任务最多只能被执行一次。当多个线程试图执行同一个任务时，只允许一个线程执行任务，其他线程需要等待这个任务执行完后才能继续执行。</p>`,22))])}const u=i(r,[["render",p],["__file","23. FutureTask基本操作总结.html.vue"]]),c=JSON.parse('{"path":"/computer/language/java/JUC%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/23.%20FutureTask%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93.html","title":"FutureTask 基本操作总结","lang":"zh-CN","frontmatter":{"category":["并发编程"],"tag":["JUC"],"head":[["meta",{"property":"og:url","content":"https://blog.braumace.cn/computer/language/java/JUC%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/23.%20FutureTask%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"ByteLighting"}],["meta",{"property":"og:title","content":"FutureTask 基本操作总结"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cloud.braumace.cn/f/VrVSN/23.1%20FutureTask%E7%8A%B6%E6%80%81%E8%BF%81%E7%A7%BB%E5%9B%BE.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-04T13:24:29.000Z"}],["meta",{"property":"article:tag","content":"JUC"}],["meta",{"property":"article:modified_time","content":"2024-11-04T13:24:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"FutureTask 基本操作总结\\",\\"image\\":[\\"https://cloud.braumace.cn/f/VrVSN/23.1%20FutureTask%E7%8A%B6%E6%80%81%E8%BF%81%E7%A7%BB%E5%9B%BE.png\\",\\"https://cloud.braumace.cn/f/ew6t5/23.2%20FutureTask%E7%9A%84get%E5%92%8Ccancel%E7%9A%84%E6%89%A7%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.png\\"],\\"dateModified\\":\\"2024-11-04T13:24:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BraumAce\\",\\"url\\":\\"https://blog.braumace.cn/article\\"}]}"]]},"headers":[{"level":2,"title":"1. FutureTask 简介","slug":"_1-futuretask-简介","link":"#_1-futuretask-简介","children":[]},{"level":2,"title":"2. FutureTask 的基本使用","slug":"_2-futuretask-的基本使用","link":"#_2-futuretask-的基本使用","children":[]}],"git":{"createdTime":1730726669000,"updatedTime":1730726669000,"contributors":[{"name":"BraumAce","email":"1693717911@qq.com","commits":1}]},"readingTime":{"minutes":2.92,"words":877},"filePathRelative":"computer/language/java/JUC 并发编程/23. FutureTask基本操作总结.md","localizedDate":"2024年11月4日","excerpt":"\\n"}');export{u as comp,c as data};
