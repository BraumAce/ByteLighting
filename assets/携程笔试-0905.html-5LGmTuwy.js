import{_ as i,c as t,b as a,a as e,e as s,o as n}from"./app-X777Ei6l.js";const p={},d=e("h1",{id:"携程笔试-0905",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#携程笔试-0905"},[e("span",null,"携程笔试 - 0905")])],-1),l=s('<h2 id="第一题" tabindex="-1"><a class="header-anchor" href="#第一题"><span>第一题</span></a></h2><div class="hint-container info"><p class="hint-container-title">题面</p><p>游游有两个整数<code>n</code>,<code>k</code>, 他希望构造出一个<code>1</code>~<code>n</code>的排列<code>p</code>, 需要<code>p</code>的最长上升子序列长度为<code>k</code>, 并且<code>p</code>是所有满足要求的排列中字典序最小的。最长上升子序列是一个序列中最长的严格单调递增的子序列。</p><p>输入描述</p><p>两个正整数<code>n</code>,<code>k</code>，用空格隔开。</p><p>输出描述</p><p>输出<code>n</code>个正整数，代表构造的排列。</p><p>示例1：</p><p>输入：</p><p>输出：</p></div><p><strong>思路与代码</strong></p><p>由于字典序要求最小，因此要贪心的考虑。容易想到首先构造出1, 2, 3, ..., k - 1，n, n - 1, ..., k是字典序最小的，因此直接模拟即可。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="第二题" tabindex="-1"><a class="header-anchor" href="#第二题"><span>第二题</span></a></h2><div class="hint-container info"><p class="hint-container-title">题面</p><p>一个长度为<code>k</code>的二进制字符串(下标从1开始)的权值定义如下：每次操作可以选择一个下标<code>i</code>(<code>1</code> ≤ <code>i</code> ≤ <code>k</code>)，将<code>[1, i]</code>中的字符全部取反(0变成1，1变成0)，字符串的权值为将字符串变成全1所需要的最小操作次数。</p><p>给定一个长度为n的01字符串，问：有多少个长度为奇数并且权值为奇数的子字符串？</p><p>输入描述</p><p>第一行输入一个正整数<code>n</code> ，代表字符串的长度。第二行输入字符串<code>S</code></p><p>输出描述</p><p>输出包含一行一个整数，表示长度和权值都是奇数的非空子串数量,</p><p>示例1：</p><p>输入：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出：</p></div><p><strong>思路与代码</strong></p><p>定义三维dp数组，第一个维度表示下标，第二个维度表示长度是奇数还是偶数，第三个维度表示权值是奇数还是偶数 例如：dp[i][0][0]就表示以下标i结尾的长度为偶数并且权值为偶数的子字符串的数量，dp[i][0][1]表示以下标i结尾的长度为偶数的权值为奇数的子字符串的数量，以此类推。dp数组的转移如代码所示。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="第三题" tabindex="-1"><a class="header-anchor" href="#第三题"><span>第三题</span></a></h2><div class="hint-container info"><p class="hint-container-title">题面</p><p>游游喜欢数数，他想知道由0-n这些数字组成的m位数中（每个数最多使用一次），有多少个是大于k的。</p><p>输入描述</p><p>第一行，输入n，m，k</p><p>1 &lt;= n &lt;= 7</p><p>1 &lt;= m &lt;= n + 1</p><p>0 &lt;= k &lt;= 1e8</p><p>输出描述</p><p>输出大于k的数量</p><p>示例：</p><p>输入：</p><p>输出： 5</p><p>解释：</p><p>大于0的是1,2,3,4,5这5个数</p></div><p><strong>思路与代码</strong></p><p>首先选择m个数位，然后求这些数位的全排列，组合在一起。要注意0在有多个数位的情况下不能开头。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="第四题" tabindex="-1"><a class="header-anchor" href="#第四题"><span>第四题</span></a></h2><div class="hint-container info"><p class="hint-container-title">题面</p><p>游游有一个长度为n的数组a，下标从1开始，一个好数组要求任意连续的k个元素的总和不超过sum 现在可以执行任意次修改，每次修改选择一个下标i(1 &lt;= i &lt;= n)，令ai=ai - 1，注意ai不能为负数。最少执行多少次操作可以满足a是一个好数组？</p><p>输入描述</p><p>第一行，输入n，k，sum</p><p>1 &lt;= k &lt;= n &lt;= 2e5</p><p>1 &lt;= sum &lt;= 1e13</p><p>第二行输入n个数ai</p><p>0 &lt;= ai &lt;= 1e9</p><p>输出描述</p><p>输出最少操作次数</p><p>示例：</p><p>输入：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出：</p><p>解释：</p><p>修改为 [9,1,0,5,5]，只需要操作 10 次</p></div><p><strong>思路与代码</strong></p><p>可以想到每次贪心的对窗口中的最后一个数进行操作，可以使得答案最优。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',20);function r(c,o){return n(),t("div",null,[d,a(" more "),l])}const m=i(p,[["render",r],["__file","携程笔试-0905.html.vue"]]),g=JSON.parse('{"path":"/algorithm/for-offer/%E6%90%BA%E7%A8%8B%E7%AC%94%E8%AF%95-0905.html","title":"携程笔试 - 0905","lang":"zh-CN","frontmatter":{"date":"2024-09-05T00:00:00.000Z","category":["For-Offer"],"tag":["笔试题"],"head":[["meta",{"property":"og:url","content":"https://blog.braumace.cn/ByteLighting/algorithm/for-offer/%E6%90%BA%E7%A8%8B%E7%AC%94%E8%AF%95-0905.html"}],["meta",{"property":"og:site_name","content":"ByteLighting"}],["meta",{"property":"og:title","content":"携程笔试 - 0905"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-05T13:49:40.000Z"}],["meta",{"property":"article:author","content":"BraumAce"}],["meta",{"property":"article:tag","content":"笔试题"}],["meta",{"property":"article:published_time","content":"2024-09-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-05T13:49:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"携程笔试 - 0905\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-05T13:49:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BraumAce\\",\\"url\\":\\"https://blog.braumace.cn/article\\"}]}"]]},"headers":[{"level":2,"title":"第一题","slug":"第一题","link":"#第一题","children":[]},{"level":2,"title":"第二题","slug":"第二题","link":"#第二题","children":[]},{"level":2,"title":"第三题","slug":"第三题","link":"#第三题","children":[]},{"level":2,"title":"第四题","slug":"第四题","link":"#第四题","children":[]}],"git":{"createdTime":1725544180000,"updatedTime":1725544180000,"contributors":[{"name":"BraumAce","email":"1693717911@qq.com","commits":1}]},"readingTime":{"minutes":3,"words":900},"filePathRelative":"algorithm/for-offer/携程笔试-0905.md","localizedDate":"2024年9月5日","excerpt":"\\n"}');export{m as comp,g as data};
